
/***************************************************************************
*
* Copyright (C) 2021 Google Inc.
* Copyright (c) 2023 Valve Corporation
* Copyright (c) 2023 LunarG, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* *** ---- WARNING! ----
* ***   THIS FILE IS GENERATED - DO NOT EDIT
* ***   Update source file command_printer_generator.py for modifications
* *** ---- WARNING! ----
*
****************************************************************************/


// NOLINTBEGIN


#include <streambuf>

#include "command_common.h"
#include "command_printer.h"
#include "util.h"

std::ostream &PrintNextPtr(std::ostream &os, const void *pNext) {
  if (pNext == nullptr) {
    os << "nullptr";
    return os;
  }

  os << std::endl;
  ScopedOstream sonextptr(os);
  const VkStruct *pStruct = reinterpret_cast<const VkStruct *>(pNext);
  PrintVkStruct(os, pStruct);
  return PrintNextPtr(os, pStruct->pNext);
}

const ObjectInfoDB *global_name_resolver = nullptr;
void CommandPrinter::SetNameResolver(const ObjectInfoDB *name_resolver) {
  global_name_resolver = name_resolver;
}

// Handle ostream operators

std::ostream &operator<<(std::ostream& os, const VkBuffer &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkImage &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkInstance &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkPhysicalDevice &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkDevice &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkQueue &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkSemaphore &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkCommandBuffer &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkFence &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkDeviceMemory &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkEvent &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkQueryPool &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkBufferView &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkImageView &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkShaderModule &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkPipelineCache &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkPipelineLayout &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkPipeline &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkRenderPass &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkDescriptorSetLayout &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkSampler &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkDescriptorSet &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkDescriptorPool &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkFramebuffer &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkCommandPool &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkSamplerYcbcrConversion &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkDescriptorUpdateTemplate &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkPrivateDataSlot &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkSurfaceKHR &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkSwapchainKHR &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkDisplayKHR &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkDisplayModeKHR &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkVideoSessionKHR &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkVideoSessionParametersKHR &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkDeferredOperationKHR &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkDebugReportCallbackEXT &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkCuModuleNVX &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkCuFunctionNVX &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkDebugUtilsMessengerEXT &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkValidationCacheEXT &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkAccelerationStructureNV &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkPerformanceConfigurationINTEL &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkIndirectCommandsLayoutNV &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkAccelerationStructureKHR &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

#ifdef VK_USE_PLATFORM_FUCHSIA
std::ostream &operator<<(std::ostream& os, const VkBufferCollectionFUCHSIA &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}
#endif //VK_USE_PLATFORM_FUCHSIA

std::ostream &operator<<(std::ostream& os, const VkMicromapEXT &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkOpticalFlowSessionNV &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}

std::ostream &operator<<(std::ostream& os, const VkShaderEXT &a) {
    auto handle = (uint64_t)(a);
    os << crash_diagnostic_layer::Uint64ToStr(handle) << std::endl;

    auto debug_name = global_name_resolver->GetObjectDebugName(handle);
    if (debug_name.length() > 0) {
      os << "debugName: \"" << debug_name << "\"";
    }
    return os;
}



// Define enum to string functions.

const char *VkResultToString(VkResult e) {
  switch (e) {
  case VK_SUCCESS:
    return "VK_SUCCESS";
  case VK_NOT_READY:
    return "VK_NOT_READY";
  case VK_TIMEOUT:
    return "VK_TIMEOUT";
  case VK_EVENT_SET:
    return "VK_EVENT_SET";
  case VK_EVENT_RESET:
    return "VK_EVENT_RESET";
  case VK_INCOMPLETE:
    return "VK_INCOMPLETE";
  case VK_ERROR_OUT_OF_HOST_MEMORY:
    return "VK_ERROR_OUT_OF_HOST_MEMORY";
  case VK_ERROR_OUT_OF_DEVICE_MEMORY:
    return "VK_ERROR_OUT_OF_DEVICE_MEMORY";
  case VK_ERROR_INITIALIZATION_FAILED:
    return "VK_ERROR_INITIALIZATION_FAILED";
  case VK_ERROR_DEVICE_LOST:
    return "VK_ERROR_DEVICE_LOST";
  case VK_ERROR_MEMORY_MAP_FAILED:
    return "VK_ERROR_MEMORY_MAP_FAILED";
  case VK_ERROR_LAYER_NOT_PRESENT:
    return "VK_ERROR_LAYER_NOT_PRESENT";
  case VK_ERROR_EXTENSION_NOT_PRESENT:
    return "VK_ERROR_EXTENSION_NOT_PRESENT";
  case VK_ERROR_FEATURE_NOT_PRESENT:
    return "VK_ERROR_FEATURE_NOT_PRESENT";
  case VK_ERROR_INCOMPATIBLE_DRIVER:
    return "VK_ERROR_INCOMPATIBLE_DRIVER";
  case VK_ERROR_TOO_MANY_OBJECTS:
    return "VK_ERROR_TOO_MANY_OBJECTS";
  case VK_ERROR_FORMAT_NOT_SUPPORTED:
    return "VK_ERROR_FORMAT_NOT_SUPPORTED";
  case VK_ERROR_FRAGMENTED_POOL:
    return "VK_ERROR_FRAGMENTED_POOL";
  case VK_ERROR_UNKNOWN:
    return "VK_ERROR_UNKNOWN";
  case VK_ERROR_OUT_OF_POOL_MEMORY:
    return "VK_ERROR_OUT_OF_POOL_MEMORY";
  case VK_ERROR_INVALID_EXTERNAL_HANDLE:
    return "VK_ERROR_INVALID_EXTERNAL_HANDLE";
  case VK_ERROR_FRAGMENTATION:
    return "VK_ERROR_FRAGMENTATION";
  case VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS:
    return "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS";
  case VK_PIPELINE_COMPILE_REQUIRED:
    return "VK_PIPELINE_COMPILE_REQUIRED";
  case VK_ERROR_SURFACE_LOST_KHR:
    return "VK_ERROR_SURFACE_LOST_KHR";
  case VK_ERROR_NATIVE_WINDOW_IN_USE_KHR:
    return "VK_ERROR_NATIVE_WINDOW_IN_USE_KHR";
  case VK_SUBOPTIMAL_KHR:
    return "VK_SUBOPTIMAL_KHR";
  case VK_ERROR_OUT_OF_DATE_KHR:
    return "VK_ERROR_OUT_OF_DATE_KHR";
  case VK_ERROR_INCOMPATIBLE_DISPLAY_KHR:
    return "VK_ERROR_INCOMPATIBLE_DISPLAY_KHR";
  case VK_ERROR_VALIDATION_FAILED_EXT:
    return "VK_ERROR_VALIDATION_FAILED_EXT";
  case VK_ERROR_INVALID_SHADER_NV:
    return "VK_ERROR_INVALID_SHADER_NV";
  case VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR:
    return "VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR";
  case VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR:
    return "VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR";
  case VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR:
    return "VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR";
  case VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR:
    return "VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR";
  case VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR:
    return "VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR";
  case VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR:
    return "VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR";
  case VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT:
    return "VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT";
  case VK_ERROR_NOT_PERMITTED_KHR:
    return "VK_ERROR_NOT_PERMITTED_KHR";
  case VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT:
    return "VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT";
  case VK_THREAD_IDLE_KHR:
    return "VK_THREAD_IDLE_KHR";
  case VK_THREAD_DONE_KHR:
    return "VK_THREAD_DONE_KHR";
  case VK_OPERATION_DEFERRED_KHR:
    return "VK_OPERATION_DEFERRED_KHR";
  case VK_OPERATION_NOT_DEFERRED_KHR:
    return "VK_OPERATION_NOT_DEFERRED_KHR";
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR:
    return "VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR";
#endif //VK_ENABLE_BETA_EXTENSIONS
  case VK_ERROR_COMPRESSION_EXHAUSTED_EXT:
    return "VK_ERROR_COMPRESSION_EXHAUSTED_EXT";
  case VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT:
    return "VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT";
  default: return "Unknown VkResult";
  }
}

const char *VkStructureTypeToString(VkStructureType e) {
  switch (e) {
  case VK_STRUCTURE_TYPE_APPLICATION_INFO:
    return "VK_STRUCTURE_TYPE_APPLICATION_INFO";
  case VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_SUBMIT_INFO:
    return "VK_STRUCTURE_TYPE_SUBMIT_INFO";
  case VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO:
    return "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO";
  case VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE:
    return "VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE";
  case VK_STRUCTURE_TYPE_BIND_SPARSE_INFO:
    return "VK_STRUCTURE_TYPE_BIND_SPARSE_INFO";
  case VK_STRUCTURE_TYPE_FENCE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_FENCE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_EVENT_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_EVENT_CREATE_INFO";
  case VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO";
  case VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO";
  case VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO";
  case VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO";
  case VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO";
  case VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO";
  case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO";
  case VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO";
  case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO:
    return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO";
  case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET:
    return "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET";
  case VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET:
    return "VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET";
  case VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO";
  case VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO";
  case VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO";
  case VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO:
    return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO";
  case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO:
    return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO";
  case VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO:
    return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO";
  case VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO:
    return "VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO";
  case VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER:
    return "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER";
  case VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER:
    return "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER";
  case VK_STRUCTURE_TYPE_MEMORY_BARRIER:
    return "VK_STRUCTURE_TYPE_MEMORY_BARRIER";
  case VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES";
  case VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO:
    return "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO";
  case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO:
    return "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES";
  case VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS:
    return "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS";
  case VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO:
    return "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO";
  case VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO:
    return "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO";
  case VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO:
    return "VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO";
  case VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO:
    return "VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO";
  case VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO:
    return "VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO";
  case VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO:
    return "VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO";
  case VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO:
    return "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO";
  case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO:
    return "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES";
  case VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2:
    return "VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2";
  case VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2:
    return "VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2";
  case VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2:
    return "VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2";
  case VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2:
    return "VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2";
  case VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2:
    return "VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2";
  case VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2:
    return "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2";
  case VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2:
    return "VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2";
  case VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2:
    return "VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2";
  case VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2:
    return "VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES";
  case VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO";
  case VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES";
  case VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO:
    return "VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES";
  case VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2:
    return "VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2";
  case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO";
  case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO:
    return "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO";
  case VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO:
    return "VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO";
  case VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO:
    return "VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES";
  case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES:
    return "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES";
  case VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO";
  case VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES:
    return "VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO";
  case VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES:
    return "VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES";
  case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO";
  case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO:
    return "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO";
  case VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES:
    return "VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES";
  case VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO";
  case VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES:
    return "VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES";
  case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT:
    return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES";
  case VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO";
  case VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2:
    return "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2";
  case VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2:
    return "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2";
  case VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2:
    return "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2";
  case VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2:
    return "VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2";
  case VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2:
    return "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2";
  case VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO:
    return "VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO";
  case VK_STRUCTURE_TYPE_SUBPASS_END_INFO:
    return "VK_STRUCTURE_TYPE_SUBPASS_END_INFO";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES";
  case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES";
  case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO:
    return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO";
  case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT:
    return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES";
  case VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE:
    return "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES";
  case VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES";
  case VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES";
  case VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO";
  case VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO:
    return "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO";
  case VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO:
    return "VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES";
  case VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT:
    return "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT";
  case VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT:
    return "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES";
  case VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO:
    return "VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO";
  case VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO:
    return "VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO";
  case VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO:
    return "VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES";
  case VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO:
    return "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO";
  case VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO";
  case VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO:
    return "VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO";
  case VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO:
    return "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES";
  case VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES";
  case VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES";
  case VK_STRUCTURE_TYPE_MEMORY_BARRIER_2:
    return "VK_STRUCTURE_TYPE_MEMORY_BARRIER_2";
  case VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2:
    return "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2";
  case VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2:
    return "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2";
  case VK_STRUCTURE_TYPE_DEPENDENCY_INFO:
    return "VK_STRUCTURE_TYPE_DEPENDENCY_INFO";
  case VK_STRUCTURE_TYPE_SUBMIT_INFO_2:
    return "VK_STRUCTURE_TYPE_SUBMIT_INFO_2";
  case VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO:
    return "VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO";
  case VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO:
    return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES";
  case VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2:
    return "VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2";
  case VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2:
    return "VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2";
  case VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2:
    return "VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2";
  case VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2:
    return "VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2";
  case VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2:
    return "VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2";
  case VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2:
    return "VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2";
  case VK_STRUCTURE_TYPE_BUFFER_COPY_2:
    return "VK_STRUCTURE_TYPE_BUFFER_COPY_2";
  case VK_STRUCTURE_TYPE_IMAGE_COPY_2:
    return "VK_STRUCTURE_TYPE_IMAGE_COPY_2";
  case VK_STRUCTURE_TYPE_IMAGE_BLIT_2:
    return "VK_STRUCTURE_TYPE_IMAGE_BLIT_2";
  case VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2:
    return "VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2";
  case VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2:
    return "VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES";
  case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES";
  case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK:
    return "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK";
  case VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES";
  case VK_STRUCTURE_TYPE_RENDERING_INFO:
    return "VK_STRUCTURE_TYPE_RENDERING_INFO";
  case VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO:
    return "VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO";
  case VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO:
    return "VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES";
  case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO:
    return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES";
  case VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3:
    return "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES";
  case VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS:
    return "VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS";
  case VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS:
    return "VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS";
  case VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR";
  case VK_STRUCTURE_TYPE_PRESENT_INFO_KHR:
    return "VK_STRUCTURE_TYPE_PRESENT_INFO_KHR";
  case VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR:
    return "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR";
  case VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR";
  case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR:
    return "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR";
  case VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR";
  case VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR:
    return "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR";
  case VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR";
  case VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR";
  case VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR";
  case VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR:
    return "VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR";
  case VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR";
  case VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR";
  case VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR";
  case VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR";
  case VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR";
  case VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD:
    return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD";
  case VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT:
    return "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT";
  case VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT:
    return "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT";
  case VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT:
    return "VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT";
  case VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR";
  case VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR:
    return "VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR";
  case VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR:
    return "VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR";
  case VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR:
    return "VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR";
  case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV:
    return "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV";
  case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV:
    return "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV";
  case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV:
    return "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX:
    return "VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX";
  case VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX:
    return "VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX";
  case VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX:
    return "VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX";
  case VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX:
    return "VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX";
  case VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX:
    return "VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX";
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_EXT";
#endif //VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR";
  case VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD:
    return "VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD";
  case VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR:
    return "VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR";
  case VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT:
    return "VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT";
  case VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD:
    return "VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD";
  case VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX:
    return "VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX";
  case VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP:
    return "VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV";
  case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV:
    return "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV";
  case VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV:
    return "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV";
  case VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV:
    return "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV";
  case VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV:
    return "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV";
  case VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV:
    return "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV";
  case VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT:
    return "VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT";
  case VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN:
    return "VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN";
  case VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT:
    return "VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR";
  case VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR";
  case VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR:
    return "VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR";
  case VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR";
  case VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR:
    return "VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR";
  case VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR:
    return "VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR";
  case VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR:
    return "VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR";
  case VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR";
  case VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR";
  case VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR";
  case VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR:
    return "VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR";
  case VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR";
  case VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR:
    return "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR";
  case VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR:
    return "VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR";
  case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT:
    return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT:
    return "VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT";
  case VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR:
    return "VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR";
  case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV:
    return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV";
  case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT:
    return "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT";
  case VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT:
    return "VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT";
  case VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT:
    return "VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT";
  case VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT:
    return "VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT";
  case VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE:
    return "VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX";
  case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV:
    return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_HDR_METADATA_EXT:
    return "VK_STRUCTURE_TYPE_HDR_METADATA_EXT";
  case VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR:
    return "VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR";
  case VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR";
  case VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR";
  case VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR";
  case VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR:
    return "VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR";
  case VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR:
    return "VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR";
  case VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR";
  case VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR:
    return "VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR";
  case VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR:
    return "VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR";
  case VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR:
    return "VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR";
  case VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR:
    return "VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR";
  case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR:
    return "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR";
  case VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR:
    return "VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR";
  case VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR:
    return "VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR";
  case VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR:
    return "VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR";
  case VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR:
    return "VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR";
  case VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR:
    return "VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR";
  case VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR:
    return "VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR";
  case VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK:
    return "VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK";
  case VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK:
    return "VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK";
  case VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT:
    return "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT";
  case VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT:
    return "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT";
  case VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT:
    return "VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT";
  case VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT:
    return "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT";
  case VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID:
    return "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID";
  case VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID:
    return "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID";
  case VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID:
    return "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID";
  case VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID:
    return "VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID";
  case VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID:
    return "VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID";
  case VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID:
    return "VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID";
  case VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID:
    return "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID";
  case VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT:
    return "VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT";
  case VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT:
    return "VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT";
  case VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV:
    return "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV";
  case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR:
    return "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR";
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR:
    return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR";
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR:
    return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR";
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR:
    return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR";
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR:
    return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR";
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR:
    return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR";
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR:
    return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR";
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR:
    return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR";
  case VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR";
  case VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR:
    return "VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR";
  case VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR";
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR";
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR:
    return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR";
  case VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR";
  case VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR";
  case VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR";
  case VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV:
    return "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV";
  case VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT:
    return "VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT";
  case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT:
    return "VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT";
  case VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT";
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR";
#endif //VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV:
    return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV";
  case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV:
    return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV";
  case VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV:
    return "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV";
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV:
    return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV";
  case VK_STRUCTURE_TYPE_GEOMETRY_NV:
    return "VK_STRUCTURE_TYPE_GEOMETRY_NV";
  case VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV:
    return "VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV";
  case VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV:
    return "VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV";
  case VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV:
    return "VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV";
  case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV:
    return "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV";
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV:
    return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV";
  case VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV:
    return "VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV";
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV:
    return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV";
  case VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV:
    return "VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT";
  case VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT:
    return "VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT";
  case VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR";
  case VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD:
    return "VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD";
  case VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT:
    return "VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD";
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR";
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR";
  case VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR";
  case VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR:
    return "VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR";
  case VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD:
    return "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP:
    return "VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV";
  case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV:
    return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV";
  case VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV:
    return "VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV";
  case VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV:
    return "VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL";
  case VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL:
    return "VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL";
  case VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL:
    return "VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL";
  case VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL:
    return "VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL";
  case VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL:
    return "VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL";
  case VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL:
    return "VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL";
  case VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL:
    return "VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD:
    return "VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD";
  case VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD:
    return "VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD";
  case VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA:
    return "VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA";
  case VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR:
    return "VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR";
  case VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR:
    return "VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV";
  case VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV:
    return "VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV";
  case VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV:
    return "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV";
  case VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV:
    return "VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT";
  case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT:
    return "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT";
  case VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT:
    return "VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT";
  case VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR";
  case VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR";
  case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR:
    return "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR";
  case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR";
  case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR:
    return "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR";
  case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR:
    return "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT:
    return "VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT";
  case VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT:
    return "VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT";
  case VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT:
    return "VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT";
  case VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT";
  case VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT:
    return "VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT";
  case VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT";
  case VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT:
    return "VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT";
  case VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT:
    return "VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT";
  case VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR:
    return "VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR";
  case VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR:
    return "VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT:
    return "VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT";
  case VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT:
    return "VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT";
  case VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT:
    return "VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT";
  case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT";
  case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT:
    return "VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV";
  case VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV:
    return "VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV";
  case VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV:
    return "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV";
  case VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV:
    return "VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV";
  case VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV:
    return "VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV";
  case VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV:
    return "VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV";
  case VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV:
    return "VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV";
  case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV:
    return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM:
    return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM";
  case VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM:
    return "VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT:
    return "VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT";
  case VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT:
    return "VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT:
    return "VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV";
  case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV:
    return "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV";
  case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV:
    return "VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV";
  case VK_STRUCTURE_TYPE_PRESENT_ID_KHR:
    return "VK_STRUCTURE_TYPE_PRESENT_ID_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR";
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR:
    return "VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR:
    return "VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR";
#endif //VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV";
  case VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV:
    return "VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV";
  case VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV:
    return "VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV";
  case VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT:
    return "VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT";
  case VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT";
  case VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT";
  case VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT:
    return "VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT";
  case VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT:
    return "VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT";
  case VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT";
  case VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT";
  case VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT";
  case VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT";
  case VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT:
    return "VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT";
  case VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT:
    return "VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT";
  case VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV:
    return "VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV";
  case VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV:
    return "VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT:
    return "VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT";
  case VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT:
    return "VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT";
  case VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
    return "VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT";
  case VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
    return "VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT";
  case VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
    return "VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT";
  case VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
    return "VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT";
  case VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT:
    return "VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT";
  case VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT:
    return "VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT";
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
    return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV";
  case VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV:
    return "VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV";
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV:
    return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV";
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV:
    return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM:
    return "VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT:
    return "VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT";
  case VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT:
    return "VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT";
  case VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT:
    return "VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT";
  case VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT:
    return "VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT";
  case VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT:
    return "VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT:
    return "VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT";
  case VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT:
    return "VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT:
    return "VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA:
    return "VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA";
  case VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA:
    return "VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA";
  case VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA:
    return "VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA";
  case VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA:
    return "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA";
  case VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA:
    return "VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA";
  case VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA:
    return "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA";
  case VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA:
    return "VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA";
  case VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA:
    return "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA";
  case VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA:
    return "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA";
  case VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA:
    return "VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA";
  case VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA:
    return "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA";
  case VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA:
    return "VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA";
  case VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA:
    return "VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA";
  case VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA:
    return "VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA";
  case VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA:
    return "VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA";
  case VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI:
    return "VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI";
  case VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV:
    return "VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV";
  case VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT:
    return "VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT:
    return "VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT";
  case VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT:
    return "VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX:
    return "VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT:
    return "VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT";
  case VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT:
    return "VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT";
  case VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT:
    return "VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT";
  case VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT:
    return "VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT";
  case VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT:
    return "VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT:
    return "VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT";
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT:
    return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT";
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_FEATURES_NV";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_PROPERTIES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_PROPERTIES_NV";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_DISPLACEMENT_MICROMAP_NV:
    return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_DISPLACEMENT_MICROMAP_NV";
#endif //VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE";
  case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE:
    return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE";
  case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE:
    return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM";
  case VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM:
    return "VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV";
  case VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV:
    return "VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV";
  case VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV:
    return "VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM";
  case VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM:
    return "VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM";
  case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT:
    return "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT:
    return "VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT";
  case VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG:
    return "VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG";
  case VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG:
    return "VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT:
    return "VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV";
  case VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV:
    return "VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV";
  case VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV:
    return "VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV";
  case VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV:
    return "VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV";
  case VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV:
    return "VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV";
  case VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV:
    return "VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT";
  case VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM";
  case VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM:
    return "VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC";
  case VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC:
    return "VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT:
    return "VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR";
  case VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR:
    return "VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM";
  case VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM:
    return "VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT";
  case VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX:
    return "VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX";
  case VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX:
    return "VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX";
  case VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX:
    return "VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX";
  case VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX:
    return "VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX";
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX:
    return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX";
  default: return "Unknown VkStructureType";
  }
}

const char *VkPipelineCacheHeaderVersionToString(VkPipelineCacheHeaderVersion e) {
  switch (e) {
  case VK_PIPELINE_CACHE_HEADER_VERSION_ONE:
    return "VK_PIPELINE_CACHE_HEADER_VERSION_ONE";
  default: return "Unknown VkPipelineCacheHeaderVersion";
  }
}

const char *VkImageLayoutToString(VkImageLayout e) {
  switch (e) {
  case VK_IMAGE_LAYOUT_UNDEFINED:
    return "VK_IMAGE_LAYOUT_UNDEFINED";
  case VK_IMAGE_LAYOUT_GENERAL:
    return "VK_IMAGE_LAYOUT_GENERAL";
  case VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL:
    return "VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL";
  case VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL:
    return "VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL";
  case VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL:
    return "VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL";
  case VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL:
    return "VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL";
  case VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL:
    return "VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL";
  case VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL:
    return "VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL";
  case VK_IMAGE_LAYOUT_PREINITIALIZED:
    return "VK_IMAGE_LAYOUT_PREINITIALIZED";
  case VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL:
    return "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL";
  case VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL:
    return "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL";
  case VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL:
    return "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL";
  case VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL:
    return "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL";
  case VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL:
    return "VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL";
  case VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL:
    return "VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL";
  case VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL:
    return "VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL";
  case VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL:
    return "VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL";
  case VK_IMAGE_LAYOUT_PRESENT_SRC_KHR:
    return "VK_IMAGE_LAYOUT_PRESENT_SRC_KHR";
  case VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR:
    return "VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR";
  case VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR:
    return "VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR";
  case VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR:
    return "VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR";
  case VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR:
    return "VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR";
  case VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT:
    return "VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT";
  case VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR:
    return "VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR";
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR:
    return "VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR:
    return "VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR";
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR:
    return "VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR";
#endif //VK_ENABLE_BETA_EXTENSIONS
  case VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT:
    return "VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT";
  default: return "Unknown VkImageLayout";
  }
}

const char *VkObjectTypeToString(VkObjectType e) {
  switch (e) {
  case VK_OBJECT_TYPE_UNKNOWN:
    return "VK_OBJECT_TYPE_UNKNOWN";
  case VK_OBJECT_TYPE_INSTANCE:
    return "VK_OBJECT_TYPE_INSTANCE";
  case VK_OBJECT_TYPE_PHYSICAL_DEVICE:
    return "VK_OBJECT_TYPE_PHYSICAL_DEVICE";
  case VK_OBJECT_TYPE_DEVICE:
    return "VK_OBJECT_TYPE_DEVICE";
  case VK_OBJECT_TYPE_QUEUE:
    return "VK_OBJECT_TYPE_QUEUE";
  case VK_OBJECT_TYPE_SEMAPHORE:
    return "VK_OBJECT_TYPE_SEMAPHORE";
  case VK_OBJECT_TYPE_COMMAND_BUFFER:
    return "VK_OBJECT_TYPE_COMMAND_BUFFER";
  case VK_OBJECT_TYPE_FENCE:
    return "VK_OBJECT_TYPE_FENCE";
  case VK_OBJECT_TYPE_DEVICE_MEMORY:
    return "VK_OBJECT_TYPE_DEVICE_MEMORY";
  case VK_OBJECT_TYPE_BUFFER:
    return "VK_OBJECT_TYPE_BUFFER";
  case VK_OBJECT_TYPE_IMAGE:
    return "VK_OBJECT_TYPE_IMAGE";
  case VK_OBJECT_TYPE_EVENT:
    return "VK_OBJECT_TYPE_EVENT";
  case VK_OBJECT_TYPE_QUERY_POOL:
    return "VK_OBJECT_TYPE_QUERY_POOL";
  case VK_OBJECT_TYPE_BUFFER_VIEW:
    return "VK_OBJECT_TYPE_BUFFER_VIEW";
  case VK_OBJECT_TYPE_IMAGE_VIEW:
    return "VK_OBJECT_TYPE_IMAGE_VIEW";
  case VK_OBJECT_TYPE_SHADER_MODULE:
    return "VK_OBJECT_TYPE_SHADER_MODULE";
  case VK_OBJECT_TYPE_PIPELINE_CACHE:
    return "VK_OBJECT_TYPE_PIPELINE_CACHE";
  case VK_OBJECT_TYPE_PIPELINE_LAYOUT:
    return "VK_OBJECT_TYPE_PIPELINE_LAYOUT";
  case VK_OBJECT_TYPE_RENDER_PASS:
    return "VK_OBJECT_TYPE_RENDER_PASS";
  case VK_OBJECT_TYPE_PIPELINE:
    return "VK_OBJECT_TYPE_PIPELINE";
  case VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT:
    return "VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT";
  case VK_OBJECT_TYPE_SAMPLER:
    return "VK_OBJECT_TYPE_SAMPLER";
  case VK_OBJECT_TYPE_DESCRIPTOR_POOL:
    return "VK_OBJECT_TYPE_DESCRIPTOR_POOL";
  case VK_OBJECT_TYPE_DESCRIPTOR_SET:
    return "VK_OBJECT_TYPE_DESCRIPTOR_SET";
  case VK_OBJECT_TYPE_FRAMEBUFFER:
    return "VK_OBJECT_TYPE_FRAMEBUFFER";
  case VK_OBJECT_TYPE_COMMAND_POOL:
    return "VK_OBJECT_TYPE_COMMAND_POOL";
  case VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION:
    return "VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION";
  case VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE:
    return "VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE";
  case VK_OBJECT_TYPE_PRIVATE_DATA_SLOT:
    return "VK_OBJECT_TYPE_PRIVATE_DATA_SLOT";
  case VK_OBJECT_TYPE_SURFACE_KHR:
    return "VK_OBJECT_TYPE_SURFACE_KHR";
  case VK_OBJECT_TYPE_SWAPCHAIN_KHR:
    return "VK_OBJECT_TYPE_SWAPCHAIN_KHR";
  case VK_OBJECT_TYPE_DISPLAY_KHR:
    return "VK_OBJECT_TYPE_DISPLAY_KHR";
  case VK_OBJECT_TYPE_DISPLAY_MODE_KHR:
    return "VK_OBJECT_TYPE_DISPLAY_MODE_KHR";
  case VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT:
    return "VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT";
  case VK_OBJECT_TYPE_VIDEO_SESSION_KHR:
    return "VK_OBJECT_TYPE_VIDEO_SESSION_KHR";
  case VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR:
    return "VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR";
  case VK_OBJECT_TYPE_CU_MODULE_NVX:
    return "VK_OBJECT_TYPE_CU_MODULE_NVX";
  case VK_OBJECT_TYPE_CU_FUNCTION_NVX:
    return "VK_OBJECT_TYPE_CU_FUNCTION_NVX";
  case VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT:
    return "VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT";
  case VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR:
    return "VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR";
  case VK_OBJECT_TYPE_VALIDATION_CACHE_EXT:
    return "VK_OBJECT_TYPE_VALIDATION_CACHE_EXT";
  case VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV:
    return "VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV";
  case VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL:
    return "VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL";
  case VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR:
    return "VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR";
  case VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV:
    return "VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV";
  case VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA:
    return "VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA";
  case VK_OBJECT_TYPE_MICROMAP_EXT:
    return "VK_OBJECT_TYPE_MICROMAP_EXT";
  case VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV:
    return "VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV";
  case VK_OBJECT_TYPE_SHADER_EXT:
    return "VK_OBJECT_TYPE_SHADER_EXT";
  default: return "Unknown VkObjectType";
  }
}

const char *VkVendorIdToString(VkVendorId e) {
  switch (e) {
  case VK_VENDOR_ID_VIV:
    return "VK_VENDOR_ID_VIV";
  case VK_VENDOR_ID_VSI:
    return "VK_VENDOR_ID_VSI";
  case VK_VENDOR_ID_KAZAN:
    return "VK_VENDOR_ID_KAZAN";
  case VK_VENDOR_ID_CODEPLAY:
    return "VK_VENDOR_ID_CODEPLAY";
  case VK_VENDOR_ID_MESA:
    return "VK_VENDOR_ID_MESA";
  case VK_VENDOR_ID_POCL:
    return "VK_VENDOR_ID_POCL";
  case VK_VENDOR_ID_MOBILEYE:
    return "VK_VENDOR_ID_MOBILEYE";
  default: return "Unknown VkVendorId";
  }
}

const char *VkSystemAllocationScopeToString(VkSystemAllocationScope e) {
  switch (e) {
  case VK_SYSTEM_ALLOCATION_SCOPE_COMMAND:
    return "VK_SYSTEM_ALLOCATION_SCOPE_COMMAND";
  case VK_SYSTEM_ALLOCATION_SCOPE_OBJECT:
    return "VK_SYSTEM_ALLOCATION_SCOPE_OBJECT";
  case VK_SYSTEM_ALLOCATION_SCOPE_CACHE:
    return "VK_SYSTEM_ALLOCATION_SCOPE_CACHE";
  case VK_SYSTEM_ALLOCATION_SCOPE_DEVICE:
    return "VK_SYSTEM_ALLOCATION_SCOPE_DEVICE";
  case VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE:
    return "VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE";
  default: return "Unknown VkSystemAllocationScope";
  }
}

const char *VkInternalAllocationTypeToString(VkInternalAllocationType e) {
  switch (e) {
  case VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE:
    return "VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE";
  default: return "Unknown VkInternalAllocationType";
  }
}

const char *VkFormatToString(VkFormat e) {
  switch (e) {
  case VK_FORMAT_UNDEFINED:
    return "VK_FORMAT_UNDEFINED";
  case VK_FORMAT_R4G4_UNORM_PACK8:
    return "VK_FORMAT_R4G4_UNORM_PACK8";
  case VK_FORMAT_R4G4B4A4_UNORM_PACK16:
    return "VK_FORMAT_R4G4B4A4_UNORM_PACK16";
  case VK_FORMAT_B4G4R4A4_UNORM_PACK16:
    return "VK_FORMAT_B4G4R4A4_UNORM_PACK16";
  case VK_FORMAT_R5G6B5_UNORM_PACK16:
    return "VK_FORMAT_R5G6B5_UNORM_PACK16";
  case VK_FORMAT_B5G6R5_UNORM_PACK16:
    return "VK_FORMAT_B5G6R5_UNORM_PACK16";
  case VK_FORMAT_R5G5B5A1_UNORM_PACK16:
    return "VK_FORMAT_R5G5B5A1_UNORM_PACK16";
  case VK_FORMAT_B5G5R5A1_UNORM_PACK16:
    return "VK_FORMAT_B5G5R5A1_UNORM_PACK16";
  case VK_FORMAT_A1R5G5B5_UNORM_PACK16:
    return "VK_FORMAT_A1R5G5B5_UNORM_PACK16";
  case VK_FORMAT_R8_UNORM:
    return "VK_FORMAT_R8_UNORM";
  case VK_FORMAT_R8_SNORM:
    return "VK_FORMAT_R8_SNORM";
  case VK_FORMAT_R8_USCALED:
    return "VK_FORMAT_R8_USCALED";
  case VK_FORMAT_R8_SSCALED:
    return "VK_FORMAT_R8_SSCALED";
  case VK_FORMAT_R8_UINT:
    return "VK_FORMAT_R8_UINT";
  case VK_FORMAT_R8_SINT:
    return "VK_FORMAT_R8_SINT";
  case VK_FORMAT_R8_SRGB:
    return "VK_FORMAT_R8_SRGB";
  case VK_FORMAT_R8G8_UNORM:
    return "VK_FORMAT_R8G8_UNORM";
  case VK_FORMAT_R8G8_SNORM:
    return "VK_FORMAT_R8G8_SNORM";
  case VK_FORMAT_R8G8_USCALED:
    return "VK_FORMAT_R8G8_USCALED";
  case VK_FORMAT_R8G8_SSCALED:
    return "VK_FORMAT_R8G8_SSCALED";
  case VK_FORMAT_R8G8_UINT:
    return "VK_FORMAT_R8G8_UINT";
  case VK_FORMAT_R8G8_SINT:
    return "VK_FORMAT_R8G8_SINT";
  case VK_FORMAT_R8G8_SRGB:
    return "VK_FORMAT_R8G8_SRGB";
  case VK_FORMAT_R8G8B8_UNORM:
    return "VK_FORMAT_R8G8B8_UNORM";
  case VK_FORMAT_R8G8B8_SNORM:
    return "VK_FORMAT_R8G8B8_SNORM";
  case VK_FORMAT_R8G8B8_USCALED:
    return "VK_FORMAT_R8G8B8_USCALED";
  case VK_FORMAT_R8G8B8_SSCALED:
    return "VK_FORMAT_R8G8B8_SSCALED";
  case VK_FORMAT_R8G8B8_UINT:
    return "VK_FORMAT_R8G8B8_UINT";
  case VK_FORMAT_R8G8B8_SINT:
    return "VK_FORMAT_R8G8B8_SINT";
  case VK_FORMAT_R8G8B8_SRGB:
    return "VK_FORMAT_R8G8B8_SRGB";
  case VK_FORMAT_B8G8R8_UNORM:
    return "VK_FORMAT_B8G8R8_UNORM";
  case VK_FORMAT_B8G8R8_SNORM:
    return "VK_FORMAT_B8G8R8_SNORM";
  case VK_FORMAT_B8G8R8_USCALED:
    return "VK_FORMAT_B8G8R8_USCALED";
  case VK_FORMAT_B8G8R8_SSCALED:
    return "VK_FORMAT_B8G8R8_SSCALED";
  case VK_FORMAT_B8G8R8_UINT:
    return "VK_FORMAT_B8G8R8_UINT";
  case VK_FORMAT_B8G8R8_SINT:
    return "VK_FORMAT_B8G8R8_SINT";
  case VK_FORMAT_B8G8R8_SRGB:
    return "VK_FORMAT_B8G8R8_SRGB";
  case VK_FORMAT_R8G8B8A8_UNORM:
    return "VK_FORMAT_R8G8B8A8_UNORM";
  case VK_FORMAT_R8G8B8A8_SNORM:
    return "VK_FORMAT_R8G8B8A8_SNORM";
  case VK_FORMAT_R8G8B8A8_USCALED:
    return "VK_FORMAT_R8G8B8A8_USCALED";
  case VK_FORMAT_R8G8B8A8_SSCALED:
    return "VK_FORMAT_R8G8B8A8_SSCALED";
  case VK_FORMAT_R8G8B8A8_UINT:
    return "VK_FORMAT_R8G8B8A8_UINT";
  case VK_FORMAT_R8G8B8A8_SINT:
    return "VK_FORMAT_R8G8B8A8_SINT";
  case VK_FORMAT_R8G8B8A8_SRGB:
    return "VK_FORMAT_R8G8B8A8_SRGB";
  case VK_FORMAT_B8G8R8A8_UNORM:
    return "VK_FORMAT_B8G8R8A8_UNORM";
  case VK_FORMAT_B8G8R8A8_SNORM:
    return "VK_FORMAT_B8G8R8A8_SNORM";
  case VK_FORMAT_B8G8R8A8_USCALED:
    return "VK_FORMAT_B8G8R8A8_USCALED";
  case VK_FORMAT_B8G8R8A8_SSCALED:
    return "VK_FORMAT_B8G8R8A8_SSCALED";
  case VK_FORMAT_B8G8R8A8_UINT:
    return "VK_FORMAT_B8G8R8A8_UINT";
  case VK_FORMAT_B8G8R8A8_SINT:
    return "VK_FORMAT_B8G8R8A8_SINT";
  case VK_FORMAT_B8G8R8A8_SRGB:
    return "VK_FORMAT_B8G8R8A8_SRGB";
  case VK_FORMAT_A8B8G8R8_UNORM_PACK32:
    return "VK_FORMAT_A8B8G8R8_UNORM_PACK32";
  case VK_FORMAT_A8B8G8R8_SNORM_PACK32:
    return "VK_FORMAT_A8B8G8R8_SNORM_PACK32";
  case VK_FORMAT_A8B8G8R8_USCALED_PACK32:
    return "VK_FORMAT_A8B8G8R8_USCALED_PACK32";
  case VK_FORMAT_A8B8G8R8_SSCALED_PACK32:
    return "VK_FORMAT_A8B8G8R8_SSCALED_PACK32";
  case VK_FORMAT_A8B8G8R8_UINT_PACK32:
    return "VK_FORMAT_A8B8G8R8_UINT_PACK32";
  case VK_FORMAT_A8B8G8R8_SINT_PACK32:
    return "VK_FORMAT_A8B8G8R8_SINT_PACK32";
  case VK_FORMAT_A8B8G8R8_SRGB_PACK32:
    return "VK_FORMAT_A8B8G8R8_SRGB_PACK32";
  case VK_FORMAT_A2R10G10B10_UNORM_PACK32:
    return "VK_FORMAT_A2R10G10B10_UNORM_PACK32";
  case VK_FORMAT_A2R10G10B10_SNORM_PACK32:
    return "VK_FORMAT_A2R10G10B10_SNORM_PACK32";
  case VK_FORMAT_A2R10G10B10_USCALED_PACK32:
    return "VK_FORMAT_A2R10G10B10_USCALED_PACK32";
  case VK_FORMAT_A2R10G10B10_SSCALED_PACK32:
    return "VK_FORMAT_A2R10G10B10_SSCALED_PACK32";
  case VK_FORMAT_A2R10G10B10_UINT_PACK32:
    return "VK_FORMAT_A2R10G10B10_UINT_PACK32";
  case VK_FORMAT_A2R10G10B10_SINT_PACK32:
    return "VK_FORMAT_A2R10G10B10_SINT_PACK32";
  case VK_FORMAT_A2B10G10R10_UNORM_PACK32:
    return "VK_FORMAT_A2B10G10R10_UNORM_PACK32";
  case VK_FORMAT_A2B10G10R10_SNORM_PACK32:
    return "VK_FORMAT_A2B10G10R10_SNORM_PACK32";
  case VK_FORMAT_A2B10G10R10_USCALED_PACK32:
    return "VK_FORMAT_A2B10G10R10_USCALED_PACK32";
  case VK_FORMAT_A2B10G10R10_SSCALED_PACK32:
    return "VK_FORMAT_A2B10G10R10_SSCALED_PACK32";
  case VK_FORMAT_A2B10G10R10_UINT_PACK32:
    return "VK_FORMAT_A2B10G10R10_UINT_PACK32";
  case VK_FORMAT_A2B10G10R10_SINT_PACK32:
    return "VK_FORMAT_A2B10G10R10_SINT_PACK32";
  case VK_FORMAT_R16_UNORM:
    return "VK_FORMAT_R16_UNORM";
  case VK_FORMAT_R16_SNORM:
    return "VK_FORMAT_R16_SNORM";
  case VK_FORMAT_R16_USCALED:
    return "VK_FORMAT_R16_USCALED";
  case VK_FORMAT_R16_SSCALED:
    return "VK_FORMAT_R16_SSCALED";
  case VK_FORMAT_R16_UINT:
    return "VK_FORMAT_R16_UINT";
  case VK_FORMAT_R16_SINT:
    return "VK_FORMAT_R16_SINT";
  case VK_FORMAT_R16_SFLOAT:
    return "VK_FORMAT_R16_SFLOAT";
  case VK_FORMAT_R16G16_UNORM:
    return "VK_FORMAT_R16G16_UNORM";
  case VK_FORMAT_R16G16_SNORM:
    return "VK_FORMAT_R16G16_SNORM";
  case VK_FORMAT_R16G16_USCALED:
    return "VK_FORMAT_R16G16_USCALED";
  case VK_FORMAT_R16G16_SSCALED:
    return "VK_FORMAT_R16G16_SSCALED";
  case VK_FORMAT_R16G16_UINT:
    return "VK_FORMAT_R16G16_UINT";
  case VK_FORMAT_R16G16_SINT:
    return "VK_FORMAT_R16G16_SINT";
  case VK_FORMAT_R16G16_SFLOAT:
    return "VK_FORMAT_R16G16_SFLOAT";
  case VK_FORMAT_R16G16B16_UNORM:
    return "VK_FORMAT_R16G16B16_UNORM";
  case VK_FORMAT_R16G16B16_SNORM:
    return "VK_FORMAT_R16G16B16_SNORM";
  case VK_FORMAT_R16G16B16_USCALED:
    return "VK_FORMAT_R16G16B16_USCALED";
  case VK_FORMAT_R16G16B16_SSCALED:
    return "VK_FORMAT_R16G16B16_SSCALED";
  case VK_FORMAT_R16G16B16_UINT:
    return "VK_FORMAT_R16G16B16_UINT";
  case VK_FORMAT_R16G16B16_SINT:
    return "VK_FORMAT_R16G16B16_SINT";
  case VK_FORMAT_R16G16B16_SFLOAT:
    return "VK_FORMAT_R16G16B16_SFLOAT";
  case VK_FORMAT_R16G16B16A16_UNORM:
    return "VK_FORMAT_R16G16B16A16_UNORM";
  case VK_FORMAT_R16G16B16A16_SNORM:
    return "VK_FORMAT_R16G16B16A16_SNORM";
  case VK_FORMAT_R16G16B16A16_USCALED:
    return "VK_FORMAT_R16G16B16A16_USCALED";
  case VK_FORMAT_R16G16B16A16_SSCALED:
    return "VK_FORMAT_R16G16B16A16_SSCALED";
  case VK_FORMAT_R16G16B16A16_UINT:
    return "VK_FORMAT_R16G16B16A16_UINT";
  case VK_FORMAT_R16G16B16A16_SINT:
    return "VK_FORMAT_R16G16B16A16_SINT";
  case VK_FORMAT_R16G16B16A16_SFLOAT:
    return "VK_FORMAT_R16G16B16A16_SFLOAT";
  case VK_FORMAT_R32_UINT:
    return "VK_FORMAT_R32_UINT";
  case VK_FORMAT_R32_SINT:
    return "VK_FORMAT_R32_SINT";
  case VK_FORMAT_R32_SFLOAT:
    return "VK_FORMAT_R32_SFLOAT";
  case VK_FORMAT_R32G32_UINT:
    return "VK_FORMAT_R32G32_UINT";
  case VK_FORMAT_R32G32_SINT:
    return "VK_FORMAT_R32G32_SINT";
  case VK_FORMAT_R32G32_SFLOAT:
    return "VK_FORMAT_R32G32_SFLOAT";
  case VK_FORMAT_R32G32B32_UINT:
    return "VK_FORMAT_R32G32B32_UINT";
  case VK_FORMAT_R32G32B32_SINT:
    return "VK_FORMAT_R32G32B32_SINT";
  case VK_FORMAT_R32G32B32_SFLOAT:
    return "VK_FORMAT_R32G32B32_SFLOAT";
  case VK_FORMAT_R32G32B32A32_UINT:
    return "VK_FORMAT_R32G32B32A32_UINT";
  case VK_FORMAT_R32G32B32A32_SINT:
    return "VK_FORMAT_R32G32B32A32_SINT";
  case VK_FORMAT_R32G32B32A32_SFLOAT:
    return "VK_FORMAT_R32G32B32A32_SFLOAT";
  case VK_FORMAT_R64_UINT:
    return "VK_FORMAT_R64_UINT";
  case VK_FORMAT_R64_SINT:
    return "VK_FORMAT_R64_SINT";
  case VK_FORMAT_R64_SFLOAT:
    return "VK_FORMAT_R64_SFLOAT";
  case VK_FORMAT_R64G64_UINT:
    return "VK_FORMAT_R64G64_UINT";
  case VK_FORMAT_R64G64_SINT:
    return "VK_FORMAT_R64G64_SINT";
  case VK_FORMAT_R64G64_SFLOAT:
    return "VK_FORMAT_R64G64_SFLOAT";
  case VK_FORMAT_R64G64B64_UINT:
    return "VK_FORMAT_R64G64B64_UINT";
  case VK_FORMAT_R64G64B64_SINT:
    return "VK_FORMAT_R64G64B64_SINT";
  case VK_FORMAT_R64G64B64_SFLOAT:
    return "VK_FORMAT_R64G64B64_SFLOAT";
  case VK_FORMAT_R64G64B64A64_UINT:
    return "VK_FORMAT_R64G64B64A64_UINT";
  case VK_FORMAT_R64G64B64A64_SINT:
    return "VK_FORMAT_R64G64B64A64_SINT";
  case VK_FORMAT_R64G64B64A64_SFLOAT:
    return "VK_FORMAT_R64G64B64A64_SFLOAT";
  case VK_FORMAT_B10G11R11_UFLOAT_PACK32:
    return "VK_FORMAT_B10G11R11_UFLOAT_PACK32";
  case VK_FORMAT_E5B9G9R9_UFLOAT_PACK32:
    return "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32";
  case VK_FORMAT_D16_UNORM:
    return "VK_FORMAT_D16_UNORM";
  case VK_FORMAT_X8_D24_UNORM_PACK32:
    return "VK_FORMAT_X8_D24_UNORM_PACK32";
  case VK_FORMAT_D32_SFLOAT:
    return "VK_FORMAT_D32_SFLOAT";
  case VK_FORMAT_S8_UINT:
    return "VK_FORMAT_S8_UINT";
  case VK_FORMAT_D16_UNORM_S8_UINT:
    return "VK_FORMAT_D16_UNORM_S8_UINT";
  case VK_FORMAT_D24_UNORM_S8_UINT:
    return "VK_FORMAT_D24_UNORM_S8_UINT";
  case VK_FORMAT_D32_SFLOAT_S8_UINT:
    return "VK_FORMAT_D32_SFLOAT_S8_UINT";
  case VK_FORMAT_BC1_RGB_UNORM_BLOCK:
    return "VK_FORMAT_BC1_RGB_UNORM_BLOCK";
  case VK_FORMAT_BC1_RGB_SRGB_BLOCK:
    return "VK_FORMAT_BC1_RGB_SRGB_BLOCK";
  case VK_FORMAT_BC1_RGBA_UNORM_BLOCK:
    return "VK_FORMAT_BC1_RGBA_UNORM_BLOCK";
  case VK_FORMAT_BC1_RGBA_SRGB_BLOCK:
    return "VK_FORMAT_BC1_RGBA_SRGB_BLOCK";
  case VK_FORMAT_BC2_UNORM_BLOCK:
    return "VK_FORMAT_BC2_UNORM_BLOCK";
  case VK_FORMAT_BC2_SRGB_BLOCK:
    return "VK_FORMAT_BC2_SRGB_BLOCK";
  case VK_FORMAT_BC3_UNORM_BLOCK:
    return "VK_FORMAT_BC3_UNORM_BLOCK";
  case VK_FORMAT_BC3_SRGB_BLOCK:
    return "VK_FORMAT_BC3_SRGB_BLOCK";
  case VK_FORMAT_BC4_UNORM_BLOCK:
    return "VK_FORMAT_BC4_UNORM_BLOCK";
  case VK_FORMAT_BC4_SNORM_BLOCK:
    return "VK_FORMAT_BC4_SNORM_BLOCK";
  case VK_FORMAT_BC5_UNORM_BLOCK:
    return "VK_FORMAT_BC5_UNORM_BLOCK";
  case VK_FORMAT_BC5_SNORM_BLOCK:
    return "VK_FORMAT_BC5_SNORM_BLOCK";
  case VK_FORMAT_BC6H_UFLOAT_BLOCK:
    return "VK_FORMAT_BC6H_UFLOAT_BLOCK";
  case VK_FORMAT_BC6H_SFLOAT_BLOCK:
    return "VK_FORMAT_BC6H_SFLOAT_BLOCK";
  case VK_FORMAT_BC7_UNORM_BLOCK:
    return "VK_FORMAT_BC7_UNORM_BLOCK";
  case VK_FORMAT_BC7_SRGB_BLOCK:
    return "VK_FORMAT_BC7_SRGB_BLOCK";
  case VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK:
    return "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK";
  case VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK:
    return "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK";
  case VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK:
    return "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK";
  case VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK:
    return "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK";
  case VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK:
    return "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK";
  case VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK:
    return "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK";
  case VK_FORMAT_EAC_R11_UNORM_BLOCK:
    return "VK_FORMAT_EAC_R11_UNORM_BLOCK";
  case VK_FORMAT_EAC_R11_SNORM_BLOCK:
    return "VK_FORMAT_EAC_R11_SNORM_BLOCK";
  case VK_FORMAT_EAC_R11G11_UNORM_BLOCK:
    return "VK_FORMAT_EAC_R11G11_UNORM_BLOCK";
  case VK_FORMAT_EAC_R11G11_SNORM_BLOCK:
    return "VK_FORMAT_EAC_R11G11_SNORM_BLOCK";
  case VK_FORMAT_ASTC_4x4_UNORM_BLOCK:
    return "VK_FORMAT_ASTC_4x4_UNORM_BLOCK";
  case VK_FORMAT_ASTC_4x4_SRGB_BLOCK:
    return "VK_FORMAT_ASTC_4x4_SRGB_BLOCK";
  case VK_FORMAT_ASTC_5x4_UNORM_BLOCK:
    return "VK_FORMAT_ASTC_5x4_UNORM_BLOCK";
  case VK_FORMAT_ASTC_5x4_SRGB_BLOCK:
    return "VK_FORMAT_ASTC_5x4_SRGB_BLOCK";
  case VK_FORMAT_ASTC_5x5_UNORM_BLOCK:
    return "VK_FORMAT_ASTC_5x5_UNORM_BLOCK";
  case VK_FORMAT_ASTC_5x5_SRGB_BLOCK:
    return "VK_FORMAT_ASTC_5x5_SRGB_BLOCK";
  case VK_FORMAT_ASTC_6x5_UNORM_BLOCK:
    return "VK_FORMAT_ASTC_6x5_UNORM_BLOCK";
  case VK_FORMAT_ASTC_6x5_SRGB_BLOCK:
    return "VK_FORMAT_ASTC_6x5_SRGB_BLOCK";
  case VK_FORMAT_ASTC_6x6_UNORM_BLOCK:
    return "VK_FORMAT_ASTC_6x6_UNORM_BLOCK";
  case VK_FORMAT_ASTC_6x6_SRGB_BLOCK:
    return "VK_FORMAT_ASTC_6x6_SRGB_BLOCK";
  case VK_FORMAT_ASTC_8x5_UNORM_BLOCK:
    return "VK_FORMAT_ASTC_8x5_UNORM_BLOCK";
  case VK_FORMAT_ASTC_8x5_SRGB_BLOCK:
    return "VK_FORMAT_ASTC_8x5_SRGB_BLOCK";
  case VK_FORMAT_ASTC_8x6_UNORM_BLOCK:
    return "VK_FORMAT_ASTC_8x6_UNORM_BLOCK";
  case VK_FORMAT_ASTC_8x6_SRGB_BLOCK:
    return "VK_FORMAT_ASTC_8x6_SRGB_BLOCK";
  case VK_FORMAT_ASTC_8x8_UNORM_BLOCK:
    return "VK_FORMAT_ASTC_8x8_UNORM_BLOCK";
  case VK_FORMAT_ASTC_8x8_SRGB_BLOCK:
    return "VK_FORMAT_ASTC_8x8_SRGB_BLOCK";
  case VK_FORMAT_ASTC_10x5_UNORM_BLOCK:
    return "VK_FORMAT_ASTC_10x5_UNORM_BLOCK";
  case VK_FORMAT_ASTC_10x5_SRGB_BLOCK:
    return "VK_FORMAT_ASTC_10x5_SRGB_BLOCK";
  case VK_FORMAT_ASTC_10x6_UNORM_BLOCK:
    return "VK_FORMAT_ASTC_10x6_UNORM_BLOCK";
  case VK_FORMAT_ASTC_10x6_SRGB_BLOCK:
    return "VK_FORMAT_ASTC_10x6_SRGB_BLOCK";
  case VK_FORMAT_ASTC_10x8_UNORM_BLOCK:
    return "VK_FORMAT_ASTC_10x8_UNORM_BLOCK";
  case VK_FORMAT_ASTC_10x8_SRGB_BLOCK:
    return "VK_FORMAT_ASTC_10x8_SRGB_BLOCK";
  case VK_FORMAT_ASTC_10x10_UNORM_BLOCK:
    return "VK_FORMAT_ASTC_10x10_UNORM_BLOCK";
  case VK_FORMAT_ASTC_10x10_SRGB_BLOCK:
    return "VK_FORMAT_ASTC_10x10_SRGB_BLOCK";
  case VK_FORMAT_ASTC_12x10_UNORM_BLOCK:
    return "VK_FORMAT_ASTC_12x10_UNORM_BLOCK";
  case VK_FORMAT_ASTC_12x10_SRGB_BLOCK:
    return "VK_FORMAT_ASTC_12x10_SRGB_BLOCK";
  case VK_FORMAT_ASTC_12x12_UNORM_BLOCK:
    return "VK_FORMAT_ASTC_12x12_UNORM_BLOCK";
  case VK_FORMAT_ASTC_12x12_SRGB_BLOCK:
    return "VK_FORMAT_ASTC_12x12_SRGB_BLOCK";
  case VK_FORMAT_G8B8G8R8_422_UNORM:
    return "VK_FORMAT_G8B8G8R8_422_UNORM";
  case VK_FORMAT_B8G8R8G8_422_UNORM:
    return "VK_FORMAT_B8G8R8G8_422_UNORM";
  case VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM:
    return "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM";
  case VK_FORMAT_G8_B8R8_2PLANE_420_UNORM:
    return "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM";
  case VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM:
    return "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM";
  case VK_FORMAT_G8_B8R8_2PLANE_422_UNORM:
    return "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM";
  case VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM:
    return "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM";
  case VK_FORMAT_R10X6_UNORM_PACK16:
    return "VK_FORMAT_R10X6_UNORM_PACK16";
  case VK_FORMAT_R10X6G10X6_UNORM_2PACK16:
    return "VK_FORMAT_R10X6G10X6_UNORM_2PACK16";
  case VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16:
    return "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16";
  case VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16:
    return "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16";
  case VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16:
    return "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16";
  case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16:
    return "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16";
  case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16:
    return "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16";
  case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16:
    return "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16";
  case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16:
    return "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16";
  case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16:
    return "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16";
  case VK_FORMAT_R12X4_UNORM_PACK16:
    return "VK_FORMAT_R12X4_UNORM_PACK16";
  case VK_FORMAT_R12X4G12X4_UNORM_2PACK16:
    return "VK_FORMAT_R12X4G12X4_UNORM_2PACK16";
  case VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16:
    return "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16";
  case VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16:
    return "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16";
  case VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16:
    return "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16";
  case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16:
    return "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16";
  case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16:
    return "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16";
  case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16:
    return "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16";
  case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16:
    return "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16";
  case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16:
    return "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16";
  case VK_FORMAT_G16B16G16R16_422_UNORM:
    return "VK_FORMAT_G16B16G16R16_422_UNORM";
  case VK_FORMAT_B16G16R16G16_422_UNORM:
    return "VK_FORMAT_B16G16R16G16_422_UNORM";
  case VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM:
    return "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM";
  case VK_FORMAT_G16_B16R16_2PLANE_420_UNORM:
    return "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM";
  case VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM:
    return "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM";
  case VK_FORMAT_G16_B16R16_2PLANE_422_UNORM:
    return "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM";
  case VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM:
    return "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM";
  case VK_FORMAT_G8_B8R8_2PLANE_444_UNORM:
    return "VK_FORMAT_G8_B8R8_2PLANE_444_UNORM";
  case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16:
    return "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16";
  case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16:
    return "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16";
  case VK_FORMAT_G16_B16R16_2PLANE_444_UNORM:
    return "VK_FORMAT_G16_B16R16_2PLANE_444_UNORM";
  case VK_FORMAT_A4R4G4B4_UNORM_PACK16:
    return "VK_FORMAT_A4R4G4B4_UNORM_PACK16";
  case VK_FORMAT_A4B4G4R4_UNORM_PACK16:
    return "VK_FORMAT_A4B4G4R4_UNORM_PACK16";
  case VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK:
    return "VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK";
  case VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK:
    return "VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK";
  case VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK:
    return "VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK";
  case VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK:
    return "VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK";
  case VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK:
    return "VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK";
  case VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK:
    return "VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK";
  case VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK:
    return "VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK";
  case VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK:
    return "VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK";
  case VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK:
    return "VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK";
  case VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK:
    return "VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK";
  case VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK:
    return "VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK";
  case VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK:
    return "VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK";
  case VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK:
    return "VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK";
  case VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK:
    return "VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK";
  case VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG:
    return "VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG";
  case VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG:
    return "VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG";
  case VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG:
    return "VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG";
  case VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG:
    return "VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG";
  case VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG:
    return "VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG";
  case VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG:
    return "VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG";
  case VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG:
    return "VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG";
  case VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG:
    return "VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG";
  case VK_FORMAT_R16G16_S10_5_NV:
    return "VK_FORMAT_R16G16_S10_5_NV";
  default: return "Unknown VkFormat";
  }
}

const char *VkImageTilingToString(VkImageTiling e) {
  switch (e) {
  case VK_IMAGE_TILING_OPTIMAL:
    return "VK_IMAGE_TILING_OPTIMAL";
  case VK_IMAGE_TILING_LINEAR:
    return "VK_IMAGE_TILING_LINEAR";
  case VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT:
    return "VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT";
  default: return "Unknown VkImageTiling";
  }
}

const char *VkImageTypeToString(VkImageType e) {
  switch (e) {
  case VK_IMAGE_TYPE_1D:
    return "VK_IMAGE_TYPE_1D";
  case VK_IMAGE_TYPE_2D:
    return "VK_IMAGE_TYPE_2D";
  case VK_IMAGE_TYPE_3D:
    return "VK_IMAGE_TYPE_3D";
  default: return "Unknown VkImageType";
  }
}

const char *VkPhysicalDeviceTypeToString(VkPhysicalDeviceType e) {
  switch (e) {
  case VK_PHYSICAL_DEVICE_TYPE_OTHER:
    return "VK_PHYSICAL_DEVICE_TYPE_OTHER";
  case VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU:
    return "VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU";
  case VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU:
    return "VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU";
  case VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU:
    return "VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU";
  case VK_PHYSICAL_DEVICE_TYPE_CPU:
    return "VK_PHYSICAL_DEVICE_TYPE_CPU";
  default: return "Unknown VkPhysicalDeviceType";
  }
}

const char *VkQueryTypeToString(VkQueryType e) {
  switch (e) {
  case VK_QUERY_TYPE_OCCLUSION:
    return "VK_QUERY_TYPE_OCCLUSION";
  case VK_QUERY_TYPE_PIPELINE_STATISTICS:
    return "VK_QUERY_TYPE_PIPELINE_STATISTICS";
  case VK_QUERY_TYPE_TIMESTAMP:
    return "VK_QUERY_TYPE_TIMESTAMP";
  case VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR:
    return "VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR";
  case VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT:
    return "VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT";
  case VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR:
    return "VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR";
  case VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR:
    return "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR";
  case VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR:
    return "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR";
  case VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV:
    return "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV";
  case VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL:
    return "VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL";
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR:
    return "VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR";
#endif //VK_ENABLE_BETA_EXTENSIONS
  case VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT:
    return "VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT";
  case VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT:
    return "VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT";
  case VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR:
    return "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR";
  case VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR:
    return "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR";
  case VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT:
    return "VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT";
  case VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT:
    return "VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT";
  default: return "Unknown VkQueryType";
  }
}

const char *VkSharingModeToString(VkSharingMode e) {
  switch (e) {
  case VK_SHARING_MODE_EXCLUSIVE:
    return "VK_SHARING_MODE_EXCLUSIVE";
  case VK_SHARING_MODE_CONCURRENT:
    return "VK_SHARING_MODE_CONCURRENT";
  default: return "Unknown VkSharingMode";
  }
}

const char *VkComponentSwizzleToString(VkComponentSwizzle e) {
  switch (e) {
  case VK_COMPONENT_SWIZZLE_IDENTITY:
    return "VK_COMPONENT_SWIZZLE_IDENTITY";
  case VK_COMPONENT_SWIZZLE_ZERO:
    return "VK_COMPONENT_SWIZZLE_ZERO";
  case VK_COMPONENT_SWIZZLE_ONE:
    return "VK_COMPONENT_SWIZZLE_ONE";
  case VK_COMPONENT_SWIZZLE_R:
    return "VK_COMPONENT_SWIZZLE_R";
  case VK_COMPONENT_SWIZZLE_G:
    return "VK_COMPONENT_SWIZZLE_G";
  case VK_COMPONENT_SWIZZLE_B:
    return "VK_COMPONENT_SWIZZLE_B";
  case VK_COMPONENT_SWIZZLE_A:
    return "VK_COMPONENT_SWIZZLE_A";
  default: return "Unknown VkComponentSwizzle";
  }
}

const char *VkImageViewTypeToString(VkImageViewType e) {
  switch (e) {
  case VK_IMAGE_VIEW_TYPE_1D:
    return "VK_IMAGE_VIEW_TYPE_1D";
  case VK_IMAGE_VIEW_TYPE_2D:
    return "VK_IMAGE_VIEW_TYPE_2D";
  case VK_IMAGE_VIEW_TYPE_3D:
    return "VK_IMAGE_VIEW_TYPE_3D";
  case VK_IMAGE_VIEW_TYPE_CUBE:
    return "VK_IMAGE_VIEW_TYPE_CUBE";
  case VK_IMAGE_VIEW_TYPE_1D_ARRAY:
    return "VK_IMAGE_VIEW_TYPE_1D_ARRAY";
  case VK_IMAGE_VIEW_TYPE_2D_ARRAY:
    return "VK_IMAGE_VIEW_TYPE_2D_ARRAY";
  case VK_IMAGE_VIEW_TYPE_CUBE_ARRAY:
    return "VK_IMAGE_VIEW_TYPE_CUBE_ARRAY";
  default: return "Unknown VkImageViewType";
  }
}

const char *VkBlendFactorToString(VkBlendFactor e) {
  switch (e) {
  case VK_BLEND_FACTOR_ZERO:
    return "VK_BLEND_FACTOR_ZERO";
  case VK_BLEND_FACTOR_ONE:
    return "VK_BLEND_FACTOR_ONE";
  case VK_BLEND_FACTOR_SRC_COLOR:
    return "VK_BLEND_FACTOR_SRC_COLOR";
  case VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR:
    return "VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR";
  case VK_BLEND_FACTOR_DST_COLOR:
    return "VK_BLEND_FACTOR_DST_COLOR";
  case VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR:
    return "VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR";
  case VK_BLEND_FACTOR_SRC_ALPHA:
    return "VK_BLEND_FACTOR_SRC_ALPHA";
  case VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA:
    return "VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA";
  case VK_BLEND_FACTOR_DST_ALPHA:
    return "VK_BLEND_FACTOR_DST_ALPHA";
  case VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA:
    return "VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA";
  case VK_BLEND_FACTOR_CONSTANT_COLOR:
    return "VK_BLEND_FACTOR_CONSTANT_COLOR";
  case VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR:
    return "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR";
  case VK_BLEND_FACTOR_CONSTANT_ALPHA:
    return "VK_BLEND_FACTOR_CONSTANT_ALPHA";
  case VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA:
    return "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA";
  case VK_BLEND_FACTOR_SRC_ALPHA_SATURATE:
    return "VK_BLEND_FACTOR_SRC_ALPHA_SATURATE";
  case VK_BLEND_FACTOR_SRC1_COLOR:
    return "VK_BLEND_FACTOR_SRC1_COLOR";
  case VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR:
    return "VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR";
  case VK_BLEND_FACTOR_SRC1_ALPHA:
    return "VK_BLEND_FACTOR_SRC1_ALPHA";
  case VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA:
    return "VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA";
  default: return "Unknown VkBlendFactor";
  }
}

const char *VkBlendOpToString(VkBlendOp e) {
  switch (e) {
  case VK_BLEND_OP_ADD:
    return "VK_BLEND_OP_ADD";
  case VK_BLEND_OP_SUBTRACT:
    return "VK_BLEND_OP_SUBTRACT";
  case VK_BLEND_OP_REVERSE_SUBTRACT:
    return "VK_BLEND_OP_REVERSE_SUBTRACT";
  case VK_BLEND_OP_MIN:
    return "VK_BLEND_OP_MIN";
  case VK_BLEND_OP_MAX:
    return "VK_BLEND_OP_MAX";
  case VK_BLEND_OP_ZERO_EXT:
    return "VK_BLEND_OP_ZERO_EXT";
  case VK_BLEND_OP_SRC_EXT:
    return "VK_BLEND_OP_SRC_EXT";
  case VK_BLEND_OP_DST_EXT:
    return "VK_BLEND_OP_DST_EXT";
  case VK_BLEND_OP_SRC_OVER_EXT:
    return "VK_BLEND_OP_SRC_OVER_EXT";
  case VK_BLEND_OP_DST_OVER_EXT:
    return "VK_BLEND_OP_DST_OVER_EXT";
  case VK_BLEND_OP_SRC_IN_EXT:
    return "VK_BLEND_OP_SRC_IN_EXT";
  case VK_BLEND_OP_DST_IN_EXT:
    return "VK_BLEND_OP_DST_IN_EXT";
  case VK_BLEND_OP_SRC_OUT_EXT:
    return "VK_BLEND_OP_SRC_OUT_EXT";
  case VK_BLEND_OP_DST_OUT_EXT:
    return "VK_BLEND_OP_DST_OUT_EXT";
  case VK_BLEND_OP_SRC_ATOP_EXT:
    return "VK_BLEND_OP_SRC_ATOP_EXT";
  case VK_BLEND_OP_DST_ATOP_EXT:
    return "VK_BLEND_OP_DST_ATOP_EXT";
  case VK_BLEND_OP_XOR_EXT:
    return "VK_BLEND_OP_XOR_EXT";
  case VK_BLEND_OP_MULTIPLY_EXT:
    return "VK_BLEND_OP_MULTIPLY_EXT";
  case VK_BLEND_OP_SCREEN_EXT:
    return "VK_BLEND_OP_SCREEN_EXT";
  case VK_BLEND_OP_OVERLAY_EXT:
    return "VK_BLEND_OP_OVERLAY_EXT";
  case VK_BLEND_OP_DARKEN_EXT:
    return "VK_BLEND_OP_DARKEN_EXT";
  case VK_BLEND_OP_LIGHTEN_EXT:
    return "VK_BLEND_OP_LIGHTEN_EXT";
  case VK_BLEND_OP_COLORDODGE_EXT:
    return "VK_BLEND_OP_COLORDODGE_EXT";
  case VK_BLEND_OP_COLORBURN_EXT:
    return "VK_BLEND_OP_COLORBURN_EXT";
  case VK_BLEND_OP_HARDLIGHT_EXT:
    return "VK_BLEND_OP_HARDLIGHT_EXT";
  case VK_BLEND_OP_SOFTLIGHT_EXT:
    return "VK_BLEND_OP_SOFTLIGHT_EXT";
  case VK_BLEND_OP_DIFFERENCE_EXT:
    return "VK_BLEND_OP_DIFFERENCE_EXT";
  case VK_BLEND_OP_EXCLUSION_EXT:
    return "VK_BLEND_OP_EXCLUSION_EXT";
  case VK_BLEND_OP_INVERT_EXT:
    return "VK_BLEND_OP_INVERT_EXT";
  case VK_BLEND_OP_INVERT_RGB_EXT:
    return "VK_BLEND_OP_INVERT_RGB_EXT";
  case VK_BLEND_OP_LINEARDODGE_EXT:
    return "VK_BLEND_OP_LINEARDODGE_EXT";
  case VK_BLEND_OP_LINEARBURN_EXT:
    return "VK_BLEND_OP_LINEARBURN_EXT";
  case VK_BLEND_OP_VIVIDLIGHT_EXT:
    return "VK_BLEND_OP_VIVIDLIGHT_EXT";
  case VK_BLEND_OP_LINEARLIGHT_EXT:
    return "VK_BLEND_OP_LINEARLIGHT_EXT";
  case VK_BLEND_OP_PINLIGHT_EXT:
    return "VK_BLEND_OP_PINLIGHT_EXT";
  case VK_BLEND_OP_HARDMIX_EXT:
    return "VK_BLEND_OP_HARDMIX_EXT";
  case VK_BLEND_OP_HSL_HUE_EXT:
    return "VK_BLEND_OP_HSL_HUE_EXT";
  case VK_BLEND_OP_HSL_SATURATION_EXT:
    return "VK_BLEND_OP_HSL_SATURATION_EXT";
  case VK_BLEND_OP_HSL_COLOR_EXT:
    return "VK_BLEND_OP_HSL_COLOR_EXT";
  case VK_BLEND_OP_HSL_LUMINOSITY_EXT:
    return "VK_BLEND_OP_HSL_LUMINOSITY_EXT";
  case VK_BLEND_OP_PLUS_EXT:
    return "VK_BLEND_OP_PLUS_EXT";
  case VK_BLEND_OP_PLUS_CLAMPED_EXT:
    return "VK_BLEND_OP_PLUS_CLAMPED_EXT";
  case VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT:
    return "VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT";
  case VK_BLEND_OP_PLUS_DARKER_EXT:
    return "VK_BLEND_OP_PLUS_DARKER_EXT";
  case VK_BLEND_OP_MINUS_EXT:
    return "VK_BLEND_OP_MINUS_EXT";
  case VK_BLEND_OP_MINUS_CLAMPED_EXT:
    return "VK_BLEND_OP_MINUS_CLAMPED_EXT";
  case VK_BLEND_OP_CONTRAST_EXT:
    return "VK_BLEND_OP_CONTRAST_EXT";
  case VK_BLEND_OP_INVERT_OVG_EXT:
    return "VK_BLEND_OP_INVERT_OVG_EXT";
  case VK_BLEND_OP_RED_EXT:
    return "VK_BLEND_OP_RED_EXT";
  case VK_BLEND_OP_GREEN_EXT:
    return "VK_BLEND_OP_GREEN_EXT";
  case VK_BLEND_OP_BLUE_EXT:
    return "VK_BLEND_OP_BLUE_EXT";
  default: return "Unknown VkBlendOp";
  }
}

const char *VkCompareOpToString(VkCompareOp e) {
  switch (e) {
  case VK_COMPARE_OP_NEVER:
    return "VK_COMPARE_OP_NEVER";
  case VK_COMPARE_OP_LESS:
    return "VK_COMPARE_OP_LESS";
  case VK_COMPARE_OP_EQUAL:
    return "VK_COMPARE_OP_EQUAL";
  case VK_COMPARE_OP_LESS_OR_EQUAL:
    return "VK_COMPARE_OP_LESS_OR_EQUAL";
  case VK_COMPARE_OP_GREATER:
    return "VK_COMPARE_OP_GREATER";
  case VK_COMPARE_OP_NOT_EQUAL:
    return "VK_COMPARE_OP_NOT_EQUAL";
  case VK_COMPARE_OP_GREATER_OR_EQUAL:
    return "VK_COMPARE_OP_GREATER_OR_EQUAL";
  case VK_COMPARE_OP_ALWAYS:
    return "VK_COMPARE_OP_ALWAYS";
  default: return "Unknown VkCompareOp";
  }
}

const char *VkDynamicStateToString(VkDynamicState e) {
  switch (e) {
  case VK_DYNAMIC_STATE_VIEWPORT:
    return "VK_DYNAMIC_STATE_VIEWPORT";
  case VK_DYNAMIC_STATE_SCISSOR:
    return "VK_DYNAMIC_STATE_SCISSOR";
  case VK_DYNAMIC_STATE_LINE_WIDTH:
    return "VK_DYNAMIC_STATE_LINE_WIDTH";
  case VK_DYNAMIC_STATE_DEPTH_BIAS:
    return "VK_DYNAMIC_STATE_DEPTH_BIAS";
  case VK_DYNAMIC_STATE_BLEND_CONSTANTS:
    return "VK_DYNAMIC_STATE_BLEND_CONSTANTS";
  case VK_DYNAMIC_STATE_DEPTH_BOUNDS:
    return "VK_DYNAMIC_STATE_DEPTH_BOUNDS";
  case VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK:
    return "VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK";
  case VK_DYNAMIC_STATE_STENCIL_WRITE_MASK:
    return "VK_DYNAMIC_STATE_STENCIL_WRITE_MASK";
  case VK_DYNAMIC_STATE_STENCIL_REFERENCE:
    return "VK_DYNAMIC_STATE_STENCIL_REFERENCE";
  case VK_DYNAMIC_STATE_CULL_MODE:
    return "VK_DYNAMIC_STATE_CULL_MODE";
  case VK_DYNAMIC_STATE_FRONT_FACE:
    return "VK_DYNAMIC_STATE_FRONT_FACE";
  case VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY:
    return "VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY";
  case VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT:
    return "VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT";
  case VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT:
    return "VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT";
  case VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE:
    return "VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE";
  case VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE:
    return "VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE";
  case VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE:
    return "VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE";
  case VK_DYNAMIC_STATE_DEPTH_COMPARE_OP:
    return "VK_DYNAMIC_STATE_DEPTH_COMPARE_OP";
  case VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE:
    return "VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE";
  case VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE:
    return "VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE";
  case VK_DYNAMIC_STATE_STENCIL_OP:
    return "VK_DYNAMIC_STATE_STENCIL_OP";
  case VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE:
    return "VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE";
  case VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE:
    return "VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE";
  case VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE:
    return "VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE";
  case VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV:
    return "VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV";
  case VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT:
    return "VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT";
  case VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT:
    return "VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT";
  case VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT:
    return "VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT";
  case VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT:
    return "VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT";
  case VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR:
    return "VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR";
  case VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV:
    return "VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV";
  case VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV:
    return "VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV";
  case VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV:
    return "VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV";
  case VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV:
    return "VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV";
  case VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR:
    return "VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR";
  case VK_DYNAMIC_STATE_LINE_STIPPLE_EXT:
    return "VK_DYNAMIC_STATE_LINE_STIPPLE_EXT";
  case VK_DYNAMIC_STATE_VERTEX_INPUT_EXT:
    return "VK_DYNAMIC_STATE_VERTEX_INPUT_EXT";
  case VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT:
    return "VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT";
  case VK_DYNAMIC_STATE_LOGIC_OP_EXT:
    return "VK_DYNAMIC_STATE_LOGIC_OP_EXT";
  case VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT:
    return "VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT";
  case VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT:
    return "VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT";
  case VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT:
    return "VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT";
  case VK_DYNAMIC_STATE_POLYGON_MODE_EXT:
    return "VK_DYNAMIC_STATE_POLYGON_MODE_EXT";
  case VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT:
    return "VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT";
  case VK_DYNAMIC_STATE_SAMPLE_MASK_EXT:
    return "VK_DYNAMIC_STATE_SAMPLE_MASK_EXT";
  case VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT:
    return "VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT";
  case VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT:
    return "VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT";
  case VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT:
    return "VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT";
  case VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT:
    return "VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT";
  case VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT:
    return "VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT";
  case VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT:
    return "VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT";
  case VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT:
    return "VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT";
  case VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT:
    return "VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT";
  case VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT:
    return "VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT";
  case VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT:
    return "VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT";
  case VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT:
    return "VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT";
  case VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT:
    return "VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT";
  case VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT:
    return "VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT";
  case VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT:
    return "VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT";
  case VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT:
    return "VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT";
  case VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT:
    return "VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT";
  case VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV:
    return "VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV";
  case VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV:
    return "VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV";
  case VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV:
    return "VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV";
  case VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV:
    return "VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV";
  case VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV:
    return "VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV";
  case VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV:
    return "VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV";
  case VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV:
    return "VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV";
  case VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV:
    return "VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV";
  case VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV:
    return "VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV";
  case VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV:
    return "VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV";
  case VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT:
    return "VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT";
  default: return "Unknown VkDynamicState";
  }
}

const char *VkFrontFaceToString(VkFrontFace e) {
  switch (e) {
  case VK_FRONT_FACE_COUNTER_CLOCKWISE:
    return "VK_FRONT_FACE_COUNTER_CLOCKWISE";
  case VK_FRONT_FACE_CLOCKWISE:
    return "VK_FRONT_FACE_CLOCKWISE";
  default: return "Unknown VkFrontFace";
  }
}

const char *VkVertexInputRateToString(VkVertexInputRate e) {
  switch (e) {
  case VK_VERTEX_INPUT_RATE_VERTEX:
    return "VK_VERTEX_INPUT_RATE_VERTEX";
  case VK_VERTEX_INPUT_RATE_INSTANCE:
    return "VK_VERTEX_INPUT_RATE_INSTANCE";
  default: return "Unknown VkVertexInputRate";
  }
}

const char *VkPrimitiveTopologyToString(VkPrimitiveTopology e) {
  switch (e) {
  case VK_PRIMITIVE_TOPOLOGY_POINT_LIST:
    return "VK_PRIMITIVE_TOPOLOGY_POINT_LIST";
  case VK_PRIMITIVE_TOPOLOGY_LINE_LIST:
    return "VK_PRIMITIVE_TOPOLOGY_LINE_LIST";
  case VK_PRIMITIVE_TOPOLOGY_LINE_STRIP:
    return "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP";
  case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST:
    return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST";
  case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP:
    return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP";
  case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN:
    return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN";
  case VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY:
    return "VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY";
  case VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY:
    return "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY";
  case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY:
    return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY";
  case VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY:
    return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY";
  case VK_PRIMITIVE_TOPOLOGY_PATCH_LIST:
    return "VK_PRIMITIVE_TOPOLOGY_PATCH_LIST";
  default: return "Unknown VkPrimitiveTopology";
  }
}

const char *VkPolygonModeToString(VkPolygonMode e) {
  switch (e) {
  case VK_POLYGON_MODE_FILL:
    return "VK_POLYGON_MODE_FILL";
  case VK_POLYGON_MODE_LINE:
    return "VK_POLYGON_MODE_LINE";
  case VK_POLYGON_MODE_POINT:
    return "VK_POLYGON_MODE_POINT";
  case VK_POLYGON_MODE_FILL_RECTANGLE_NV:
    return "VK_POLYGON_MODE_FILL_RECTANGLE_NV";
  default: return "Unknown VkPolygonMode";
  }
}

const char *VkStencilOpToString(VkStencilOp e) {
  switch (e) {
  case VK_STENCIL_OP_KEEP:
    return "VK_STENCIL_OP_KEEP";
  case VK_STENCIL_OP_ZERO:
    return "VK_STENCIL_OP_ZERO";
  case VK_STENCIL_OP_REPLACE:
    return "VK_STENCIL_OP_REPLACE";
  case VK_STENCIL_OP_INCREMENT_AND_CLAMP:
    return "VK_STENCIL_OP_INCREMENT_AND_CLAMP";
  case VK_STENCIL_OP_DECREMENT_AND_CLAMP:
    return "VK_STENCIL_OP_DECREMENT_AND_CLAMP";
  case VK_STENCIL_OP_INVERT:
    return "VK_STENCIL_OP_INVERT";
  case VK_STENCIL_OP_INCREMENT_AND_WRAP:
    return "VK_STENCIL_OP_INCREMENT_AND_WRAP";
  case VK_STENCIL_OP_DECREMENT_AND_WRAP:
    return "VK_STENCIL_OP_DECREMENT_AND_WRAP";
  default: return "Unknown VkStencilOp";
  }
}

const char *VkLogicOpToString(VkLogicOp e) {
  switch (e) {
  case VK_LOGIC_OP_CLEAR:
    return "VK_LOGIC_OP_CLEAR";
  case VK_LOGIC_OP_AND:
    return "VK_LOGIC_OP_AND";
  case VK_LOGIC_OP_AND_REVERSE:
    return "VK_LOGIC_OP_AND_REVERSE";
  case VK_LOGIC_OP_COPY:
    return "VK_LOGIC_OP_COPY";
  case VK_LOGIC_OP_AND_INVERTED:
    return "VK_LOGIC_OP_AND_INVERTED";
  case VK_LOGIC_OP_NO_OP:
    return "VK_LOGIC_OP_NO_OP";
  case VK_LOGIC_OP_XOR:
    return "VK_LOGIC_OP_XOR";
  case VK_LOGIC_OP_OR:
    return "VK_LOGIC_OP_OR";
  case VK_LOGIC_OP_NOR:
    return "VK_LOGIC_OP_NOR";
  case VK_LOGIC_OP_EQUIVALENT:
    return "VK_LOGIC_OP_EQUIVALENT";
  case VK_LOGIC_OP_INVERT:
    return "VK_LOGIC_OP_INVERT";
  case VK_LOGIC_OP_OR_REVERSE:
    return "VK_LOGIC_OP_OR_REVERSE";
  case VK_LOGIC_OP_COPY_INVERTED:
    return "VK_LOGIC_OP_COPY_INVERTED";
  case VK_LOGIC_OP_OR_INVERTED:
    return "VK_LOGIC_OP_OR_INVERTED";
  case VK_LOGIC_OP_NAND:
    return "VK_LOGIC_OP_NAND";
  case VK_LOGIC_OP_SET:
    return "VK_LOGIC_OP_SET";
  default: return "Unknown VkLogicOp";
  }
}

const char *VkBorderColorToString(VkBorderColor e) {
  switch (e) {
  case VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK:
    return "VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK";
  case VK_BORDER_COLOR_INT_TRANSPARENT_BLACK:
    return "VK_BORDER_COLOR_INT_TRANSPARENT_BLACK";
  case VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK:
    return "VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK";
  case VK_BORDER_COLOR_INT_OPAQUE_BLACK:
    return "VK_BORDER_COLOR_INT_OPAQUE_BLACK";
  case VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE:
    return "VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE";
  case VK_BORDER_COLOR_INT_OPAQUE_WHITE:
    return "VK_BORDER_COLOR_INT_OPAQUE_WHITE";
  case VK_BORDER_COLOR_FLOAT_CUSTOM_EXT:
    return "VK_BORDER_COLOR_FLOAT_CUSTOM_EXT";
  case VK_BORDER_COLOR_INT_CUSTOM_EXT:
    return "VK_BORDER_COLOR_INT_CUSTOM_EXT";
  default: return "Unknown VkBorderColor";
  }
}

const char *VkFilterToString(VkFilter e) {
  switch (e) {
  case VK_FILTER_NEAREST:
    return "VK_FILTER_NEAREST";
  case VK_FILTER_LINEAR:
    return "VK_FILTER_LINEAR";
  case VK_FILTER_CUBIC_EXT:
    return "VK_FILTER_CUBIC_EXT";
  default: return "Unknown VkFilter";
  }
}

const char *VkSamplerAddressModeToString(VkSamplerAddressMode e) {
  switch (e) {
  case VK_SAMPLER_ADDRESS_MODE_REPEAT:
    return "VK_SAMPLER_ADDRESS_MODE_REPEAT";
  case VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT:
    return "VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT";
  case VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE:
    return "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE";
  case VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER:
    return "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER";
  case VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE:
    return "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE";
  default: return "Unknown VkSamplerAddressMode";
  }
}

const char *VkSamplerMipmapModeToString(VkSamplerMipmapMode e) {
  switch (e) {
  case VK_SAMPLER_MIPMAP_MODE_NEAREST:
    return "VK_SAMPLER_MIPMAP_MODE_NEAREST";
  case VK_SAMPLER_MIPMAP_MODE_LINEAR:
    return "VK_SAMPLER_MIPMAP_MODE_LINEAR";
  default: return "Unknown VkSamplerMipmapMode";
  }
}

const char *VkDescriptorTypeToString(VkDescriptorType e) {
  switch (e) {
  case VK_DESCRIPTOR_TYPE_SAMPLER:
    return "VK_DESCRIPTOR_TYPE_SAMPLER";
  case VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER:
    return "VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER";
  case VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE:
    return "VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE";
  case VK_DESCRIPTOR_TYPE_STORAGE_IMAGE:
    return "VK_DESCRIPTOR_TYPE_STORAGE_IMAGE";
  case VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER:
    return "VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER";
  case VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER:
    return "VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER";
  case VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER:
    return "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER";
  case VK_DESCRIPTOR_TYPE_STORAGE_BUFFER:
    return "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER";
  case VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC:
    return "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC";
  case VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC:
    return "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC";
  case VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT:
    return "VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT";
  case VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK:
    return "VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK";
  case VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR:
    return "VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR";
  case VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV:
    return "VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV";
  case VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM:
    return "VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM";
  case VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM:
    return "VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM";
  case VK_DESCRIPTOR_TYPE_MUTABLE_EXT:
    return "VK_DESCRIPTOR_TYPE_MUTABLE_EXT";
  default: return "Unknown VkDescriptorType";
  }
}

const char *VkAttachmentLoadOpToString(VkAttachmentLoadOp e) {
  switch (e) {
  case VK_ATTACHMENT_LOAD_OP_LOAD:
    return "VK_ATTACHMENT_LOAD_OP_LOAD";
  case VK_ATTACHMENT_LOAD_OP_CLEAR:
    return "VK_ATTACHMENT_LOAD_OP_CLEAR";
  case VK_ATTACHMENT_LOAD_OP_DONT_CARE:
    return "VK_ATTACHMENT_LOAD_OP_DONT_CARE";
  case VK_ATTACHMENT_LOAD_OP_NONE_EXT:
    return "VK_ATTACHMENT_LOAD_OP_NONE_EXT";
  default: return "Unknown VkAttachmentLoadOp";
  }
}

const char *VkAttachmentStoreOpToString(VkAttachmentStoreOp e) {
  switch (e) {
  case VK_ATTACHMENT_STORE_OP_STORE:
    return "VK_ATTACHMENT_STORE_OP_STORE";
  case VK_ATTACHMENT_STORE_OP_DONT_CARE:
    return "VK_ATTACHMENT_STORE_OP_DONT_CARE";
  case VK_ATTACHMENT_STORE_OP_NONE:
    return "VK_ATTACHMENT_STORE_OP_NONE";
  default: return "Unknown VkAttachmentStoreOp";
  }
}

const char *VkPipelineBindPointToString(VkPipelineBindPoint e) {
  switch (e) {
  case VK_PIPELINE_BIND_POINT_GRAPHICS:
    return "VK_PIPELINE_BIND_POINT_GRAPHICS";
  case VK_PIPELINE_BIND_POINT_COMPUTE:
    return "VK_PIPELINE_BIND_POINT_COMPUTE";
  case VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR:
    return "VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR";
  case VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI:
    return "VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI";
  default: return "Unknown VkPipelineBindPoint";
  }
}

const char *VkCommandBufferLevelToString(VkCommandBufferLevel e) {
  switch (e) {
  case VK_COMMAND_BUFFER_LEVEL_PRIMARY:
    return "VK_COMMAND_BUFFER_LEVEL_PRIMARY";
  case VK_COMMAND_BUFFER_LEVEL_SECONDARY:
    return "VK_COMMAND_BUFFER_LEVEL_SECONDARY";
  default: return "Unknown VkCommandBufferLevel";
  }
}

const char *VkIndexTypeToString(VkIndexType e) {
  switch (e) {
  case VK_INDEX_TYPE_UINT16:
    return "VK_INDEX_TYPE_UINT16";
  case VK_INDEX_TYPE_UINT32:
    return "VK_INDEX_TYPE_UINT32";
  case VK_INDEX_TYPE_NONE_KHR:
    return "VK_INDEX_TYPE_NONE_KHR";
  case VK_INDEX_TYPE_UINT8_EXT:
    return "VK_INDEX_TYPE_UINT8_EXT";
  default: return "Unknown VkIndexType";
  }
}

const char *VkSubpassContentsToString(VkSubpassContents e) {
  switch (e) {
  case VK_SUBPASS_CONTENTS_INLINE:
    return "VK_SUBPASS_CONTENTS_INLINE";
  case VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS:
    return "VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS";
  default: return "Unknown VkSubpassContents";
  }
}

const char *VkPointClippingBehaviorToString(VkPointClippingBehavior e) {
  switch (e) {
  case VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES:
    return "VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES";
  case VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY:
    return "VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY";
  default: return "Unknown VkPointClippingBehavior";
  }
}

const char *VkTessellationDomainOriginToString(VkTessellationDomainOrigin e) {
  switch (e) {
  case VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT:
    return "VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT";
  case VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT:
    return "VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT";
  default: return "Unknown VkTessellationDomainOrigin";
  }
}

const char *VkSamplerYcbcrModelConversionToString(VkSamplerYcbcrModelConversion e) {
  switch (e) {
  case VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY:
    return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY";
  case VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY:
    return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY";
  case VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709:
    return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709";
  case VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601:
    return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601";
  case VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020:
    return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020";
  default: return "Unknown VkSamplerYcbcrModelConversion";
  }
}

const char *VkSamplerYcbcrRangeToString(VkSamplerYcbcrRange e) {
  switch (e) {
  case VK_SAMPLER_YCBCR_RANGE_ITU_FULL:
    return "VK_SAMPLER_YCBCR_RANGE_ITU_FULL";
  case VK_SAMPLER_YCBCR_RANGE_ITU_NARROW:
    return "VK_SAMPLER_YCBCR_RANGE_ITU_NARROW";
  default: return "Unknown VkSamplerYcbcrRange";
  }
}

const char *VkChromaLocationToString(VkChromaLocation e) {
  switch (e) {
  case VK_CHROMA_LOCATION_COSITED_EVEN:
    return "VK_CHROMA_LOCATION_COSITED_EVEN";
  case VK_CHROMA_LOCATION_MIDPOINT:
    return "VK_CHROMA_LOCATION_MIDPOINT";
  default: return "Unknown VkChromaLocation";
  }
}

const char *VkDescriptorUpdateTemplateTypeToString(VkDescriptorUpdateTemplateType e) {
  switch (e) {
  case VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET:
    return "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET";
  case VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR:
    return "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR";
  default: return "Unknown VkDescriptorUpdateTemplateType";
  }
}

const char *VkDriverIdToString(VkDriverId e) {
  switch (e) {
  case VK_DRIVER_ID_AMD_PROPRIETARY:
    return "VK_DRIVER_ID_AMD_PROPRIETARY";
  case VK_DRIVER_ID_AMD_OPEN_SOURCE:
    return "VK_DRIVER_ID_AMD_OPEN_SOURCE";
  case VK_DRIVER_ID_MESA_RADV:
    return "VK_DRIVER_ID_MESA_RADV";
  case VK_DRIVER_ID_NVIDIA_PROPRIETARY:
    return "VK_DRIVER_ID_NVIDIA_PROPRIETARY";
  case VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS:
    return "VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS";
  case VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA:
    return "VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA";
  case VK_DRIVER_ID_IMAGINATION_PROPRIETARY:
    return "VK_DRIVER_ID_IMAGINATION_PROPRIETARY";
  case VK_DRIVER_ID_QUALCOMM_PROPRIETARY:
    return "VK_DRIVER_ID_QUALCOMM_PROPRIETARY";
  case VK_DRIVER_ID_ARM_PROPRIETARY:
    return "VK_DRIVER_ID_ARM_PROPRIETARY";
  case VK_DRIVER_ID_GOOGLE_SWIFTSHADER:
    return "VK_DRIVER_ID_GOOGLE_SWIFTSHADER";
  case VK_DRIVER_ID_GGP_PROPRIETARY:
    return "VK_DRIVER_ID_GGP_PROPRIETARY";
  case VK_DRIVER_ID_BROADCOM_PROPRIETARY:
    return "VK_DRIVER_ID_BROADCOM_PROPRIETARY";
  case VK_DRIVER_ID_MESA_LLVMPIPE:
    return "VK_DRIVER_ID_MESA_LLVMPIPE";
  case VK_DRIVER_ID_MOLTENVK:
    return "VK_DRIVER_ID_MOLTENVK";
  case VK_DRIVER_ID_COREAVI_PROPRIETARY:
    return "VK_DRIVER_ID_COREAVI_PROPRIETARY";
  case VK_DRIVER_ID_JUICE_PROPRIETARY:
    return "VK_DRIVER_ID_JUICE_PROPRIETARY";
  case VK_DRIVER_ID_VERISILICON_PROPRIETARY:
    return "VK_DRIVER_ID_VERISILICON_PROPRIETARY";
  case VK_DRIVER_ID_MESA_TURNIP:
    return "VK_DRIVER_ID_MESA_TURNIP";
  case VK_DRIVER_ID_MESA_V3DV:
    return "VK_DRIVER_ID_MESA_V3DV";
  case VK_DRIVER_ID_MESA_PANVK:
    return "VK_DRIVER_ID_MESA_PANVK";
  case VK_DRIVER_ID_SAMSUNG_PROPRIETARY:
    return "VK_DRIVER_ID_SAMSUNG_PROPRIETARY";
  case VK_DRIVER_ID_MESA_VENUS:
    return "VK_DRIVER_ID_MESA_VENUS";
  case VK_DRIVER_ID_MESA_DOZEN:
    return "VK_DRIVER_ID_MESA_DOZEN";
  case VK_DRIVER_ID_MESA_NVK:
    return "VK_DRIVER_ID_MESA_NVK";
  case VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA:
    return "VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA";
  default: return "Unknown VkDriverId";
  }
}

const char *VkShaderFloatControlsIndependenceToString(VkShaderFloatControlsIndependence e) {
  switch (e) {
  case VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY:
    return "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY";
  case VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL:
    return "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL";
  case VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE:
    return "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE";
  default: return "Unknown VkShaderFloatControlsIndependence";
  }
}

const char *VkSamplerReductionModeToString(VkSamplerReductionMode e) {
  switch (e) {
  case VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE:
    return "VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE";
  case VK_SAMPLER_REDUCTION_MODE_MIN:
    return "VK_SAMPLER_REDUCTION_MODE_MIN";
  case VK_SAMPLER_REDUCTION_MODE_MAX:
    return "VK_SAMPLER_REDUCTION_MODE_MAX";
  default: return "Unknown VkSamplerReductionMode";
  }
}

const char *VkSemaphoreTypeToString(VkSemaphoreType e) {
  switch (e) {
  case VK_SEMAPHORE_TYPE_BINARY:
    return "VK_SEMAPHORE_TYPE_BINARY";
  case VK_SEMAPHORE_TYPE_TIMELINE:
    return "VK_SEMAPHORE_TYPE_TIMELINE";
  default: return "Unknown VkSemaphoreType";
  }
}

const char *VkPresentModeKHRToString(VkPresentModeKHR e) {
  switch (e) {
  case VK_PRESENT_MODE_IMMEDIATE_KHR:
    return "VK_PRESENT_MODE_IMMEDIATE_KHR";
  case VK_PRESENT_MODE_MAILBOX_KHR:
    return "VK_PRESENT_MODE_MAILBOX_KHR";
  case VK_PRESENT_MODE_FIFO_KHR:
    return "VK_PRESENT_MODE_FIFO_KHR";
  case VK_PRESENT_MODE_FIFO_RELAXED_KHR:
    return "VK_PRESENT_MODE_FIFO_RELAXED_KHR";
  case VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR:
    return "VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR";
  case VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR:
    return "VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR";
  default: return "Unknown VkPresentModeKHR";
  }
}

const char *VkColorSpaceKHRToString(VkColorSpaceKHR e) {
  switch (e) {
  case VK_COLOR_SPACE_SRGB_NONLINEAR_KHR:
    return "VK_COLOR_SPACE_SRGB_NONLINEAR_KHR";
  case VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT:
    return "VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT";
  case VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT:
    return "VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT";
  case VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT:
    return "VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT";
  case VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT:
    return "VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT";
  case VK_COLOR_SPACE_BT709_LINEAR_EXT:
    return "VK_COLOR_SPACE_BT709_LINEAR_EXT";
  case VK_COLOR_SPACE_BT709_NONLINEAR_EXT:
    return "VK_COLOR_SPACE_BT709_NONLINEAR_EXT";
  case VK_COLOR_SPACE_BT2020_LINEAR_EXT:
    return "VK_COLOR_SPACE_BT2020_LINEAR_EXT";
  case VK_COLOR_SPACE_HDR10_ST2084_EXT:
    return "VK_COLOR_SPACE_HDR10_ST2084_EXT";
  case VK_COLOR_SPACE_DOLBYVISION_EXT:
    return "VK_COLOR_SPACE_DOLBYVISION_EXT";
  case VK_COLOR_SPACE_HDR10_HLG_EXT:
    return "VK_COLOR_SPACE_HDR10_HLG_EXT";
  case VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT:
    return "VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT";
  case VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT:
    return "VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT";
  case VK_COLOR_SPACE_PASS_THROUGH_EXT:
    return "VK_COLOR_SPACE_PASS_THROUGH_EXT";
  case VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT:
    return "VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT";
  case VK_COLOR_SPACE_DISPLAY_NATIVE_AMD:
    return "VK_COLOR_SPACE_DISPLAY_NATIVE_AMD";
  default: return "Unknown VkColorSpaceKHR";
  }
}

const char *VkQueryResultStatusKHRToString(VkQueryResultStatusKHR e) {
  switch (e) {
  case VK_QUERY_RESULT_STATUS_ERROR_KHR:
    return "VK_QUERY_RESULT_STATUS_ERROR_KHR";
  case VK_QUERY_RESULT_STATUS_NOT_READY_KHR:
    return "VK_QUERY_RESULT_STATUS_NOT_READY_KHR";
  case VK_QUERY_RESULT_STATUS_COMPLETE_KHR:
    return "VK_QUERY_RESULT_STATUS_COMPLETE_KHR";
  default: return "Unknown VkQueryResultStatusKHR";
  }
}

const char *VkPerformanceCounterUnitKHRToString(VkPerformanceCounterUnitKHR e) {
  switch (e) {
  case VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR:
    return "VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR";
  case VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR:
    return "VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR";
  case VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR:
    return "VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR";
  case VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR:
    return "VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR";
  case VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR:
    return "VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR";
  case VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR:
    return "VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR";
  case VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR:
    return "VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR";
  case VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR:
    return "VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR";
  case VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR:
    return "VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR";
  case VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR:
    return "VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR";
  case VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR:
    return "VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR";
  default: return "Unknown VkPerformanceCounterUnitKHR";
  }
}

const char *VkPerformanceCounterScopeKHRToString(VkPerformanceCounterScopeKHR e) {
  switch (e) {
  case VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR:
    return "VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR";
  case VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR:
    return "VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR";
  case VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR:
    return "VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR";
  default: return "Unknown VkPerformanceCounterScopeKHR";
  }
}

const char *VkPerformanceCounterStorageKHRToString(VkPerformanceCounterStorageKHR e) {
  switch (e) {
  case VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR:
    return "VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR";
  case VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR:
    return "VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR";
  case VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR:
    return "VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR";
  case VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR:
    return "VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR";
  case VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR:
    return "VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR";
  case VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR:
    return "VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR";
  default: return "Unknown VkPerformanceCounterStorageKHR";
  }
}

const char *VkQueueGlobalPriorityKHRToString(VkQueueGlobalPriorityKHR e) {
  switch (e) {
  case VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR:
    return "VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR";
  case VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR:
    return "VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR";
  case VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR:
    return "VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR";
  case VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR:
    return "VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR";
  default: return "Unknown VkQueueGlobalPriorityKHR";
  }
}

const char *VkFragmentShadingRateCombinerOpKHRToString(VkFragmentShadingRateCombinerOpKHR e) {
  switch (e) {
  case VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR:
    return "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR";
  case VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR:
    return "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR";
  case VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR:
    return "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR";
  case VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR:
    return "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR";
  case VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR:
    return "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR";
  default: return "Unknown VkFragmentShadingRateCombinerOpKHR";
  }
}

const char *VkPipelineExecutableStatisticFormatKHRToString(VkPipelineExecutableStatisticFormatKHR e) {
  switch (e) {
  case VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR:
    return "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR";
  case VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR:
    return "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR";
  case VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR:
    return "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR";
  case VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR:
    return "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR";
  default: return "Unknown VkPipelineExecutableStatisticFormatKHR";
  }
}

#ifdef VK_ENABLE_BETA_EXTENSIONS
const char *VkVideoEncodeTuningModeKHRToString(VkVideoEncodeTuningModeKHR e) {
  switch (e) {
  case VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR:
    return "VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR";
  case VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR:
    return "VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR";
  case VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR:
    return "VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR";
  case VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR:
    return "VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR";
  case VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR:
    return "VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR";
  default: return "Unknown VkVideoEncodeTuningModeKHR";
  }
}
#endif //VK_ENABLE_BETA_EXTENSIONS

const char *VkComponentTypeKHRToString(VkComponentTypeKHR e) {
  switch (e) {
  case VK_COMPONENT_TYPE_FLOAT16_KHR:
    return "VK_COMPONENT_TYPE_FLOAT16_KHR";
  case VK_COMPONENT_TYPE_FLOAT32_KHR:
    return "VK_COMPONENT_TYPE_FLOAT32_KHR";
  case VK_COMPONENT_TYPE_FLOAT64_KHR:
    return "VK_COMPONENT_TYPE_FLOAT64_KHR";
  case VK_COMPONENT_TYPE_SINT8_KHR:
    return "VK_COMPONENT_TYPE_SINT8_KHR";
  case VK_COMPONENT_TYPE_SINT16_KHR:
    return "VK_COMPONENT_TYPE_SINT16_KHR";
  case VK_COMPONENT_TYPE_SINT32_KHR:
    return "VK_COMPONENT_TYPE_SINT32_KHR";
  case VK_COMPONENT_TYPE_SINT64_KHR:
    return "VK_COMPONENT_TYPE_SINT64_KHR";
  case VK_COMPONENT_TYPE_UINT8_KHR:
    return "VK_COMPONENT_TYPE_UINT8_KHR";
  case VK_COMPONENT_TYPE_UINT16_KHR:
    return "VK_COMPONENT_TYPE_UINT16_KHR";
  case VK_COMPONENT_TYPE_UINT32_KHR:
    return "VK_COMPONENT_TYPE_UINT32_KHR";
  case VK_COMPONENT_TYPE_UINT64_KHR:
    return "VK_COMPONENT_TYPE_UINT64_KHR";
  default: return "Unknown VkComponentTypeKHR";
  }
}

const char *VkScopeKHRToString(VkScopeKHR e) {
  switch (e) {
  case VK_SCOPE_DEVICE_KHR:
    return "VK_SCOPE_DEVICE_KHR";
  case VK_SCOPE_WORKGROUP_KHR:
    return "VK_SCOPE_WORKGROUP_KHR";
  case VK_SCOPE_SUBGROUP_KHR:
    return "VK_SCOPE_SUBGROUP_KHR";
  case VK_SCOPE_QUEUE_FAMILY_KHR:
    return "VK_SCOPE_QUEUE_FAMILY_KHR";
  default: return "Unknown VkScopeKHR";
  }
}

const char *VkDebugReportObjectTypeEXTToString(VkDebugReportObjectTypeEXT e) {
  switch (e) {
  case VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT";
  case VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT:
    return "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT";
  default: return "Unknown VkDebugReportObjectTypeEXT";
  }
}

const char *VkRasterizationOrderAMDToString(VkRasterizationOrderAMD e) {
  switch (e) {
  case VK_RASTERIZATION_ORDER_STRICT_AMD:
    return "VK_RASTERIZATION_ORDER_STRICT_AMD";
  case VK_RASTERIZATION_ORDER_RELAXED_AMD:
    return "VK_RASTERIZATION_ORDER_RELAXED_AMD";
  default: return "Unknown VkRasterizationOrderAMD";
  }
}

const char *VkShaderInfoTypeAMDToString(VkShaderInfoTypeAMD e) {
  switch (e) {
  case VK_SHADER_INFO_TYPE_STATISTICS_AMD:
    return "VK_SHADER_INFO_TYPE_STATISTICS_AMD";
  case VK_SHADER_INFO_TYPE_BINARY_AMD:
    return "VK_SHADER_INFO_TYPE_BINARY_AMD";
  case VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD:
    return "VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD";
  default: return "Unknown VkShaderInfoTypeAMD";
  }
}

const char *VkValidationCheckEXTToString(VkValidationCheckEXT e) {
  switch (e) {
  case VK_VALIDATION_CHECK_ALL_EXT:
    return "VK_VALIDATION_CHECK_ALL_EXT";
  case VK_VALIDATION_CHECK_SHADERS_EXT:
    return "VK_VALIDATION_CHECK_SHADERS_EXT";
  default: return "Unknown VkValidationCheckEXT";
  }
}

const char *VkPipelineRobustnessBufferBehaviorEXTToString(VkPipelineRobustnessBufferBehaviorEXT e) {
  switch (e) {
  case VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT:
    return "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT";
  case VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT:
    return "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT";
  case VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT:
    return "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT";
  case VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT:
    return "VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT";
  default: return "Unknown VkPipelineRobustnessBufferBehaviorEXT";
  }
}

const char *VkPipelineRobustnessImageBehaviorEXTToString(VkPipelineRobustnessImageBehaviorEXT e) {
  switch (e) {
  case VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT:
    return "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT";
  case VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT:
    return "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT";
  case VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT:
    return "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT";
  case VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT:
    return "VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT";
  default: return "Unknown VkPipelineRobustnessImageBehaviorEXT";
  }
}

const char *VkDisplayPowerStateEXTToString(VkDisplayPowerStateEXT e) {
  switch (e) {
  case VK_DISPLAY_POWER_STATE_OFF_EXT:
    return "VK_DISPLAY_POWER_STATE_OFF_EXT";
  case VK_DISPLAY_POWER_STATE_SUSPEND_EXT:
    return "VK_DISPLAY_POWER_STATE_SUSPEND_EXT";
  case VK_DISPLAY_POWER_STATE_ON_EXT:
    return "VK_DISPLAY_POWER_STATE_ON_EXT";
  default: return "Unknown VkDisplayPowerStateEXT";
  }
}

const char *VkDeviceEventTypeEXTToString(VkDeviceEventTypeEXT e) {
  switch (e) {
  case VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT:
    return "VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT";
  default: return "Unknown VkDeviceEventTypeEXT";
  }
}

const char *VkDisplayEventTypeEXTToString(VkDisplayEventTypeEXT e) {
  switch (e) {
  case VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT:
    return "VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT";
  default: return "Unknown VkDisplayEventTypeEXT";
  }
}

const char *VkViewportCoordinateSwizzleNVToString(VkViewportCoordinateSwizzleNV e) {
  switch (e) {
  case VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV:
    return "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV";
  case VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV:
    return "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV";
  case VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV:
    return "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV";
  case VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV:
    return "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV";
  case VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV:
    return "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV";
  case VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV:
    return "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV";
  case VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV:
    return "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV";
  case VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV:
    return "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV";
  default: return "Unknown VkViewportCoordinateSwizzleNV";
  }
}

const char *VkDiscardRectangleModeEXTToString(VkDiscardRectangleModeEXT e) {
  switch (e) {
  case VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT:
    return "VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT";
  case VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT:
    return "VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT";
  default: return "Unknown VkDiscardRectangleModeEXT";
  }
}

const char *VkConservativeRasterizationModeEXTToString(VkConservativeRasterizationModeEXT e) {
  switch (e) {
  case VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT:
    return "VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT";
  case VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT:
    return "VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT";
  case VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT:
    return "VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT";
  default: return "Unknown VkConservativeRasterizationModeEXT";
  }
}

const char *VkBlendOverlapEXTToString(VkBlendOverlapEXT e) {
  switch (e) {
  case VK_BLEND_OVERLAP_UNCORRELATED_EXT:
    return "VK_BLEND_OVERLAP_UNCORRELATED_EXT";
  case VK_BLEND_OVERLAP_DISJOINT_EXT:
    return "VK_BLEND_OVERLAP_DISJOINT_EXT";
  case VK_BLEND_OVERLAP_CONJOINT_EXT:
    return "VK_BLEND_OVERLAP_CONJOINT_EXT";
  default: return "Unknown VkBlendOverlapEXT";
  }
}

const char *VkCoverageModulationModeNVToString(VkCoverageModulationModeNV e) {
  switch (e) {
  case VK_COVERAGE_MODULATION_MODE_NONE_NV:
    return "VK_COVERAGE_MODULATION_MODE_NONE_NV";
  case VK_COVERAGE_MODULATION_MODE_RGB_NV:
    return "VK_COVERAGE_MODULATION_MODE_RGB_NV";
  case VK_COVERAGE_MODULATION_MODE_ALPHA_NV:
    return "VK_COVERAGE_MODULATION_MODE_ALPHA_NV";
  case VK_COVERAGE_MODULATION_MODE_RGBA_NV:
    return "VK_COVERAGE_MODULATION_MODE_RGBA_NV";
  default: return "Unknown VkCoverageModulationModeNV";
  }
}

const char *VkValidationCacheHeaderVersionEXTToString(VkValidationCacheHeaderVersionEXT e) {
  switch (e) {
  case VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT:
    return "VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT";
  default: return "Unknown VkValidationCacheHeaderVersionEXT";
  }
}

const char *VkShadingRatePaletteEntryNVToString(VkShadingRatePaletteEntryNV e) {
  switch (e) {
  case VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV:
    return "VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV";
  case VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV:
    return "VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV";
  case VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV:
    return "VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV";
  case VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV:
    return "VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV";
  case VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV:
    return "VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV";
  case VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV:
    return "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV";
  case VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV:
    return "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV";
  case VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV:
    return "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV";
  case VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV:
    return "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV";
  case VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV:
    return "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV";
  case VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV:
    return "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV";
  case VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV:
    return "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV";
  default: return "Unknown VkShadingRatePaletteEntryNV";
  }
}

const char *VkCoarseSampleOrderTypeNVToString(VkCoarseSampleOrderTypeNV e) {
  switch (e) {
  case VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV:
    return "VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV";
  case VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV:
    return "VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV";
  case VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV:
    return "VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV";
  case VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV:
    return "VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV";
  default: return "Unknown VkCoarseSampleOrderTypeNV";
  }
}

const char *VkRayTracingShaderGroupTypeKHRToString(VkRayTracingShaderGroupTypeKHR e) {
  switch (e) {
  case VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR:
    return "VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR";
  case VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR:
    return "VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR";
  case VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR:
    return "VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR";
  default: return "Unknown VkRayTracingShaderGroupTypeKHR";
  }
}

const char *VkGeometryTypeKHRToString(VkGeometryTypeKHR e) {
  switch (e) {
  case VK_GEOMETRY_TYPE_TRIANGLES_KHR:
    return "VK_GEOMETRY_TYPE_TRIANGLES_KHR";
  case VK_GEOMETRY_TYPE_AABBS_KHR:
    return "VK_GEOMETRY_TYPE_AABBS_KHR";
  case VK_GEOMETRY_TYPE_INSTANCES_KHR:
    return "VK_GEOMETRY_TYPE_INSTANCES_KHR";
  default: return "Unknown VkGeometryTypeKHR";
  }
}

const char *VkAccelerationStructureTypeKHRToString(VkAccelerationStructureTypeKHR e) {
  switch (e) {
  case VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR:
    return "VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR";
  case VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR:
    return "VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR";
  case VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR:
    return "VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR";
  default: return "Unknown VkAccelerationStructureTypeKHR";
  }
}

const char *VkCopyAccelerationStructureModeKHRToString(VkCopyAccelerationStructureModeKHR e) {
  switch (e) {
  case VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR:
    return "VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR";
  case VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR:
    return "VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR";
  case VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR:
    return "VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR";
  case VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR:
    return "VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR";
  default: return "Unknown VkCopyAccelerationStructureModeKHR";
  }
}

const char *VkAccelerationStructureMemoryRequirementsTypeNVToString(VkAccelerationStructureMemoryRequirementsTypeNV e) {
  switch (e) {
  case VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV:
    return "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV";
  case VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV:
    return "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV";
  case VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV:
    return "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV";
  default: return "Unknown VkAccelerationStructureMemoryRequirementsTypeNV";
  }
}

const char *VkTimeDomainEXTToString(VkTimeDomainEXT e) {
  switch (e) {
  case VK_TIME_DOMAIN_DEVICE_EXT:
    return "VK_TIME_DOMAIN_DEVICE_EXT";
  case VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT:
    return "VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT";
  case VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT:
    return "VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT";
  case VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT:
    return "VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT";
  default: return "Unknown VkTimeDomainEXT";
  }
}

const char *VkMemoryOverallocationBehaviorAMDToString(VkMemoryOverallocationBehaviorAMD e) {
  switch (e) {
  case VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD:
    return "VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD";
  case VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD:
    return "VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD";
  case VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD:
    return "VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD";
  default: return "Unknown VkMemoryOverallocationBehaviorAMD";
  }
}

const char *VkPerformanceConfigurationTypeINTELToString(VkPerformanceConfigurationTypeINTEL e) {
  switch (e) {
  case VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL:
    return "VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL";
  default: return "Unknown VkPerformanceConfigurationTypeINTEL";
  }
}

const char *VkQueryPoolSamplingModeINTELToString(VkQueryPoolSamplingModeINTEL e) {
  switch (e) {
  case VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL:
    return "VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL";
  default: return "Unknown VkQueryPoolSamplingModeINTEL";
  }
}

const char *VkPerformanceOverrideTypeINTELToString(VkPerformanceOverrideTypeINTEL e) {
  switch (e) {
  case VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL:
    return "VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL";
  case VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL:
    return "VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL";
  default: return "Unknown VkPerformanceOverrideTypeINTEL";
  }
}

const char *VkPerformanceParameterTypeINTELToString(VkPerformanceParameterTypeINTEL e) {
  switch (e) {
  case VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL:
    return "VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL";
  case VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL:
    return "VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL";
  default: return "Unknown VkPerformanceParameterTypeINTEL";
  }
}

const char *VkPerformanceValueTypeINTELToString(VkPerformanceValueTypeINTEL e) {
  switch (e) {
  case VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL:
    return "VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL";
  case VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL:
    return "VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL";
  case VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL:
    return "VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL";
  case VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL:
    return "VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL";
  case VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL:
    return "VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL";
  default: return "Unknown VkPerformanceValueTypeINTEL";
  }
}

const char *VkValidationFeatureEnableEXTToString(VkValidationFeatureEnableEXT e) {
  switch (e) {
  case VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT:
    return "VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT";
  case VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT:
    return "VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT";
  case VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT:
    return "VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT";
  case VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT:
    return "VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT";
  case VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT:
    return "VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT";
  default: return "Unknown VkValidationFeatureEnableEXT";
  }
}

const char *VkValidationFeatureDisableEXTToString(VkValidationFeatureDisableEXT e) {
  switch (e) {
  case VK_VALIDATION_FEATURE_DISABLE_ALL_EXT:
    return "VK_VALIDATION_FEATURE_DISABLE_ALL_EXT";
  case VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT:
    return "VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT";
  case VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT:
    return "VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT";
  case VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT:
    return "VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT";
  case VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT:
    return "VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT";
  case VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT:
    return "VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT";
  case VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT:
    return "VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT";
  case VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT:
    return "VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT";
  default: return "Unknown VkValidationFeatureDisableEXT";
  }
}

const char *VkCoverageReductionModeNVToString(VkCoverageReductionModeNV e) {
  switch (e) {
  case VK_COVERAGE_REDUCTION_MODE_MERGE_NV:
    return "VK_COVERAGE_REDUCTION_MODE_MERGE_NV";
  case VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV:
    return "VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV";
  default: return "Unknown VkCoverageReductionModeNV";
  }
}

const char *VkProvokingVertexModeEXTToString(VkProvokingVertexModeEXT e) {
  switch (e) {
  case VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT:
    return "VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT";
  case VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT:
    return "VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT";
  default: return "Unknown VkProvokingVertexModeEXT";
  }
}

#ifdef VK_USE_PLATFORM_WIN32_KHR
const char *VkFullScreenExclusiveEXTToString(VkFullScreenExclusiveEXT e) {
  switch (e) {
  case VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT:
    return "VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT";
  case VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT:
    return "VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT";
  case VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT:
    return "VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT";
  case VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT:
    return "VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT";
  default: return "Unknown VkFullScreenExclusiveEXT";
  }
}
#endif //VK_USE_PLATFORM_WIN32_KHR

const char *VkLineRasterizationModeEXTToString(VkLineRasterizationModeEXT e) {
  switch (e) {
  case VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT:
    return "VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT";
  case VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT:
    return "VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT";
  case VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT:
    return "VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT";
  case VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT:
    return "VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT";
  default: return "Unknown VkLineRasterizationModeEXT";
  }
}

const char *VkIndirectCommandsTokenTypeNVToString(VkIndirectCommandsTokenTypeNV e) {
  switch (e) {
  case VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV:
    return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV";
  case VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV:
    return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV";
  case VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV:
    return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV";
  case VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV:
    return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV";
  case VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV:
    return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV";
  case VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV:
    return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV";
  case VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV:
    return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV";
  case VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV:
    return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV";
  case VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV:
    return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV";
  case VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV:
    return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV";
  case VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV:
    return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV";
  default: return "Unknown VkIndirectCommandsTokenTypeNV";
  }
}

const char *VkDepthBiasRepresentationEXTToString(VkDepthBiasRepresentationEXT e) {
  switch (e) {
  case VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT:
    return "VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT";
  case VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT:
    return "VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT";
  case VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT:
    return "VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT";
  default: return "Unknown VkDepthBiasRepresentationEXT";
  }
}

const char *VkDeviceMemoryReportEventTypeEXTToString(VkDeviceMemoryReportEventTypeEXT e) {
  switch (e) {
  case VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT:
    return "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT";
  case VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT:
    return "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT";
  case VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT:
    return "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT";
  case VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT:
    return "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT";
  case VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT:
    return "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT";
  default: return "Unknown VkDeviceMemoryReportEventTypeEXT";
  }
}

const char *VkFragmentShadingRateTypeNVToString(VkFragmentShadingRateTypeNV e) {
  switch (e) {
  case VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV:
    return "VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV";
  case VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV:
    return "VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV";
  default: return "Unknown VkFragmentShadingRateTypeNV";
  }
}

const char *VkFragmentShadingRateNVToString(VkFragmentShadingRateNV e) {
  switch (e) {
  case VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV:
    return "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV";
  case VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV:
    return "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV";
  case VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV:
    return "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV";
  case VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV:
    return "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV";
  case VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV:
    return "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV";
  case VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV:
    return "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV";
  case VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV:
    return "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV";
  case VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV:
    return "VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV";
  case VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV:
    return "VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV";
  case VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV:
    return "VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV";
  case VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV:
    return "VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV";
  case VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV:
    return "VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV";
  default: return "Unknown VkFragmentShadingRateNV";
  }
}

const char *VkAccelerationStructureMotionInstanceTypeNVToString(VkAccelerationStructureMotionInstanceTypeNV e) {
  switch (e) {
  case VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV:
    return "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV";
  case VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV:
    return "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV";
  case VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV:
    return "VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV";
  default: return "Unknown VkAccelerationStructureMotionInstanceTypeNV";
  }
}

const char *VkDeviceFaultAddressTypeEXTToString(VkDeviceFaultAddressTypeEXT e) {
  switch (e) {
  case VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT:
    return "VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT";
  case VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT:
    return "VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT";
  case VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT:
    return "VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT";
  case VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT:
    return "VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT";
  case VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT:
    return "VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT";
  case VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT:
    return "VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT";
  case VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT:
    return "VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT";
  default: return "Unknown VkDeviceFaultAddressTypeEXT";
  }
}

const char *VkDeviceFaultVendorBinaryHeaderVersionEXTToString(VkDeviceFaultVendorBinaryHeaderVersionEXT e) {
  switch (e) {
  case VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT:
    return "VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT";
  default: return "Unknown VkDeviceFaultVendorBinaryHeaderVersionEXT";
  }
}

const char *VkDeviceAddressBindingTypeEXTToString(VkDeviceAddressBindingTypeEXT e) {
  switch (e) {
  case VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT:
    return "VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT";
  case VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT:
    return "VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT";
  default: return "Unknown VkDeviceAddressBindingTypeEXT";
  }
}

const char *VkMicromapTypeEXTToString(VkMicromapTypeEXT e) {
  switch (e) {
  case VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT:
    return "VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT";
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_MICROMAP_TYPE_DISPLACEMENT_MICROMAP_NV:
    return "VK_MICROMAP_TYPE_DISPLACEMENT_MICROMAP_NV";
#endif //VK_ENABLE_BETA_EXTENSIONS
  default: return "Unknown VkMicromapTypeEXT";
  }
}

const char *VkBuildMicromapModeEXTToString(VkBuildMicromapModeEXT e) {
  switch (e) {
  case VK_BUILD_MICROMAP_MODE_BUILD_EXT:
    return "VK_BUILD_MICROMAP_MODE_BUILD_EXT";
  default: return "Unknown VkBuildMicromapModeEXT";
  }
}

const char *VkCopyMicromapModeEXTToString(VkCopyMicromapModeEXT e) {
  switch (e) {
  case VK_COPY_MICROMAP_MODE_CLONE_EXT:
    return "VK_COPY_MICROMAP_MODE_CLONE_EXT";
  case VK_COPY_MICROMAP_MODE_SERIALIZE_EXT:
    return "VK_COPY_MICROMAP_MODE_SERIALIZE_EXT";
  case VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT:
    return "VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT";
  case VK_COPY_MICROMAP_MODE_COMPACT_EXT:
    return "VK_COPY_MICROMAP_MODE_COMPACT_EXT";
  default: return "Unknown VkCopyMicromapModeEXT";
  }
}

const char *VkOpacityMicromapFormatEXTToString(VkOpacityMicromapFormatEXT e) {
  switch (e) {
  case VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT:
    return "VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT";
  case VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT:
    return "VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT";
  default: return "Unknown VkOpacityMicromapFormatEXT";
  }
}

const char *VkOpacityMicromapSpecialIndexEXTToString(VkOpacityMicromapSpecialIndexEXT e) {
  switch (e) {
  case VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT:
    return "VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT";
  case VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT:
    return "VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT";
  case VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT:
    return "VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT";
  case VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT:
    return "VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT";
  default: return "Unknown VkOpacityMicromapSpecialIndexEXT";
  }
}

const char *VkAccelerationStructureCompatibilityKHRToString(VkAccelerationStructureCompatibilityKHR e) {
  switch (e) {
  case VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR:
    return "VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR";
  case VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR:
    return "VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR";
  default: return "Unknown VkAccelerationStructureCompatibilityKHR";
  }
}

const char *VkAccelerationStructureBuildTypeKHRToString(VkAccelerationStructureBuildTypeKHR e) {
  switch (e) {
  case VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR:
    return "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR";
  case VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR:
    return "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR";
  case VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR:
    return "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR";
  default: return "Unknown VkAccelerationStructureBuildTypeKHR";
  }
}

#ifdef VK_ENABLE_BETA_EXTENSIONS
const char *VkDisplacementMicromapFormatNVToString(VkDisplacementMicromapFormatNV e) {
  switch (e) {
  case VK_DISPLACEMENT_MICROMAP_FORMAT_64_TRIANGLES_64_BYTES_NV:
    return "VK_DISPLACEMENT_MICROMAP_FORMAT_64_TRIANGLES_64_BYTES_NV";
  case VK_DISPLACEMENT_MICROMAP_FORMAT_256_TRIANGLES_128_BYTES_NV:
    return "VK_DISPLACEMENT_MICROMAP_FORMAT_256_TRIANGLES_128_BYTES_NV";
  case VK_DISPLACEMENT_MICROMAP_FORMAT_1024_TRIANGLES_128_BYTES_NV:
    return "VK_DISPLACEMENT_MICROMAP_FORMAT_1024_TRIANGLES_128_BYTES_NV";
  default: return "Unknown VkDisplacementMicromapFormatNV";
  }
}
#endif //VK_ENABLE_BETA_EXTENSIONS

const char *VkSubpassMergeStatusEXTToString(VkSubpassMergeStatusEXT e) {
  switch (e) {
  case VK_SUBPASS_MERGE_STATUS_MERGED_EXT:
    return "VK_SUBPASS_MERGE_STATUS_MERGED_EXT";
  case VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT:
    return "VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT";
  case VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT:
    return "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT";
  case VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT:
    return "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT";
  case VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT:
    return "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT";
  case VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT:
    return "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT";
  case VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT:
    return "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT";
  case VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT:
    return "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT";
  case VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT:
    return "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT";
  case VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT:
    return "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT";
  case VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT:
    return "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT";
  case VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT:
    return "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT";
  case VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT:
    return "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT";
  case VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT:
    return "VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT";
  default: return "Unknown VkSubpassMergeStatusEXT";
  }
}

const char *VkDirectDriverLoadingModeLUNARGToString(VkDirectDriverLoadingModeLUNARG e) {
  switch (e) {
  case VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG:
    return "VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG";
  case VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG:
    return "VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG";
  default: return "Unknown VkDirectDriverLoadingModeLUNARG";
  }
}

const char *VkOpticalFlowPerformanceLevelNVToString(VkOpticalFlowPerformanceLevelNV e) {
  switch (e) {
  case VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV:
    return "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV";
  case VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV:
    return "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV";
  case VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV:
    return "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV";
  case VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV:
    return "VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV";
  default: return "Unknown VkOpticalFlowPerformanceLevelNV";
  }
}

const char *VkOpticalFlowSessionBindingPointNVToString(VkOpticalFlowSessionBindingPointNV e) {
  switch (e) {
  case VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV:
    return "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV";
  case VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV:
    return "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV";
  case VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV:
    return "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV";
  case VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV:
    return "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV";
  case VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV:
    return "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV";
  case VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV:
    return "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV";
  case VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV:
    return "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV";
  case VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV:
    return "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV";
  case VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV:
    return "VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV";
  default: return "Unknown VkOpticalFlowSessionBindingPointNV";
  }
}

const char *VkShaderCodeTypeEXTToString(VkShaderCodeTypeEXT e) {
  switch (e) {
  case VK_SHADER_CODE_TYPE_BINARY_EXT:
    return "VK_SHADER_CODE_TYPE_BINARY_EXT";
  case VK_SHADER_CODE_TYPE_SPIRV_EXT:
    return "VK_SHADER_CODE_TYPE_SPIRV_EXT";
  default: return "Unknown VkShaderCodeTypeEXT";
  }
}

const char *VkRayTracingInvocationReorderModeNVToString(VkRayTracingInvocationReorderModeNV e) {
  switch (e) {
  case VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV:
    return "VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV";
  case VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV:
    return "VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV";
  default: return "Unknown VkRayTracingInvocationReorderModeNV";
  }
}

const char *VkBuildAccelerationStructureModeKHRToString(VkBuildAccelerationStructureModeKHR e) {
  switch (e) {
  case VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR:
    return "VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR";
  case VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR:
    return "VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR";
  default: return "Unknown VkBuildAccelerationStructureModeKHR";
  }
}

const char *VkShaderGroupShaderKHRToString(VkShaderGroupShaderKHR e) {
  switch (e) {
  case VK_SHADER_GROUP_SHADER_GENERAL_KHR:
    return "VK_SHADER_GROUP_SHADER_GENERAL_KHR";
  case VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR:
    return "VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR";
  case VK_SHADER_GROUP_SHADER_ANY_HIT_KHR:
    return "VK_SHADER_GROUP_SHADER_ANY_HIT_KHR";
  case VK_SHADER_GROUP_SHADER_INTERSECTION_KHR:
    return "VK_SHADER_GROUP_SHADER_INTERSECTION_KHR";
  default: return "Unknown VkShaderGroupShaderKHR";
  }
}



// Define ostream operators for enums.

std::ostream &operator<<(std::ostream & os, const VkResult &t) {
  os << VkResultToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkStructureType &t) {
  os << VkStructureTypeToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineCacheHeaderVersion &t) {
  os << VkPipelineCacheHeaderVersionToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageLayout &t) {
  os << VkImageLayoutToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkObjectType &t) {
  os << VkObjectTypeToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVendorId &t) {
  os << VkVendorIdToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSystemAllocationScope &t) {
  os << VkSystemAllocationScopeToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkInternalAllocationType &t) {
  os << VkInternalAllocationTypeToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkFormat &t) {
  os << VkFormatToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageTiling &t) {
  os << VkImageTilingToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageType &t) {
  os << VkImageTypeToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceType &t) {
  os << VkPhysicalDeviceTypeToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkQueryType &t) {
  os << VkQueryTypeToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSharingMode &t) {
  os << VkSharingModeToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkComponentSwizzle &t) {
  os << VkComponentSwizzleToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageViewType &t) {
  os << VkImageViewTypeToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBlendFactor &t) {
  os << VkBlendFactorToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBlendOp &t) {
  os << VkBlendOpToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCompareOp &t) {
  os << VkCompareOpToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDynamicState &t) {
  os << VkDynamicStateToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkFrontFace &t) {
  os << VkFrontFaceToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVertexInputRate &t) {
  os << VkVertexInputRateToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPrimitiveTopology &t) {
  os << VkPrimitiveTopologyToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPolygonMode &t) {
  os << VkPolygonModeToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkStencilOp &t) {
  os << VkStencilOpToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkLogicOp &t) {
  os << VkLogicOpToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBorderColor &t) {
  os << VkBorderColorToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkFilter &t) {
  os << VkFilterToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSamplerAddressMode &t) {
  os << VkSamplerAddressModeToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSamplerMipmapMode &t) {
  os << VkSamplerMipmapModeToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDescriptorType &t) {
  os << VkDescriptorTypeToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAttachmentLoadOp &t) {
  os << VkAttachmentLoadOpToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAttachmentStoreOp &t) {
  os << VkAttachmentStoreOpToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineBindPoint &t) {
  os << VkPipelineBindPointToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCommandBufferLevel &t) {
  os << VkCommandBufferLevelToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkIndexType &t) {
  os << VkIndexTypeToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSubpassContents &t) {
  os << VkSubpassContentsToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPointClippingBehavior &t) {
  os << VkPointClippingBehaviorToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkTessellationDomainOrigin &t) {
  os << VkTessellationDomainOriginToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSamplerYcbcrModelConversion &t) {
  os << VkSamplerYcbcrModelConversionToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSamplerYcbcrRange &t) {
  os << VkSamplerYcbcrRangeToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkChromaLocation &t) {
  os << VkChromaLocationToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDescriptorUpdateTemplateType &t) {
  os << VkDescriptorUpdateTemplateTypeToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDriverId &t) {
  os << VkDriverIdToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkShaderFloatControlsIndependence &t) {
  os << VkShaderFloatControlsIndependenceToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSamplerReductionMode &t) {
  os << VkSamplerReductionModeToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSemaphoreType &t) {
  os << VkSemaphoreTypeToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPresentModeKHR &t) {
  os << VkPresentModeKHRToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkColorSpaceKHR &t) {
  os << VkColorSpaceKHRToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkQueryResultStatusKHR &t) {
  os << VkQueryResultStatusKHRToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPerformanceCounterUnitKHR &t) {
  os << VkPerformanceCounterUnitKHRToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPerformanceCounterScopeKHR &t) {
  os << VkPerformanceCounterScopeKHRToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPerformanceCounterStorageKHR &t) {
  os << VkPerformanceCounterStorageKHRToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkQueueGlobalPriorityKHR &t) {
  os << VkQueueGlobalPriorityKHRToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkFragmentShadingRateCombinerOpKHR &t) {
  os << VkFragmentShadingRateCombinerOpKHRToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineExecutableStatisticFormatKHR &t) {
  os << VkPipelineExecutableStatisticFormatKHRToString(t);
  return os;
}

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeTuningModeKHR &t) {
  os << VkVideoEncodeTuningModeKHRToString(t);
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

std::ostream &operator<<(std::ostream & os, const VkComponentTypeKHR &t) {
  os << VkComponentTypeKHRToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkScopeKHR &t) {
  os << VkScopeKHRToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDebugReportObjectTypeEXT &t) {
  os << VkDebugReportObjectTypeEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRasterizationOrderAMD &t) {
  os << VkRasterizationOrderAMDToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkShaderInfoTypeAMD &t) {
  os << VkShaderInfoTypeAMDToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkValidationCheckEXT &t) {
  os << VkValidationCheckEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineRobustnessBufferBehaviorEXT &t) {
  os << VkPipelineRobustnessBufferBehaviorEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineRobustnessImageBehaviorEXT &t) {
  os << VkPipelineRobustnessImageBehaviorEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDisplayPowerStateEXT &t) {
  os << VkDisplayPowerStateEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceEventTypeEXT &t) {
  os << VkDeviceEventTypeEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDisplayEventTypeEXT &t) {
  os << VkDisplayEventTypeEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkViewportCoordinateSwizzleNV &t) {
  os << VkViewportCoordinateSwizzleNVToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDiscardRectangleModeEXT &t) {
  os << VkDiscardRectangleModeEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkConservativeRasterizationModeEXT &t) {
  os << VkConservativeRasterizationModeEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBlendOverlapEXT &t) {
  os << VkBlendOverlapEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCoverageModulationModeNV &t) {
  os << VkCoverageModulationModeNVToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkValidationCacheHeaderVersionEXT &t) {
  os << VkValidationCacheHeaderVersionEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkShadingRatePaletteEntryNV &t) {
  os << VkShadingRatePaletteEntryNVToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCoarseSampleOrderTypeNV &t) {
  os << VkCoarseSampleOrderTypeNVToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRayTracingShaderGroupTypeKHR &t) {
  os << VkRayTracingShaderGroupTypeKHRToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkGeometryTypeKHR &t) {
  os << VkGeometryTypeKHRToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureTypeKHR &t) {
  os << VkAccelerationStructureTypeKHRToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCopyAccelerationStructureModeKHR &t) {
  os << VkCopyAccelerationStructureModeKHRToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureMemoryRequirementsTypeNV &t) {
  os << VkAccelerationStructureMemoryRequirementsTypeNVToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkTimeDomainEXT &t) {
  os << VkTimeDomainEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMemoryOverallocationBehaviorAMD &t) {
  os << VkMemoryOverallocationBehaviorAMDToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPerformanceConfigurationTypeINTEL &t) {
  os << VkPerformanceConfigurationTypeINTELToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkQueryPoolSamplingModeINTEL &t) {
  os << VkQueryPoolSamplingModeINTELToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPerformanceOverrideTypeINTEL &t) {
  os << VkPerformanceOverrideTypeINTELToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPerformanceParameterTypeINTEL &t) {
  os << VkPerformanceParameterTypeINTELToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPerformanceValueTypeINTEL &t) {
  os << VkPerformanceValueTypeINTELToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkValidationFeatureEnableEXT &t) {
  os << VkValidationFeatureEnableEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkValidationFeatureDisableEXT &t) {
  os << VkValidationFeatureDisableEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCoverageReductionModeNV &t) {
  os << VkCoverageReductionModeNVToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkProvokingVertexModeEXT &t) {
  os << VkProvokingVertexModeEXTToString(t);
  return os;
}

#ifdef VK_USE_PLATFORM_WIN32_KHR
std::ostream &operator<<(std::ostream & os, const VkFullScreenExclusiveEXT &t) {
  os << VkFullScreenExclusiveEXTToString(t);
  return os;
}
#endif //VK_USE_PLATFORM_WIN32_KHR

std::ostream &operator<<(std::ostream & os, const VkLineRasterizationModeEXT &t) {
  os << VkLineRasterizationModeEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkIndirectCommandsTokenTypeNV &t) {
  os << VkIndirectCommandsTokenTypeNVToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDepthBiasRepresentationEXT &t) {
  os << VkDepthBiasRepresentationEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceMemoryReportEventTypeEXT &t) {
  os << VkDeviceMemoryReportEventTypeEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkFragmentShadingRateTypeNV &t) {
  os << VkFragmentShadingRateTypeNVToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkFragmentShadingRateNV &t) {
  os << VkFragmentShadingRateNVToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureMotionInstanceTypeNV &t) {
  os << VkAccelerationStructureMotionInstanceTypeNVToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceFaultAddressTypeEXT &t) {
  os << VkDeviceFaultAddressTypeEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceFaultVendorBinaryHeaderVersionEXT &t) {
  os << VkDeviceFaultVendorBinaryHeaderVersionEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceAddressBindingTypeEXT &t) {
  os << VkDeviceAddressBindingTypeEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMicromapTypeEXT &t) {
  os << VkMicromapTypeEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBuildMicromapModeEXT &t) {
  os << VkBuildMicromapModeEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCopyMicromapModeEXT &t) {
  os << VkCopyMicromapModeEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkOpacityMicromapFormatEXT &t) {
  os << VkOpacityMicromapFormatEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkOpacityMicromapSpecialIndexEXT &t) {
  os << VkOpacityMicromapSpecialIndexEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureCompatibilityKHR &t) {
  os << VkAccelerationStructureCompatibilityKHRToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureBuildTypeKHR &t) {
  os << VkAccelerationStructureBuildTypeKHRToString(t);
  return os;
}

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkDisplacementMicromapFormatNV &t) {
  os << VkDisplacementMicromapFormatNVToString(t);
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

std::ostream &operator<<(std::ostream & os, const VkSubpassMergeStatusEXT &t) {
  os << VkSubpassMergeStatusEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDirectDriverLoadingModeLUNARG &t) {
  os << VkDirectDriverLoadingModeLUNARGToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkOpticalFlowPerformanceLevelNV &t) {
  os << VkOpticalFlowPerformanceLevelNVToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkOpticalFlowSessionBindingPointNV &t) {
  os << VkOpticalFlowSessionBindingPointNVToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkShaderCodeTypeEXT &t) {
  os << VkShaderCodeTypeEXTToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRayTracingInvocationReorderModeNV &t) {
  os << VkRayTracingInvocationReorderModeNVToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBuildAccelerationStructureModeKHR &t) {
  os << VkBuildAccelerationStructureModeKHRToString(t);
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkShaderGroupShaderKHR &t) {
  os << VkShaderGroupShaderKHRToString(t);
  return os;
}



// Define all ostream operators.

std::ostream &operator<<(std::ostream & os, const VkExtent2D &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  width" << std::endl;
    // width -> Field -> uint32_t
    os << "value: " << t.width << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  height" << std::endl;
    // height -> Field -> uint32_t
    os << "value: " << t.height << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkExtent3D &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  width" << std::endl;
    // width -> Field -> uint32_t
    os << "value: " << t.width << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  height" << std::endl;
    // height -> Field -> uint32_t
    os << "value: " << t.height << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depth" << std::endl;
    // depth -> Field -> uint32_t
    os << "value: " << t.depth << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkOffset2D &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  x" << std::endl;
    // x -> Field -> int32_t
    os << "value: " << t.x << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  y" << std::endl;
    // y -> Field -> int32_t
    os << "value: " << t.y << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkOffset3D &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  x" << std::endl;
    // x -> Field -> int32_t
    os << "value: " << t.x << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  y" << std::endl;
    // y -> Field -> int32_t
    os << "value: " << t.y << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  z" << std::endl;
    // z -> Field -> int32_t
    os << "value: " << t.z << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRect2D &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkOffset2D
    os <<  "members:" << std::endl << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extent" << std::endl;
    // extent -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.extent << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBaseInStructure &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBaseOutStructure &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBufferMemoryBarrier &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcAccessMask" << std::endl;
    // srcAccessMask -> Field -> VkAccessFlags
    os << "value: " << t.srcAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstAccessMask" << std::endl;
    // dstAccessMask -> Field -> VkAccessFlags
    os << "value: " << t.dstAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcQueueFamilyIndex" << std::endl;
    // srcQueueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.srcQueueFamilyIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstQueueFamilyIndex" << std::endl;
    // dstQueueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.dstQueueFamilyIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDispatchIndirectCommand &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  x" << std::endl;
    // x -> Field -> uint32_t
    os << "value: " << t.x << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  y" << std::endl;
    // y -> Field -> uint32_t
    os << "value: " << t.y << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  z" << std::endl;
    // z -> Field -> uint32_t
    os << "value: " << t.z << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDrawIndexedIndirectCommand &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexCount" << std::endl;
    // indexCount -> Field -> uint32_t
    os << "value: " << t.indexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instanceCount" << std::endl;
    // instanceCount -> Field -> uint32_t
    os << "value: " << t.instanceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstIndex" << std::endl;
    // firstIndex -> Field -> uint32_t
    os << "value: " << t.firstIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexOffset" << std::endl;
    // vertexOffset -> Field -> int32_t
    os << "value: " << t.vertexOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstInstance" << std::endl;
    // firstInstance -> Field -> uint32_t
    os << "value: " << t.firstInstance << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDrawIndirectCommand &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexCount" << std::endl;
    // vertexCount -> Field -> uint32_t
    os << "value: " << t.vertexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instanceCount" << std::endl;
    // instanceCount -> Field -> uint32_t
    os << "value: " << t.instanceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstVertex" << std::endl;
    // firstVertex -> Field -> uint32_t
    os << "value: " << t.firstVertex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstInstance" << std::endl;
    // firstInstance -> Field -> uint32_t
    os << "value: " << t.firstInstance << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageSubresourceRange &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  aspectMask" << std::endl;
    // aspectMask -> Field -> VkImageAspectFlags
    os << "value: " << t.aspectMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  baseMipLevel" << std::endl;
    // baseMipLevel -> Field -> uint32_t
    os << "value: " << t.baseMipLevel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  levelCount" << std::endl;
    // levelCount -> Field -> uint32_t
    os << "value: " << t.levelCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  baseArrayLayer" << std::endl;
    // baseArrayLayer -> Field -> uint32_t
    os << "value: " << t.baseArrayLayer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layerCount" << std::endl;
    // layerCount -> Field -> uint32_t
    os << "value: " << t.layerCount << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageMemoryBarrier &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcAccessMask" << std::endl;
    // srcAccessMask -> Field -> VkAccessFlags
    os << "value: " << t.srcAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstAccessMask" << std::endl;
    // dstAccessMask -> Field -> VkAccessFlags
    os << "value: " << t.dstAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  oldLayout" << std::endl;
    // oldLayout -> Field -> VkImageLayout
    os << "value: " << t.oldLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  newLayout" << std::endl;
    // newLayout -> Field -> VkImageLayout
    os << "value: " << t.newLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcQueueFamilyIndex" << std::endl;
    // srcQueueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.srcQueueFamilyIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstQueueFamilyIndex" << std::endl;
    // dstQueueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.dstQueueFamilyIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << t.image << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subresourceRange" << std::endl;
    // subresourceRange -> Field -> VkImageSubresourceRange
    os <<  "members:" << std::endl << t.subresourceRange << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMemoryBarrier &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcAccessMask" << std::endl;
    // srcAccessMask -> Field -> VkAccessFlags
    os << "value: " << t.srcAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstAccessMask" << std::endl;
    // dstAccessMask -> Field -> VkAccessFlags
    os << "value: " << t.dstAccessMask << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineCacheHeaderVersionOne &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  headerSize" << std::endl;
    // headerSize -> Field -> uint32_t
    os << "value: " << t.headerSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  headerVersion" << std::endl;
    // headerVersion -> Field -> VkPipelineCacheHeaderVersion
    os << "value: " << t.headerVersion << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vendorID" << std::endl;
    // vendorID -> Field -> uint32_t
    os << "value: " << t.vendorID << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceID" << std::endl;
    // deviceID -> Field -> uint32_t
    os << "value: " << t.deviceID << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineCacheUUID" << std::endl;
    // pipelineCacheUUID -> Field -> FixedArray(uint8_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint8_t" << std::endl;
        for (uint64_t i = 0; i < VK_UUID_SIZE; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pipelineCacheUUID << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAllocationCallbacks &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pUserData" << std::endl;
    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pfnAllocation" << std::endl;
    // pointer
    if (t.pfnAllocation != nullptr) {
      os << "value: *t.pfnAllocation" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pfnReallocation" << std::endl;
    // pointer
    if (t.pfnReallocation != nullptr) {
      os << "value: *t.pfnReallocation" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pfnFree" << std::endl;
    // pointer
    if (t.pfnFree != nullptr) {
      os << "value: *t.pfnFree" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pfnInternalAllocation" << std::endl;
    // pointer
    if (t.pfnInternalAllocation != nullptr) {
      os << "value: *t.pfnInternalAllocation" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pfnInternalFree" << std::endl;
    // pointer
    if (t.pfnInternalFree != nullptr) {
      os << "value: *t.pfnInternalFree" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkApplicationInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pApplicationName" << std::endl;
    // pApplicationName -> Field -> string
    os << "value: " << t.pApplicationName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  applicationVersion" << std::endl;
    // applicationVersion -> Field -> uint32_t
    os << "value: " << t.applicationVersion << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pEngineName" << std::endl;
    // pEngineName -> Field -> string
    os << "value: " << t.pEngineName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  engineVersion" << std::endl;
    // engineVersion -> Field -> uint32_t
    os << "value: " << t.engineVersion << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  apiVersion" << std::endl;
    // apiVersion -> Field -> uint32_t
    os << "value: " << t.apiVersion << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkFormatProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  linearTilingFeatures" << std::endl;
    // linearTilingFeatures -> Field -> VkFormatFeatureFlags
    os << "value: " << t.linearTilingFeatures << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  optimalTilingFeatures" << std::endl;
    // optimalTilingFeatures -> Field -> VkFormatFeatureFlags
    os << "value: " << t.optimalTilingFeatures << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferFeatures" << std::endl;
    // bufferFeatures -> Field -> VkFormatFeatureFlags
    os << "value: " << t.bufferFeatures << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageFormatProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxExtent" << std::endl;
    // maxExtent -> Field -> VkExtent3D
    os <<  "members:" << std::endl << t.maxExtent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMipLevels" << std::endl;
    // maxMipLevels -> Field -> uint32_t
    os << "value: " << t.maxMipLevels << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxArrayLayers" << std::endl;
    // maxArrayLayers -> Field -> uint32_t
    os << "value: " << t.maxArrayLayers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleCounts" << std::endl;
    // sampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.sampleCounts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxResourceSize" << std::endl;
    // maxResourceSize -> Field -> VkDeviceSize
    os << "value: " << t.maxResourceSize << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkInstanceCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkInstanceCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pApplicationInfo" << std::endl;
    // pointer
    if (t.pApplicationInfo != nullptr) {
      os <<  "members:" << std::endl << *t.pApplicationInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  enabledLayerCount" << std::endl;
    // enabledLayerCount -> Field -> uint32_t
    os << "value: " << t.enabledLayerCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ppEnabledLayerNames" << std::endl;
    // ppEnabledLayerNames -> Field -> ConstDynamicArray(char)
    os << "value: " << t.ppEnabledLayerNames << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  enabledExtensionCount" << std::endl;
    // enabledExtensionCount -> Field -> uint32_t
    os << "value: " << t.enabledExtensionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ppEnabledExtensionNames" << std::endl;
    // ppEnabledExtensionNames -> Field -> ConstDynamicArray(char)
    os << "value: " << t.ppEnabledExtensionNames << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMemoryHeap &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkMemoryHeapFlags
    os << "value: " << t.flags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMemoryType &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  propertyFlags" << std::endl;
    // propertyFlags -> Field -> VkMemoryPropertyFlags
    os << "value: " << t.propertyFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  heapIndex" << std::endl;
    // heapIndex -> Field -> uint32_t
    os << "value: " << t.heapIndex << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  robustBufferAccess" << std::endl;
    // robustBufferAccess -> Field -> VkBool32
    os << "value: " << t.robustBufferAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fullDrawIndexUint32" << std::endl;
    // fullDrawIndexUint32 -> Field -> VkBool32
    os << "value: " << t.fullDrawIndexUint32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageCubeArray" << std::endl;
    // imageCubeArray -> Field -> VkBool32
    os << "value: " << t.imageCubeArray << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  independentBlend" << std::endl;
    // independentBlend -> Field -> VkBool32
    os << "value: " << t.independentBlend << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  geometryShader" << std::endl;
    // geometryShader -> Field -> VkBool32
    os << "value: " << t.geometryShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tessellationShader" << std::endl;
    // tessellationShader -> Field -> VkBool32
    os << "value: " << t.tessellationShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleRateShading" << std::endl;
    // sampleRateShading -> Field -> VkBool32
    os << "value: " << t.sampleRateShading << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dualSrcBlend" << std::endl;
    // dualSrcBlend -> Field -> VkBool32
    os << "value: " << t.dualSrcBlend << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  logicOp" << std::endl;
    // logicOp -> Field -> VkBool32
    os << "value: " << t.logicOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multiDrawIndirect" << std::endl;
    // multiDrawIndirect -> Field -> VkBool32
    os << "value: " << t.multiDrawIndirect << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drawIndirectFirstInstance" << std::endl;
    // drawIndirectFirstInstance -> Field -> VkBool32
    os << "value: " << t.drawIndirectFirstInstance << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthClamp" << std::endl;
    // depthClamp -> Field -> VkBool32
    os << "value: " << t.depthClamp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasClamp" << std::endl;
    // depthBiasClamp -> Field -> VkBool32
    os << "value: " << t.depthBiasClamp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fillModeNonSolid" << std::endl;
    // fillModeNonSolid -> Field -> VkBool32
    os << "value: " << t.fillModeNonSolid << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBounds" << std::endl;
    // depthBounds -> Field -> VkBool32
    os << "value: " << t.depthBounds << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  wideLines" << std::endl;
    // wideLines -> Field -> VkBool32
    os << "value: " << t.wideLines << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  largePoints" << std::endl;
    // largePoints -> Field -> VkBool32
    os << "value: " << t.largePoints << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  alphaToOne" << std::endl;
    // alphaToOne -> Field -> VkBool32
    os << "value: " << t.alphaToOne << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multiViewport" << std::endl;
    // multiViewport -> Field -> VkBool32
    os << "value: " << t.multiViewport << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samplerAnisotropy" << std::endl;
    // samplerAnisotropy -> Field -> VkBool32
    os << "value: " << t.samplerAnisotropy << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  textureCompressionETC2" << std::endl;
    // textureCompressionETC2 -> Field -> VkBool32
    os << "value: " << t.textureCompressionETC2 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  textureCompressionASTC_LDR" << std::endl;
    // textureCompressionASTC_LDR -> Field -> VkBool32
    os << "value: " << t.textureCompressionASTC_LDR << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  textureCompressionBC" << std::endl;
    // textureCompressionBC -> Field -> VkBool32
    os << "value: " << t.textureCompressionBC << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  occlusionQueryPrecise" << std::endl;
    // occlusionQueryPrecise -> Field -> VkBool32
    os << "value: " << t.occlusionQueryPrecise << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineStatisticsQuery" << std::endl;
    // pipelineStatisticsQuery -> Field -> VkBool32
    os << "value: " << t.pipelineStatisticsQuery << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexPipelineStoresAndAtomics" << std::endl;
    // vertexPipelineStoresAndAtomics -> Field -> VkBool32
    os << "value: " << t.vertexPipelineStoresAndAtomics << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentStoresAndAtomics" << std::endl;
    // fragmentStoresAndAtomics -> Field -> VkBool32
    os << "value: " << t.fragmentStoresAndAtomics << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderTessellationAndGeometryPointSize" << std::endl;
    // shaderTessellationAndGeometryPointSize -> Field -> VkBool32
    os << "value: " << t.shaderTessellationAndGeometryPointSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderImageGatherExtended" << std::endl;
    // shaderImageGatherExtended -> Field -> VkBool32
    os << "value: " << t.shaderImageGatherExtended << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageImageExtendedFormats" << std::endl;
    // shaderStorageImageExtendedFormats -> Field -> VkBool32
    os << "value: " << t.shaderStorageImageExtendedFormats << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageImageMultisample" << std::endl;
    // shaderStorageImageMultisample -> Field -> VkBool32
    os << "value: " << t.shaderStorageImageMultisample << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageImageReadWithoutFormat" << std::endl;
    // shaderStorageImageReadWithoutFormat -> Field -> VkBool32
    os << "value: " << t.shaderStorageImageReadWithoutFormat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageImageWriteWithoutFormat" << std::endl;
    // shaderStorageImageWriteWithoutFormat -> Field -> VkBool32
    os << "value: " << t.shaderStorageImageWriteWithoutFormat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderUniformBufferArrayDynamicIndexing" << std::endl;
    // shaderUniformBufferArrayDynamicIndexing -> Field -> VkBool32
    os << "value: " << t.shaderUniformBufferArrayDynamicIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSampledImageArrayDynamicIndexing" << std::endl;
    // shaderSampledImageArrayDynamicIndexing -> Field -> VkBool32
    os << "value: " << t.shaderSampledImageArrayDynamicIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageBufferArrayDynamicIndexing" << std::endl;
    // shaderStorageBufferArrayDynamicIndexing -> Field -> VkBool32
    os << "value: " << t.shaderStorageBufferArrayDynamicIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageImageArrayDynamicIndexing" << std::endl;
    // shaderStorageImageArrayDynamicIndexing -> Field -> VkBool32
    os << "value: " << t.shaderStorageImageArrayDynamicIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderClipDistance" << std::endl;
    // shaderClipDistance -> Field -> VkBool32
    os << "value: " << t.shaderClipDistance << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderCullDistance" << std::endl;
    // shaderCullDistance -> Field -> VkBool32
    os << "value: " << t.shaderCullDistance << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderFloat64" << std::endl;
    // shaderFloat64 -> Field -> VkBool32
    os << "value: " << t.shaderFloat64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderInt64" << std::endl;
    // shaderInt64 -> Field -> VkBool32
    os << "value: " << t.shaderInt64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderInt16" << std::endl;
    // shaderInt16 -> Field -> VkBool32
    os << "value: " << t.shaderInt16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderResourceResidency" << std::endl;
    // shaderResourceResidency -> Field -> VkBool32
    os << "value: " << t.shaderResourceResidency << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderResourceMinLod" << std::endl;
    // shaderResourceMinLod -> Field -> VkBool32
    os << "value: " << t.shaderResourceMinLod << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseBinding" << std::endl;
    // sparseBinding -> Field -> VkBool32
    os << "value: " << t.sparseBinding << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseResidencyBuffer" << std::endl;
    // sparseResidencyBuffer -> Field -> VkBool32
    os << "value: " << t.sparseResidencyBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseResidencyImage2D" << std::endl;
    // sparseResidencyImage2D -> Field -> VkBool32
    os << "value: " << t.sparseResidencyImage2D << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseResidencyImage3D" << std::endl;
    // sparseResidencyImage3D -> Field -> VkBool32
    os << "value: " << t.sparseResidencyImage3D << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseResidency2Samples" << std::endl;
    // sparseResidency2Samples -> Field -> VkBool32
    os << "value: " << t.sparseResidency2Samples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseResidency4Samples" << std::endl;
    // sparseResidency4Samples -> Field -> VkBool32
    os << "value: " << t.sparseResidency4Samples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseResidency8Samples" << std::endl;
    // sparseResidency8Samples -> Field -> VkBool32
    os << "value: " << t.sparseResidency8Samples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseResidency16Samples" << std::endl;
    // sparseResidency16Samples -> Field -> VkBool32
    os << "value: " << t.sparseResidency16Samples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseResidencyAliased" << std::endl;
    // sparseResidencyAliased -> Field -> VkBool32
    os << "value: " << t.sparseResidencyAliased << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  variableMultisampleRate" << std::endl;
    // variableMultisampleRate -> Field -> VkBool32
    os << "value: " << t.variableMultisampleRate << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  inheritedQueries" << std::endl;
    // inheritedQueries -> Field -> VkBool32
    os << "value: " << t.inheritedQueries << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceLimits &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxImageDimension1D" << std::endl;
    // maxImageDimension1D -> Field -> uint32_t
    os << "value: " << t.maxImageDimension1D << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxImageDimension2D" << std::endl;
    // maxImageDimension2D -> Field -> uint32_t
    os << "value: " << t.maxImageDimension2D << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxImageDimension3D" << std::endl;
    // maxImageDimension3D -> Field -> uint32_t
    os << "value: " << t.maxImageDimension3D << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxImageDimensionCube" << std::endl;
    // maxImageDimensionCube -> Field -> uint32_t
    os << "value: " << t.maxImageDimensionCube << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxImageArrayLayers" << std::endl;
    // maxImageArrayLayers -> Field -> uint32_t
    os << "value: " << t.maxImageArrayLayers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTexelBufferElements" << std::endl;
    // maxTexelBufferElements -> Field -> uint32_t
    os << "value: " << t.maxTexelBufferElements << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxUniformBufferRange" << std::endl;
    // maxUniformBufferRange -> Field -> uint32_t
    os << "value: " << t.maxUniformBufferRange << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxStorageBufferRange" << std::endl;
    // maxStorageBufferRange -> Field -> uint32_t
    os << "value: " << t.maxStorageBufferRange << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPushConstantsSize" << std::endl;
    // maxPushConstantsSize -> Field -> uint32_t
    os << "value: " << t.maxPushConstantsSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMemoryAllocationCount" << std::endl;
    // maxMemoryAllocationCount -> Field -> uint32_t
    os << "value: " << t.maxMemoryAllocationCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSamplerAllocationCount" << std::endl;
    // maxSamplerAllocationCount -> Field -> uint32_t
    os << "value: " << t.maxSamplerAllocationCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferImageGranularity" << std::endl;
    // bufferImageGranularity -> Field -> VkDeviceSize
    os << "value: " << t.bufferImageGranularity << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseAddressSpaceSize" << std::endl;
    // sparseAddressSpaceSize -> Field -> VkDeviceSize
    os << "value: " << t.sparseAddressSpaceSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxBoundDescriptorSets" << std::endl;
    // maxBoundDescriptorSets -> Field -> uint32_t
    os << "value: " << t.maxBoundDescriptorSets << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorSamplers" << std::endl;
    // maxPerStageDescriptorSamplers -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorSamplers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUniformBuffers" << std::endl;
    // maxPerStageDescriptorUniformBuffers -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUniformBuffers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorStorageBuffers" << std::endl;
    // maxPerStageDescriptorStorageBuffers -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorStorageBuffers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorSampledImages" << std::endl;
    // maxPerStageDescriptorSampledImages -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorSampledImages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorStorageImages" << std::endl;
    // maxPerStageDescriptorStorageImages -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorStorageImages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorInputAttachments" << std::endl;
    // maxPerStageDescriptorInputAttachments -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorInputAttachments << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageResources" << std::endl;
    // maxPerStageResources -> Field -> uint32_t
    os << "value: " << t.maxPerStageResources << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetSamplers" << std::endl;
    // maxDescriptorSetSamplers -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetSamplers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUniformBuffers" << std::endl;
    // maxDescriptorSetUniformBuffers -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUniformBuffers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUniformBuffersDynamic" << std::endl;
    // maxDescriptorSetUniformBuffersDynamic -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUniformBuffersDynamic << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetStorageBuffers" << std::endl;
    // maxDescriptorSetStorageBuffers -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetStorageBuffers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetStorageBuffersDynamic" << std::endl;
    // maxDescriptorSetStorageBuffersDynamic -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetStorageBuffersDynamic << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetSampledImages" << std::endl;
    // maxDescriptorSetSampledImages -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetSampledImages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetStorageImages" << std::endl;
    // maxDescriptorSetStorageImages -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetStorageImages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetInputAttachments" << std::endl;
    // maxDescriptorSetInputAttachments -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetInputAttachments << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxVertexInputAttributes" << std::endl;
    // maxVertexInputAttributes -> Field -> uint32_t
    os << "value: " << t.maxVertexInputAttributes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxVertexInputBindings" << std::endl;
    // maxVertexInputBindings -> Field -> uint32_t
    os << "value: " << t.maxVertexInputBindings << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxVertexInputAttributeOffset" << std::endl;
    // maxVertexInputAttributeOffset -> Field -> uint32_t
    os << "value: " << t.maxVertexInputAttributeOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxVertexInputBindingStride" << std::endl;
    // maxVertexInputBindingStride -> Field -> uint32_t
    os << "value: " << t.maxVertexInputBindingStride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxVertexOutputComponents" << std::endl;
    // maxVertexOutputComponents -> Field -> uint32_t
    os << "value: " << t.maxVertexOutputComponents << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTessellationGenerationLevel" << std::endl;
    // maxTessellationGenerationLevel -> Field -> uint32_t
    os << "value: " << t.maxTessellationGenerationLevel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTessellationPatchSize" << std::endl;
    // maxTessellationPatchSize -> Field -> uint32_t
    os << "value: " << t.maxTessellationPatchSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTessellationControlPerVertexInputComponents" << std::endl;
    // maxTessellationControlPerVertexInputComponents -> Field -> uint32_t
    os << "value: " << t.maxTessellationControlPerVertexInputComponents << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTessellationControlPerVertexOutputComponents" << std::endl;
    // maxTessellationControlPerVertexOutputComponents -> Field -> uint32_t
    os << "value: " << t.maxTessellationControlPerVertexOutputComponents << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTessellationControlPerPatchOutputComponents" << std::endl;
    // maxTessellationControlPerPatchOutputComponents -> Field -> uint32_t
    os << "value: " << t.maxTessellationControlPerPatchOutputComponents << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTessellationControlTotalOutputComponents" << std::endl;
    // maxTessellationControlTotalOutputComponents -> Field -> uint32_t
    os << "value: " << t.maxTessellationControlTotalOutputComponents << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTessellationEvaluationInputComponents" << std::endl;
    // maxTessellationEvaluationInputComponents -> Field -> uint32_t
    os << "value: " << t.maxTessellationEvaluationInputComponents << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTessellationEvaluationOutputComponents" << std::endl;
    // maxTessellationEvaluationOutputComponents -> Field -> uint32_t
    os << "value: " << t.maxTessellationEvaluationOutputComponents << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxGeometryShaderInvocations" << std::endl;
    // maxGeometryShaderInvocations -> Field -> uint32_t
    os << "value: " << t.maxGeometryShaderInvocations << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxGeometryInputComponents" << std::endl;
    // maxGeometryInputComponents -> Field -> uint32_t
    os << "value: " << t.maxGeometryInputComponents << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxGeometryOutputComponents" << std::endl;
    // maxGeometryOutputComponents -> Field -> uint32_t
    os << "value: " << t.maxGeometryOutputComponents << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxGeometryOutputVertices" << std::endl;
    // maxGeometryOutputVertices -> Field -> uint32_t
    os << "value: " << t.maxGeometryOutputVertices << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxGeometryTotalOutputComponents" << std::endl;
    // maxGeometryTotalOutputComponents -> Field -> uint32_t
    os << "value: " << t.maxGeometryTotalOutputComponents << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFragmentInputComponents" << std::endl;
    // maxFragmentInputComponents -> Field -> uint32_t
    os << "value: " << t.maxFragmentInputComponents << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFragmentOutputAttachments" << std::endl;
    // maxFragmentOutputAttachments -> Field -> uint32_t
    os << "value: " << t.maxFragmentOutputAttachments << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFragmentDualSrcAttachments" << std::endl;
    // maxFragmentDualSrcAttachments -> Field -> uint32_t
    os << "value: " << t.maxFragmentDualSrcAttachments << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFragmentCombinedOutputResources" << std::endl;
    // maxFragmentCombinedOutputResources -> Field -> uint32_t
    os << "value: " << t.maxFragmentCombinedOutputResources << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxComputeSharedMemorySize" << std::endl;
    // maxComputeSharedMemorySize -> Field -> uint32_t
    os << "value: " << t.maxComputeSharedMemorySize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxComputeWorkGroupCount" << std::endl;
    // maxComputeWorkGroupCount -> Field -> FixedArray(uint32_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < 3; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.maxComputeWorkGroupCount << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxComputeWorkGroupInvocations" << std::endl;
    // maxComputeWorkGroupInvocations -> Field -> uint32_t
    os << "value: " << t.maxComputeWorkGroupInvocations << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxComputeWorkGroupSize" << std::endl;
    // maxComputeWorkGroupSize -> Field -> FixedArray(uint32_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < 3; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.maxComputeWorkGroupSize << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subPixelPrecisionBits" << std::endl;
    // subPixelPrecisionBits -> Field -> uint32_t
    os << "value: " << t.subPixelPrecisionBits << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subTexelPrecisionBits" << std::endl;
    // subTexelPrecisionBits -> Field -> uint32_t
    os << "value: " << t.subTexelPrecisionBits << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mipmapPrecisionBits" << std::endl;
    // mipmapPrecisionBits -> Field -> uint32_t
    os << "value: " << t.mipmapPrecisionBits << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDrawIndexedIndexValue" << std::endl;
    // maxDrawIndexedIndexValue -> Field -> uint32_t
    os << "value: " << t.maxDrawIndexedIndexValue << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDrawIndirectCount" << std::endl;
    // maxDrawIndirectCount -> Field -> uint32_t
    os << "value: " << t.maxDrawIndirectCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSamplerLodBias" << std::endl;
    // maxSamplerLodBias -> Field -> float
    os << "value: " << t.maxSamplerLodBias << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSamplerAnisotropy" << std::endl;
    // maxSamplerAnisotropy -> Field -> float
    os << "value: " << t.maxSamplerAnisotropy << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxViewports" << std::endl;
    // maxViewports -> Field -> uint32_t
    os << "value: " << t.maxViewports << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxViewportDimensions" << std::endl;
    // maxViewportDimensions -> Field -> FixedArray(uint32_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < 2; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.maxViewportDimensions << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewportBoundsRange" << std::endl;
    // viewportBoundsRange -> Field -> FixedArray(float)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # float" << std::endl;
        for (uint64_t i = 0; i < 2; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.viewportBoundsRange << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewportSubPixelBits" << std::endl;
    // viewportSubPixelBits -> Field -> uint32_t
    os << "value: " << t.viewportSubPixelBits << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minMemoryMapAlignment" << std::endl;
    // minMemoryMapAlignment -> Field -> size_t
    os << "value: " << t.minMemoryMapAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minTexelBufferOffsetAlignment" << std::endl;
    // minTexelBufferOffsetAlignment -> Field -> VkDeviceSize
    os << "value: " << t.minTexelBufferOffsetAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minUniformBufferOffsetAlignment" << std::endl;
    // minUniformBufferOffsetAlignment -> Field -> VkDeviceSize
    os << "value: " << t.minUniformBufferOffsetAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minStorageBufferOffsetAlignment" << std::endl;
    // minStorageBufferOffsetAlignment -> Field -> VkDeviceSize
    os << "value: " << t.minStorageBufferOffsetAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minTexelOffset" << std::endl;
    // minTexelOffset -> Field -> int32_t
    os << "value: " << t.minTexelOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTexelOffset" << std::endl;
    // maxTexelOffset -> Field -> uint32_t
    os << "value: " << t.maxTexelOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minTexelGatherOffset" << std::endl;
    // minTexelGatherOffset -> Field -> int32_t
    os << "value: " << t.minTexelGatherOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTexelGatherOffset" << std::endl;
    // maxTexelGatherOffset -> Field -> uint32_t
    os << "value: " << t.maxTexelGatherOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minInterpolationOffset" << std::endl;
    // minInterpolationOffset -> Field -> float
    os << "value: " << t.minInterpolationOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxInterpolationOffset" << std::endl;
    // maxInterpolationOffset -> Field -> float
    os << "value: " << t.maxInterpolationOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subPixelInterpolationOffsetBits" << std::endl;
    // subPixelInterpolationOffsetBits -> Field -> uint32_t
    os << "value: " << t.subPixelInterpolationOffsetBits << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFramebufferWidth" << std::endl;
    // maxFramebufferWidth -> Field -> uint32_t
    os << "value: " << t.maxFramebufferWidth << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFramebufferHeight" << std::endl;
    // maxFramebufferHeight -> Field -> uint32_t
    os << "value: " << t.maxFramebufferHeight << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFramebufferLayers" << std::endl;
    // maxFramebufferLayers -> Field -> uint32_t
    os << "value: " << t.maxFramebufferLayers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  framebufferColorSampleCounts" << std::endl;
    // framebufferColorSampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.framebufferColorSampleCounts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  framebufferDepthSampleCounts" << std::endl;
    // framebufferDepthSampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.framebufferDepthSampleCounts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  framebufferStencilSampleCounts" << std::endl;
    // framebufferStencilSampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.framebufferStencilSampleCounts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  framebufferNoAttachmentsSampleCounts" << std::endl;
    // framebufferNoAttachmentsSampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.framebufferNoAttachmentsSampleCounts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxColorAttachments" << std::endl;
    // maxColorAttachments -> Field -> uint32_t
    os << "value: " << t.maxColorAttachments << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampledImageColorSampleCounts" << std::endl;
    // sampledImageColorSampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.sampledImageColorSampleCounts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampledImageIntegerSampleCounts" << std::endl;
    // sampledImageIntegerSampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.sampledImageIntegerSampleCounts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampledImageDepthSampleCounts" << std::endl;
    // sampledImageDepthSampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.sampledImageDepthSampleCounts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampledImageStencilSampleCounts" << std::endl;
    // sampledImageStencilSampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.sampledImageStencilSampleCounts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storageImageSampleCounts" << std::endl;
    // storageImageSampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.storageImageSampleCounts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSampleMaskWords" << std::endl;
    // maxSampleMaskWords -> Field -> uint32_t
    os << "value: " << t.maxSampleMaskWords << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  timestampComputeAndGraphics" << std::endl;
    // timestampComputeAndGraphics -> Field -> VkBool32
    os << "value: " << t.timestampComputeAndGraphics << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  timestampPeriod" << std::endl;
    // timestampPeriod -> Field -> float
    os << "value: " << t.timestampPeriod << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxClipDistances" << std::endl;
    // maxClipDistances -> Field -> uint32_t
    os << "value: " << t.maxClipDistances << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxCullDistances" << std::endl;
    // maxCullDistances -> Field -> uint32_t
    os << "value: " << t.maxCullDistances << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxCombinedClipAndCullDistances" << std::endl;
    // maxCombinedClipAndCullDistances -> Field -> uint32_t
    os << "value: " << t.maxCombinedClipAndCullDistances << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  discreteQueuePriorities" << std::endl;
    // discreteQueuePriorities -> Field -> uint32_t
    os << "value: " << t.discreteQueuePriorities << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pointSizeRange" << std::endl;
    // pointSizeRange -> Field -> FixedArray(float)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # float" << std::endl;
        for (uint64_t i = 0; i < 2; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pointSizeRange << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  lineWidthRange" << std::endl;
    // lineWidthRange -> Field -> FixedArray(float)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # float" << std::endl;
        for (uint64_t i = 0; i < 2; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.lineWidthRange << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pointSizeGranularity" << std::endl;
    // pointSizeGranularity -> Field -> float
    os << "value: " << t.pointSizeGranularity << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  lineWidthGranularity" << std::endl;
    // lineWidthGranularity -> Field -> float
    os << "value: " << t.lineWidthGranularity << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  strictLines" << std::endl;
    // strictLines -> Field -> VkBool32
    os << "value: " << t.strictLines << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  standardSampleLocations" << std::endl;
    // standardSampleLocations -> Field -> VkBool32
    os << "value: " << t.standardSampleLocations << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  optimalBufferCopyOffsetAlignment" << std::endl;
    // optimalBufferCopyOffsetAlignment -> Field -> VkDeviceSize
    os << "value: " << t.optimalBufferCopyOffsetAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  optimalBufferCopyRowPitchAlignment" << std::endl;
    // optimalBufferCopyRowPitchAlignment -> Field -> VkDeviceSize
    os << "value: " << t.optimalBufferCopyRowPitchAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  nonCoherentAtomSize" << std::endl;
    // nonCoherentAtomSize -> Field -> VkDeviceSize
    os << "value: " << t.nonCoherentAtomSize << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceMemoryProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryTypeCount" << std::endl;
    // memoryTypeCount -> Field -> uint32_t
    os << "value: " << t.memoryTypeCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryTypes" << std::endl;
    // memoryTypes -> Field -> FixedArray(VkMemoryType)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkMemoryType" << std::endl;
        for (uint64_t i = 0; i < VK_MAX_MEMORY_TYPES; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.memoryTypes << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryHeapCount" << std::endl;
    // memoryHeapCount -> Field -> uint32_t
    os << "value: " << t.memoryHeapCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryHeaps" << std::endl;
    // memoryHeaps -> Field -> FixedArray(VkMemoryHeap)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkMemoryHeap" << std::endl;
        for (uint64_t i = 0; i < VK_MAX_MEMORY_HEAPS; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.memoryHeaps << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceSparseProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  residencyStandard2DBlockShape" << std::endl;
    // residencyStandard2DBlockShape -> Field -> VkBool32
    os << "value: " << t.residencyStandard2DBlockShape << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  residencyStandard2DMultisampleBlockShape" << std::endl;
    // residencyStandard2DMultisampleBlockShape -> Field -> VkBool32
    os << "value: " << t.residencyStandard2DMultisampleBlockShape << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  residencyStandard3DBlockShape" << std::endl;
    // residencyStandard3DBlockShape -> Field -> VkBool32
    os << "value: " << t.residencyStandard3DBlockShape << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  residencyAlignedMipSize" << std::endl;
    // residencyAlignedMipSize -> Field -> VkBool32
    os << "value: " << t.residencyAlignedMipSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  residencyNonResidentStrict" << std::endl;
    // residencyNonResidentStrict -> Field -> VkBool32
    os << "value: " << t.residencyNonResidentStrict << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  apiVersion" << std::endl;
    // apiVersion -> Field -> uint32_t
    os << "value: " << t.apiVersion << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  driverVersion" << std::endl;
    // driverVersion -> Field -> uint32_t
    os << "value: " << t.driverVersion << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vendorID" << std::endl;
    // vendorID -> Field -> uint32_t
    os << "value: " << t.vendorID << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceID" << std::endl;
    // deviceID -> Field -> uint32_t
    os << "value: " << t.deviceID << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceType" << std::endl;
    // deviceType -> Field -> VkPhysicalDeviceType
    os << "value: " << t.deviceType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceName" << std::endl;
    // deviceName -> Field -> FixedArray(char)
    os << "value: " << t.deviceName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineCacheUUID" << std::endl;
    // pipelineCacheUUID -> Field -> FixedArray(uint8_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint8_t" << std::endl;
        for (uint64_t i = 0; i < VK_UUID_SIZE; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pipelineCacheUUID << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  limits" << std::endl;
    // limits -> Field -> VkPhysicalDeviceLimits
    os <<  "members:" << std::endl << t.limits << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseProperties" << std::endl;
    // sparseProperties -> Field -> VkPhysicalDeviceSparseProperties
    os <<  "members:" << std::endl << t.sparseProperties << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkQueueFamilyProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueFlags" << std::endl;
    // queueFlags -> Field -> VkQueueFlags
    os << "value: " << t.queueFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueCount" << std::endl;
    // queueCount -> Field -> uint32_t
    os << "value: " << t.queueCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  timestampValidBits" << std::endl;
    // timestampValidBits -> Field -> uint32_t
    os << "value: " << t.timestampValidBits << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minImageTransferGranularity" << std::endl;
    // minImageTransferGranularity -> Field -> VkExtent3D
    os <<  "members:" << std::endl << t.minImageTransferGranularity << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceQueueCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDeviceQueueCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueFamilyIndex" << std::endl;
    // queueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.queueFamilyIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueCount" << std::endl;
    // queueCount -> Field -> uint32_t
    os << "value: " << t.queueCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pQueuePriorities" << std::endl;
    // pQueuePriorities -> Field -> ConstDynamicArray(float)
    if (t.queueCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # float" << std::endl;
        for (uint64_t i = 0; i < t.queueCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pQueuePriorities << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDeviceCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueCreateInfoCount" << std::endl;
    // queueCreateInfoCount -> Field -> uint32_t
    os << "value: " << t.queueCreateInfoCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pQueueCreateInfos" << std::endl;
    // pQueueCreateInfos -> Field -> ConstDynamicArray(VkDeviceQueueCreateInfo)
    if (t.queueCreateInfoCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDeviceQueueCreateInfo" << std::endl;
        for (uint64_t i = 0; i < t.queueCreateInfoCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pQueueCreateInfos << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  enabledLayerCount" << std::endl;
    // enabledLayerCount -> Field -> uint32_t
    os << "value: " << t.enabledLayerCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ppEnabledLayerNames" << std::endl;
    // ppEnabledLayerNames -> Field -> ConstDynamicArray(char)
    os << "value: " << t.ppEnabledLayerNames << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  enabledExtensionCount" << std::endl;
    // enabledExtensionCount -> Field -> uint32_t
    os << "value: " << t.enabledExtensionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ppEnabledExtensionNames" << std::endl;
    // ppEnabledExtensionNames -> Field -> ConstDynamicArray(char)
    os << "value: " << t.ppEnabledExtensionNames << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pEnabledFeatures" << std::endl;
    // pointer
    if (t.pEnabledFeatures != nullptr) {
      os <<  "members:" << std::endl << *t.pEnabledFeatures << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkExtensionProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extensionName" << std::endl;
    // extensionName -> Field -> FixedArray(char)
    os << "value: " << t.extensionName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  specVersion" << std::endl;
    // specVersion -> Field -> uint32_t
    os << "value: " << t.specVersion << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkLayerProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layerName" << std::endl;
    // layerName -> Field -> FixedArray(char)
    os << "value: " << t.layerName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  specVersion" << std::endl;
    // specVersion -> Field -> uint32_t
    os << "value: " << t.specVersion << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  implementationVersion" << std::endl;
    // implementationVersion -> Field -> uint32_t
    os << "value: " << t.implementationVersion << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  description" << std::endl;
    // description -> Field -> FixedArray(char)
    os << "value: " << t.description << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSubmitInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  waitSemaphoreCount" << std::endl;
    // waitSemaphoreCount -> Field -> uint32_t
    os << "value: " << t.waitSemaphoreCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pWaitSemaphores" << std::endl;
    // pWaitSemaphores -> Field -> ConstDynamicArray(VkSemaphore)
    if (t.waitSemaphoreCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSemaphore" << std::endl;
        for (uint64_t i = 0; i < t.waitSemaphoreCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pWaitSemaphores << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pWaitDstStageMask" << std::endl;
    // pWaitDstStageMask -> Field -> ConstDynamicArray(VkPipelineStageFlags)
    if (t.waitSemaphoreCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkPipelineStageFlags" << std::endl;
        for (uint64_t i = 0; i < t.waitSemaphoreCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pWaitDstStageMask << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBufferCount" << std::endl;
    // commandBufferCount -> Field -> uint32_t
    os << "value: " << t.commandBufferCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCommandBuffers" << std::endl;
    // pCommandBuffers -> Field -> ConstDynamicArray(VkCommandBuffer)
    if (t.commandBufferCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkCommandBuffer" << std::endl;
        for (uint64_t i = 0; i < t.commandBufferCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pCommandBuffers << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  signalSemaphoreCount" << std::endl;
    // signalSemaphoreCount -> Field -> uint32_t
    os << "value: " << t.signalSemaphoreCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSignalSemaphores" << std::endl;
    // pSignalSemaphores -> Field -> ConstDynamicArray(VkSemaphore)
    if (t.signalSemaphoreCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSemaphore" << std::endl;
        for (uint64_t i = 0; i < t.signalSemaphoreCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pSignalSemaphores << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMappedMemoryRange &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memory" << std::endl;
    // memory -> Field -> VkDeviceMemory
    os << "value: " << t.memory << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMemoryAllocateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  allocationSize" << std::endl;
    // allocationSize -> Field -> VkDeviceSize
    os << "value: " << t.allocationSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryTypeIndex" << std::endl;
    // memoryTypeIndex -> Field -> uint32_t
    os << "value: " << t.memoryTypeIndex << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMemoryRequirements &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  alignment" << std::endl;
    // alignment -> Field -> VkDeviceSize
    os << "value: " << t.alignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryTypeBits" << std::endl;
    // memoryTypeBits -> Field -> uint32_t
    os << "value: " << t.memoryTypeBits << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSparseMemoryBind &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  resourceOffset" << std::endl;
    // resourceOffset -> Field -> VkDeviceSize
    os << "value: " << t.resourceOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memory" << std::endl;
    // memory -> Field -> VkDeviceMemory
    os << "value: " << t.memory << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryOffset" << std::endl;
    // memoryOffset -> Field -> VkDeviceSize
    os << "value: " << t.memoryOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkSparseMemoryBindFlags
    os << "value: " << t.flags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSparseBufferMemoryBindInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bindCount" << std::endl;
    // bindCount -> Field -> uint32_t
    os << "value: " << t.bindCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBinds" << std::endl;
    // pBinds -> Field -> ConstDynamicArray(VkSparseMemoryBind)
    if (t.bindCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSparseMemoryBind" << std::endl;
        for (uint64_t i = 0; i < t.bindCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pBinds << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSparseImageOpaqueMemoryBindInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << t.image << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bindCount" << std::endl;
    // bindCount -> Field -> uint32_t
    os << "value: " << t.bindCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBinds" << std::endl;
    // pBinds -> Field -> ConstDynamicArray(VkSparseMemoryBind)
    if (t.bindCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSparseMemoryBind" << std::endl;
        for (uint64_t i = 0; i < t.bindCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pBinds << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageSubresource &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  aspectMask" << std::endl;
    // aspectMask -> Field -> VkImageAspectFlags
    os << "value: " << t.aspectMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mipLevel" << std::endl;
    // mipLevel -> Field -> uint32_t
    os << "value: " << t.mipLevel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  arrayLayer" << std::endl;
    // arrayLayer -> Field -> uint32_t
    os << "value: " << t.arrayLayer << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSparseImageMemoryBind &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subresource" << std::endl;
    // subresource -> Field -> VkImageSubresource
    os <<  "members:" << std::endl << t.subresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkOffset3D
    os <<  "members:" << std::endl << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extent" << std::endl;
    // extent -> Field -> VkExtent3D
    os <<  "members:" << std::endl << t.extent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memory" << std::endl;
    // memory -> Field -> VkDeviceMemory
    os << "value: " << t.memory << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryOffset" << std::endl;
    // memoryOffset -> Field -> VkDeviceSize
    os << "value: " << t.memoryOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkSparseMemoryBindFlags
    os << "value: " << t.flags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSparseImageMemoryBindInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << t.image << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bindCount" << std::endl;
    // bindCount -> Field -> uint32_t
    os << "value: " << t.bindCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBinds" << std::endl;
    // pBinds -> Field -> ConstDynamicArray(VkSparseImageMemoryBind)
    if (t.bindCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSparseImageMemoryBind" << std::endl;
        for (uint64_t i = 0; i < t.bindCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pBinds << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBindSparseInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  waitSemaphoreCount" << std::endl;
    // waitSemaphoreCount -> Field -> uint32_t
    os << "value: " << t.waitSemaphoreCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pWaitSemaphores" << std::endl;
    // pWaitSemaphores -> Field -> ConstDynamicArray(VkSemaphore)
    if (t.waitSemaphoreCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSemaphore" << std::endl;
        for (uint64_t i = 0; i < t.waitSemaphoreCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pWaitSemaphores << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferBindCount" << std::endl;
    // bufferBindCount -> Field -> uint32_t
    os << "value: " << t.bufferBindCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBufferBinds" << std::endl;
    // pBufferBinds -> Field -> ConstDynamicArray(VkSparseBufferMemoryBindInfo)
    if (t.bufferBindCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSparseBufferMemoryBindInfo" << std::endl;
        for (uint64_t i = 0; i < t.bufferBindCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pBufferBinds << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageOpaqueBindCount" << std::endl;
    // imageOpaqueBindCount -> Field -> uint32_t
    os << "value: " << t.imageOpaqueBindCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pImageOpaqueBinds" << std::endl;
    // pImageOpaqueBinds -> Field -> ConstDynamicArray(VkSparseImageOpaqueMemoryBindInfo)
    if (t.imageOpaqueBindCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSparseImageOpaqueMemoryBindInfo" << std::endl;
        for (uint64_t i = 0; i < t.imageOpaqueBindCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pImageOpaqueBinds << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageBindCount" << std::endl;
    // imageBindCount -> Field -> uint32_t
    os << "value: " << t.imageBindCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pImageBinds" << std::endl;
    // pImageBinds -> Field -> ConstDynamicArray(VkSparseImageMemoryBindInfo)
    if (t.imageBindCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSparseImageMemoryBindInfo" << std::endl;
        for (uint64_t i = 0; i < t.imageBindCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pImageBinds << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  signalSemaphoreCount" << std::endl;
    // signalSemaphoreCount -> Field -> uint32_t
    os << "value: " << t.signalSemaphoreCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSignalSemaphores" << std::endl;
    // pSignalSemaphores -> Field -> ConstDynamicArray(VkSemaphore)
    if (t.signalSemaphoreCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSemaphore" << std::endl;
        for (uint64_t i = 0; i < t.signalSemaphoreCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pSignalSemaphores << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSparseImageFormatProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  aspectMask" << std::endl;
    // aspectMask -> Field -> VkImageAspectFlags
    os << "value: " << t.aspectMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageGranularity" << std::endl;
    // imageGranularity -> Field -> VkExtent3D
    os <<  "members:" << std::endl << t.imageGranularity << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkSparseImageFormatFlags
    os << "value: " << t.flags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSparseImageMemoryRequirements &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  formatProperties" << std::endl;
    // formatProperties -> Field -> VkSparseImageFormatProperties
    os <<  "members:" << std::endl << t.formatProperties << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageMipTailFirstLod" << std::endl;
    // imageMipTailFirstLod -> Field -> uint32_t
    os << "value: " << t.imageMipTailFirstLod << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageMipTailSize" << std::endl;
    // imageMipTailSize -> Field -> VkDeviceSize
    os << "value: " << t.imageMipTailSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageMipTailOffset" << std::endl;
    // imageMipTailOffset -> Field -> VkDeviceSize
    os << "value: " << t.imageMipTailOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageMipTailStride" << std::endl;
    // imageMipTailStride -> Field -> VkDeviceSize
    os << "value: " << t.imageMipTailStride << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkFenceCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkFenceCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSemaphoreCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkSemaphoreCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkEventCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkEventCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkQueryPoolCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkQueryPoolCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryType" << std::endl;
    // queryType -> Field -> VkQueryType
    os << "value: " << t.queryType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryCount" << std::endl;
    // queryCount -> Field -> uint32_t
    os << "value: " << t.queryCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineStatistics" << std::endl;
    // pipelineStatistics -> Field -> VkQueryPipelineStatisticFlags
    os << "value: " << t.pipelineStatistics << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBufferCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkBufferCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  usage" << std::endl;
    // usage -> Field -> VkBufferUsageFlags
    os << "value: " << t.usage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sharingMode" << std::endl;
    // sharingMode -> Field -> VkSharingMode
    os << "value: " << t.sharingMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueFamilyIndexCount" << std::endl;
    // queueFamilyIndexCount -> Field -> uint32_t
    os << "value: " << t.queueFamilyIndexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pQueueFamilyIndices" << std::endl;
    // pQueueFamilyIndices -> Field -> ConstDynamicArray(uint32_t)
    if (t.queueFamilyIndexCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.queueFamilyIndexCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pQueueFamilyIndices << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBufferViewCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkBufferViewCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  range" << std::endl;
    // range -> Field -> VkDeviceSize
    os << "value: " << t.range << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkImageCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageType" << std::endl;
    // imageType -> Field -> VkImageType
    os << "value: " << t.imageType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extent" << std::endl;
    // extent -> Field -> VkExtent3D
    os <<  "members:" << std::endl << t.extent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mipLevels" << std::endl;
    // mipLevels -> Field -> uint32_t
    os << "value: " << t.mipLevels << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  arrayLayers" << std::endl;
    // arrayLayers -> Field -> uint32_t
    os << "value: " << t.arrayLayers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samples" << std::endl;
    // samples -> Field -> VkSampleCountFlagBits
    os << "value: " << t.samples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tiling" << std::endl;
    // tiling -> Field -> VkImageTiling
    os << "value: " << t.tiling << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  usage" << std::endl;
    // usage -> Field -> VkImageUsageFlags
    os << "value: " << t.usage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sharingMode" << std::endl;
    // sharingMode -> Field -> VkSharingMode
    os << "value: " << t.sharingMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueFamilyIndexCount" << std::endl;
    // queueFamilyIndexCount -> Field -> uint32_t
    os << "value: " << t.queueFamilyIndexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pQueueFamilyIndices" << std::endl;
    // pQueueFamilyIndices -> Field -> ConstDynamicArray(uint32_t)
    if (t.queueFamilyIndexCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.queueFamilyIndexCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pQueueFamilyIndices << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  initialLayout" << std::endl;
    // initialLayout -> Field -> VkImageLayout
    os << "value: " << t.initialLayout << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSubresourceLayout &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rowPitch" << std::endl;
    // rowPitch -> Field -> VkDeviceSize
    os << "value: " << t.rowPitch << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  arrayPitch" << std::endl;
    // arrayPitch -> Field -> VkDeviceSize
    os << "value: " << t.arrayPitch << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthPitch" << std::endl;
    // depthPitch -> Field -> VkDeviceSize
    os << "value: " << t.depthPitch << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkComponentMapping &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  r" << std::endl;
    // r -> Field -> VkComponentSwizzle
    os << "value: " << t.r << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  g" << std::endl;
    // g -> Field -> VkComponentSwizzle
    os << "value: " << t.g << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  b" << std::endl;
    // b -> Field -> VkComponentSwizzle
    os << "value: " << t.b << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  a" << std::endl;
    // a -> Field -> VkComponentSwizzle
    os << "value: " << t.a << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageViewCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkImageViewCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << t.image << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewType" << std::endl;
    // viewType -> Field -> VkImageViewType
    os << "value: " << t.viewType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  components" << std::endl;
    // components -> Field -> VkComponentMapping
    os <<  "members:" << std::endl << t.components << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subresourceRange" << std::endl;
    // subresourceRange -> Field -> VkImageSubresourceRange
    os <<  "members:" << std::endl << t.subresourceRange << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkShaderModuleCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkShaderModuleCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  codeSize" << std::endl;
    // codeSize -> Field -> size_t
    os << "value: " << t.codeSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCode" << std::endl;
    // pCode -> Field -> ConstDynamicArray(uint32_t)
    if ((t.codeSize/4) == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < (t.codeSize/4); ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pCode << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineCacheCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineCacheCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  initialDataSize" << std::endl;
    // initialDataSize -> Field -> size_t
    os << "value: " << t.initialDataSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInitialData" << std::endl;
    if (t.initialDataSize == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << std::hex;
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        const uint8_t *p = (const uint8_t *)t.pInitialData;
        for (uint64_t i = 0; i < t.initialDataSize; ++i) {
          os << "- 0x" << p[i] << std::endl;
        }
      }
      os << std::dec;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSpecializationMapEntry &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  constantID" << std::endl;
    // constantID -> Field -> uint32_t
    os << "value: " << t.constantID << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> uint32_t
    os << "value: " << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> size_t
    os << "value: " << t.size << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSpecializationInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mapEntryCount" << std::endl;
    // mapEntryCount -> Field -> uint32_t
    os << "value: " << t.mapEntryCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMapEntries" << std::endl;
    // pMapEntries -> Field -> ConstDynamicArray(VkSpecializationMapEntry)
    if (t.mapEntryCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSpecializationMapEntry" << std::endl;
        for (uint64_t i = 0; i < t.mapEntryCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pMapEntries << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dataSize" << std::endl;
    // dataSize -> Field -> size_t
    os << "value: " << t.dataSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pData" << std::endl;
    if (t.dataSize == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << std::hex;
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        const uint8_t *p = (const uint8_t *)t.pData;
        for (uint64_t i = 0; i < t.dataSize; ++i) {
          os << "- 0x" << p[i] << std::endl;
        }
      }
      os << std::dec;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineShaderStageCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineShaderStageCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stage" << std::endl;
    // stage -> Field -> VkShaderStageFlagBits
    os << "value: " << t.stage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  module" << std::endl;
    // module -> Field -> VkShaderModule
    os << "value: " << t.module << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pName" << std::endl;
    // pName -> Field -> string
    os << "value: " << t.pName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSpecializationInfo" << std::endl;
    // pointer
    if (t.pSpecializationInfo != nullptr) {
      os <<  "members:" << std::endl << *t.pSpecializationInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkComputePipelineCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stage" << std::endl;
    // stage -> Field -> VkPipelineShaderStageCreateInfo
    os <<  "members:" << std::endl << t.stage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layout" << std::endl;
    // layout -> Field -> VkPipelineLayout
    os << "value: " << t.layout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  basePipelineHandle" << std::endl;
    // basePipelineHandle -> Field -> VkPipeline
    os << "value: " << t.basePipelineHandle << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  basePipelineIndex" << std::endl;
    // basePipelineIndex -> Field -> int32_t
    os << "value: " << t.basePipelineIndex << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVertexInputBindingDescription &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  binding" << std::endl;
    // binding -> Field -> uint32_t
    os << "value: " << t.binding << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << t.stride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  inputRate" << std::endl;
    // inputRate -> Field -> VkVertexInputRate
    os << "value: " << t.inputRate << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVertexInputAttributeDescription &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  location" << std::endl;
    // location -> Field -> uint32_t
    os << "value: " << t.location << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  binding" << std::endl;
    // binding -> Field -> uint32_t
    os << "value: " << t.binding << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> uint32_t
    os << "value: " << t.offset << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineVertexInputStateCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineVertexInputStateCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexBindingDescriptionCount" << std::endl;
    // vertexBindingDescriptionCount -> Field -> uint32_t
    os << "value: " << t.vertexBindingDescriptionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pVertexBindingDescriptions" << std::endl;
    // pVertexBindingDescriptions -> Field -> ConstDynamicArray(VkVertexInputBindingDescription)
    if (t.vertexBindingDescriptionCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkVertexInputBindingDescription" << std::endl;
        for (uint64_t i = 0; i < t.vertexBindingDescriptionCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pVertexBindingDescriptions << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexAttributeDescriptionCount" << std::endl;
    // vertexAttributeDescriptionCount -> Field -> uint32_t
    os << "value: " << t.vertexAttributeDescriptionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pVertexAttributeDescriptions" << std::endl;
    // pVertexAttributeDescriptions -> Field -> ConstDynamicArray(VkVertexInputAttributeDescription)
    if (t.vertexAttributeDescriptionCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkVertexInputAttributeDescription" << std::endl;
        for (uint64_t i = 0; i < t.vertexAttributeDescriptionCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pVertexAttributeDescriptions << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineInputAssemblyStateCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineInputAssemblyStateCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  topology" << std::endl;
    // topology -> Field -> VkPrimitiveTopology
    os << "value: " << t.topology << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primitiveRestartEnable" << std::endl;
    // primitiveRestartEnable -> Field -> VkBool32
    os << "value: " << t.primitiveRestartEnable << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineTessellationStateCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineTessellationStateCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  patchControlPoints" << std::endl;
    // patchControlPoints -> Field -> uint32_t
    os << "value: " << t.patchControlPoints << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkViewport &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  x" << std::endl;
    // x -> Field -> float
    os << "value: " << t.x << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  y" << std::endl;
    // y -> Field -> float
    os << "value: " << t.y << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  width" << std::endl;
    // width -> Field -> float
    os << "value: " << t.width << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  height" << std::endl;
    // height -> Field -> float
    os << "value: " << t.height << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minDepth" << std::endl;
    // minDepth -> Field -> float
    os << "value: " << t.minDepth << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDepth" << std::endl;
    // maxDepth -> Field -> float
    os << "value: " << t.maxDepth << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineViewportStateCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineViewportStateCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewportCount" << std::endl;
    // viewportCount -> Field -> uint32_t
    os << "value: " << t.viewportCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pViewports" << std::endl;
    // pViewports -> Field -> ConstDynamicArray(VkViewport)
    if (t.viewportCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkViewport" << std::endl;
        for (uint64_t i = 0; i < t.viewportCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pViewports << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  scissorCount" << std::endl;
    // scissorCount -> Field -> uint32_t
    os << "value: " << t.scissorCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pScissors" << std::endl;
    // pScissors -> Field -> ConstDynamicArray(VkRect2D)
    if (t.scissorCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkRect2D" << std::endl;
        for (uint64_t i = 0; i < t.scissorCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pScissors << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineRasterizationStateCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineRasterizationStateCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthClampEnable" << std::endl;
    // depthClampEnable -> Field -> VkBool32
    os << "value: " << t.depthClampEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rasterizerDiscardEnable" << std::endl;
    // rasterizerDiscardEnable -> Field -> VkBool32
    os << "value: " << t.rasterizerDiscardEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  polygonMode" << std::endl;
    // polygonMode -> Field -> VkPolygonMode
    os << "value: " << t.polygonMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  cullMode" << std::endl;
    // cullMode -> Field -> VkCullModeFlags
    os << "value: " << t.cullMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  frontFace" << std::endl;
    // frontFace -> Field -> VkFrontFace
    os << "value: " << t.frontFace << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasEnable" << std::endl;
    // depthBiasEnable -> Field -> VkBool32
    os << "value: " << t.depthBiasEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasConstantFactor" << std::endl;
    // depthBiasConstantFactor -> Field -> float
    os << "value: " << t.depthBiasConstantFactor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasClamp" << std::endl;
    // depthBiasClamp -> Field -> float
    os << "value: " << t.depthBiasClamp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasSlopeFactor" << std::endl;
    // depthBiasSlopeFactor -> Field -> float
    os << "value: " << t.depthBiasSlopeFactor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  lineWidth" << std::endl;
    // lineWidth -> Field -> float
    os << "value: " << t.lineWidth << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineMultisampleStateCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineMultisampleStateCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rasterizationSamples" << std::endl;
    // rasterizationSamples -> Field -> VkSampleCountFlagBits
    os << "value: " << t.rasterizationSamples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleShadingEnable" << std::endl;
    // sampleShadingEnable -> Field -> VkBool32
    os << "value: " << t.sampleShadingEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minSampleShading" << std::endl;
    // minSampleShading -> Field -> float
    os << "value: " << t.minSampleShading << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSampleMask" << std::endl;
    // pSampleMask -> Field -> ConstDynamicArray(VkSampleMask)
    if (((t.rasterizationSamples+31)/32) == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSampleMask" << std::endl;
        for (uint64_t i = 0; i < ((t.rasterizationSamples+31)/32); ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pSampleMask << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  alphaToCoverageEnable" << std::endl;
    // alphaToCoverageEnable -> Field -> VkBool32
    os << "value: " << t.alphaToCoverageEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  alphaToOneEnable" << std::endl;
    // alphaToOneEnable -> Field -> VkBool32
    os << "value: " << t.alphaToOneEnable << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkStencilOpState &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  failOp" << std::endl;
    // failOp -> Field -> VkStencilOp
    os << "value: " << t.failOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  passOp" << std::endl;
    // passOp -> Field -> VkStencilOp
    os << "value: " << t.passOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthFailOp" << std::endl;
    // depthFailOp -> Field -> VkStencilOp
    os << "value: " << t.depthFailOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compareOp" << std::endl;
    // compareOp -> Field -> VkCompareOp
    os << "value: " << t.compareOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compareMask" << std::endl;
    // compareMask -> Field -> uint32_t
    os << "value: " << t.compareMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  writeMask" << std::endl;
    // writeMask -> Field -> uint32_t
    os << "value: " << t.writeMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  reference" << std::endl;
    // reference -> Field -> uint32_t
    os << "value: " << t.reference << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineDepthStencilStateCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineDepthStencilStateCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthTestEnable" << std::endl;
    // depthTestEnable -> Field -> VkBool32
    os << "value: " << t.depthTestEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthWriteEnable" << std::endl;
    // depthWriteEnable -> Field -> VkBool32
    os << "value: " << t.depthWriteEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthCompareOp" << std::endl;
    // depthCompareOp -> Field -> VkCompareOp
    os << "value: " << t.depthCompareOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBoundsTestEnable" << std::endl;
    // depthBoundsTestEnable -> Field -> VkBool32
    os << "value: " << t.depthBoundsTestEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilTestEnable" << std::endl;
    // stencilTestEnable -> Field -> VkBool32
    os << "value: " << t.stencilTestEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  front" << std::endl;
    // front -> Field -> VkStencilOpState
    os <<  "members:" << std::endl << t.front << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  back" << std::endl;
    // back -> Field -> VkStencilOpState
    os <<  "members:" << std::endl << t.back << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minDepthBounds" << std::endl;
    // minDepthBounds -> Field -> float
    os << "value: " << t.minDepthBounds << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDepthBounds" << std::endl;
    // maxDepthBounds -> Field -> float
    os << "value: " << t.maxDepthBounds << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineColorBlendAttachmentState &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  blendEnable" << std::endl;
    // blendEnable -> Field -> VkBool32
    os << "value: " << t.blendEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcColorBlendFactor" << std::endl;
    // srcColorBlendFactor -> Field -> VkBlendFactor
    os << "value: " << t.srcColorBlendFactor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstColorBlendFactor" << std::endl;
    // dstColorBlendFactor -> Field -> VkBlendFactor
    os << "value: " << t.dstColorBlendFactor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  colorBlendOp" << std::endl;
    // colorBlendOp -> Field -> VkBlendOp
    os << "value: " << t.colorBlendOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcAlphaBlendFactor" << std::endl;
    // srcAlphaBlendFactor -> Field -> VkBlendFactor
    os << "value: " << t.srcAlphaBlendFactor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstAlphaBlendFactor" << std::endl;
    // dstAlphaBlendFactor -> Field -> VkBlendFactor
    os << "value: " << t.dstAlphaBlendFactor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  alphaBlendOp" << std::endl;
    // alphaBlendOp -> Field -> VkBlendOp
    os << "value: " << t.alphaBlendOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  colorWriteMask" << std::endl;
    // colorWriteMask -> Field -> VkColorComponentFlags
    os << "value: " << t.colorWriteMask << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineColorBlendStateCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineColorBlendStateCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  logicOpEnable" << std::endl;
    // logicOpEnable -> Field -> VkBool32
    os << "value: " << t.logicOpEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  logicOp" << std::endl;
    // logicOp -> Field -> VkLogicOp
    os << "value: " << t.logicOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentCount" << std::endl;
    // attachmentCount -> Field -> uint32_t
    os << "value: " << t.attachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAttachments" << std::endl;
    // pAttachments -> Field -> ConstDynamicArray(VkPipelineColorBlendAttachmentState)
    if (t.attachmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkPipelineColorBlendAttachmentState" << std::endl;
        for (uint64_t i = 0; i < t.attachmentCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pAttachments << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  blendConstants" << std::endl;
    // blendConstants -> Field -> FixedArray(float)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # float" << std::endl;
        for (uint64_t i = 0; i < 4; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.blendConstants << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineDynamicStateCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineDynamicStateCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dynamicStateCount" << std::endl;
    // dynamicStateCount -> Field -> uint32_t
    os << "value: " << t.dynamicStateCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDynamicStates" << std::endl;
    // pDynamicStates -> Field -> ConstDynamicArray(VkDynamicState)
    if (t.dynamicStateCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDynamicState" << std::endl;
        for (uint64_t i = 0; i < t.dynamicStateCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pDynamicStates << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkGraphicsPipelineCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stageCount" << std::endl;
    // stageCount -> Field -> uint32_t
    os << "value: " << t.stageCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStages" << std::endl;
    // pStages -> Field -> ConstDynamicArray(VkPipelineShaderStageCreateInfo)
    if (t.stageCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkPipelineShaderStageCreateInfo" << std::endl;
        for (uint64_t i = 0; i < t.stageCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pStages << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pVertexInputState" << std::endl;
    // pointer
    if (t.pVertexInputState != nullptr) {
      os <<  "members:" << std::endl << *t.pVertexInputState << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInputAssemblyState" << std::endl;
    // pointer
    if (t.pInputAssemblyState != nullptr) {
      os <<  "members:" << std::endl << *t.pInputAssemblyState << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pTessellationState" << std::endl;
    // pointer
    if (t.pTessellationState != nullptr) {
      os <<  "members:" << std::endl << *t.pTessellationState << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pViewportState" << std::endl;
    // pointer
    if (t.pViewportState != nullptr) {
      os <<  "members:" << std::endl << *t.pViewportState << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRasterizationState" << std::endl;
    // pointer
    if (t.pRasterizationState != nullptr) {
      os <<  "members:" << std::endl << *t.pRasterizationState << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMultisampleState" << std::endl;
    // pointer
    if (t.pMultisampleState != nullptr) {
      os <<  "members:" << std::endl << *t.pMultisampleState << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDepthStencilState" << std::endl;
    // pointer
    if (t.pDepthStencilState != nullptr) {
      os <<  "members:" << std::endl << *t.pDepthStencilState << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pColorBlendState" << std::endl;
    // pointer
    if (t.pColorBlendState != nullptr) {
      os <<  "members:" << std::endl << *t.pColorBlendState << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDynamicState" << std::endl;
    // pointer
    if (t.pDynamicState != nullptr) {
      os <<  "members:" << std::endl << *t.pDynamicState << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layout" << std::endl;
    // layout -> Field -> VkPipelineLayout
    os << "value: " << t.layout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  renderPass" << std::endl;
    // renderPass -> Field -> VkRenderPass
    os << "value: " << t.renderPass << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subpass" << std::endl;
    // subpass -> Field -> uint32_t
    os << "value: " << t.subpass << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  basePipelineHandle" << std::endl;
    // basePipelineHandle -> Field -> VkPipeline
    os << "value: " << t.basePipelineHandle << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  basePipelineIndex" << std::endl;
    // basePipelineIndex -> Field -> int32_t
    os << "value: " << t.basePipelineIndex << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPushConstantRange &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stageFlags" << std::endl;
    // stageFlags -> Field -> VkShaderStageFlags
    os << "value: " << t.stageFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> uint32_t
    os << "value: " << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> uint32_t
    os << "value: " << t.size << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineLayoutCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineLayoutCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  setLayoutCount" << std::endl;
    // setLayoutCount -> Field -> uint32_t
    os << "value: " << t.setLayoutCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSetLayouts" << std::endl;
    // pSetLayouts -> Field -> ConstDynamicArray(VkDescriptorSetLayout)
    if (t.setLayoutCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDescriptorSetLayout" << std::endl;
        for (uint64_t i = 0; i < t.setLayoutCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pSetLayouts << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pushConstantRangeCount" << std::endl;
    // pushConstantRangeCount -> Field -> uint32_t
    os << "value: " << t.pushConstantRangeCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPushConstantRanges" << std::endl;
    // pPushConstantRanges -> Field -> ConstDynamicArray(VkPushConstantRange)
    if (t.pushConstantRangeCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkPushConstantRange" << std::endl;
        for (uint64_t i = 0; i < t.pushConstantRangeCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pPushConstantRanges << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSamplerCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkSamplerCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  magFilter" << std::endl;
    // magFilter -> Field -> VkFilter
    os << "value: " << t.magFilter << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minFilter" << std::endl;
    // minFilter -> Field -> VkFilter
    os << "value: " << t.minFilter << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mipmapMode" << std::endl;
    // mipmapMode -> Field -> VkSamplerMipmapMode
    os << "value: " << t.mipmapMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  addressModeU" << std::endl;
    // addressModeU -> Field -> VkSamplerAddressMode
    os << "value: " << t.addressModeU << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  addressModeV" << std::endl;
    // addressModeV -> Field -> VkSamplerAddressMode
    os << "value: " << t.addressModeV << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  addressModeW" << std::endl;
    // addressModeW -> Field -> VkSamplerAddressMode
    os << "value: " << t.addressModeW << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mipLodBias" << std::endl;
    // mipLodBias -> Field -> float
    os << "value: " << t.mipLodBias << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  anisotropyEnable" << std::endl;
    // anisotropyEnable -> Field -> VkBool32
    os << "value: " << t.anisotropyEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxAnisotropy" << std::endl;
    // maxAnisotropy -> Field -> float
    os << "value: " << t.maxAnisotropy << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compareEnable" << std::endl;
    // compareEnable -> Field -> VkBool32
    os << "value: " << t.compareEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compareOp" << std::endl;
    // compareOp -> Field -> VkCompareOp
    os << "value: " << t.compareOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minLod" << std::endl;
    // minLod -> Field -> float
    os << "value: " << t.minLod << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxLod" << std::endl;
    // maxLod -> Field -> float
    os << "value: " << t.maxLod << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  borderColor" << std::endl;
    // borderColor -> Field -> VkBorderColor
    os << "value: " << t.borderColor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  unnormalizedCoordinates" << std::endl;
    // unnormalizedCoordinates -> Field -> VkBool32
    os << "value: " << t.unnormalizedCoordinates << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCopyDescriptorSet &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcSet" << std::endl;
    // srcSet -> Field -> VkDescriptorSet
    os << "value: " << t.srcSet << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcBinding" << std::endl;
    // srcBinding -> Field -> uint32_t
    os << "value: " << t.srcBinding << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcArrayElement" << std::endl;
    // srcArrayElement -> Field -> uint32_t
    os << "value: " << t.srcArrayElement << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstSet" << std::endl;
    // dstSet -> Field -> VkDescriptorSet
    os << "value: " << t.dstSet << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBinding" << std::endl;
    // dstBinding -> Field -> uint32_t
    os << "value: " << t.dstBinding << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstArrayElement" << std::endl;
    // dstArrayElement -> Field -> uint32_t
    os << "value: " << t.dstArrayElement << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorCount" << std::endl;
    // descriptorCount -> Field -> uint32_t
    os << "value: " << t.descriptorCount << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDescriptorBufferInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  range" << std::endl;
    // range -> Field -> VkDeviceSize
    os << "value: " << t.range << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDescriptorImageInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampler" << std::endl;
    // sampler -> Field -> VkSampler
    os << "value: " << t.sampler << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageView" << std::endl;
    // imageView -> Field -> VkImageView
    os << "value: " << t.imageView << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageLayout" << std::endl;
    // imageLayout -> Field -> VkImageLayout
    os << "value: " << t.imageLayout << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDescriptorPoolSize &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  type" << std::endl;
    // type -> Field -> VkDescriptorType
    os << "value: " << t.type << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorCount" << std::endl;
    // descriptorCount -> Field -> uint32_t
    os << "value: " << t.descriptorCount << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDescriptorPoolCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDescriptorPoolCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSets" << std::endl;
    // maxSets -> Field -> uint32_t
    os << "value: " << t.maxSets << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  poolSizeCount" << std::endl;
    // poolSizeCount -> Field -> uint32_t
    os << "value: " << t.poolSizeCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPoolSizes" << std::endl;
    // pPoolSizes -> Field -> ConstDynamicArray(VkDescriptorPoolSize)
    if (t.poolSizeCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDescriptorPoolSize" << std::endl;
        for (uint64_t i = 0; i < t.poolSizeCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pPoolSizes << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDescriptorSetAllocateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorPool" << std::endl;
    // descriptorPool -> Field -> VkDescriptorPool
    os << "value: " << t.descriptorPool << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorSetCount" << std::endl;
    // descriptorSetCount -> Field -> uint32_t
    os << "value: " << t.descriptorSetCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSetLayouts" << std::endl;
    // pSetLayouts -> Field -> ConstDynamicArray(VkDescriptorSetLayout)
    if (t.descriptorSetCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDescriptorSetLayout" << std::endl;
        for (uint64_t i = 0; i < t.descriptorSetCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pSetLayouts << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDescriptorSetLayoutBinding &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  binding" << std::endl;
    // binding -> Field -> uint32_t
    os << "value: " << t.binding << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorType" << std::endl;
    // descriptorType -> Field -> VkDescriptorType
    os << "value: " << t.descriptorType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorCount" << std::endl;
    // descriptorCount -> Field -> uint32_t
    os << "value: " << t.descriptorCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stageFlags" << std::endl;
    // stageFlags -> Field -> VkShaderStageFlags
    os << "value: " << t.stageFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pImmutableSamplers" << std::endl;
    // pImmutableSamplers -> Field -> ConstDynamicArray(VkSampler)
    if (t.descriptorCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSampler" << std::endl;
        for (uint64_t i = 0; i < t.descriptorCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pImmutableSamplers << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDescriptorSetLayoutCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDescriptorSetLayoutCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bindingCount" << std::endl;
    // bindingCount -> Field -> uint32_t
    os << "value: " << t.bindingCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBindings" << std::endl;
    // pBindings -> Field -> ConstDynamicArray(VkDescriptorSetLayoutBinding)
    if (t.bindingCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDescriptorSetLayoutBinding" << std::endl;
        for (uint64_t i = 0; i < t.bindingCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pBindings << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAttachmentDescription &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkAttachmentDescriptionFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samples" << std::endl;
    // samples -> Field -> VkSampleCountFlagBits
    os << "value: " << t.samples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  loadOp" << std::endl;
    // loadOp -> Field -> VkAttachmentLoadOp
    os << "value: " << t.loadOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storeOp" << std::endl;
    // storeOp -> Field -> VkAttachmentStoreOp
    os << "value: " << t.storeOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilLoadOp" << std::endl;
    // stencilLoadOp -> Field -> VkAttachmentLoadOp
    os << "value: " << t.stencilLoadOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilStoreOp" << std::endl;
    // stencilStoreOp -> Field -> VkAttachmentStoreOp
    os << "value: " << t.stencilStoreOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  initialLayout" << std::endl;
    // initialLayout -> Field -> VkImageLayout
    os << "value: " << t.initialLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  finalLayout" << std::endl;
    // finalLayout -> Field -> VkImageLayout
    os << "value: " << t.finalLayout << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAttachmentReference &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachment" << std::endl;
    // attachment -> Field -> uint32_t
    os << "value: " << t.attachment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layout" << std::endl;
    // layout -> Field -> VkImageLayout
    os << "value: " << t.layout << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkFramebufferCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkFramebufferCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  renderPass" << std::endl;
    // renderPass -> Field -> VkRenderPass
    os << "value: " << t.renderPass << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentCount" << std::endl;
    // attachmentCount -> Field -> uint32_t
    os << "value: " << t.attachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAttachments" << std::endl;
    // pAttachments -> Field -> ConstDynamicArray(VkImageView)
    if (t.attachmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkImageView" << std::endl;
        for (uint64_t i = 0; i < t.attachmentCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pAttachments << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  width" << std::endl;
    // width -> Field -> uint32_t
    os << "value: " << t.width << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  height" << std::endl;
    // height -> Field -> uint32_t
    os << "value: " << t.height << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layers" << std::endl;
    // layers -> Field -> uint32_t
    os << "value: " << t.layers << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSubpassDescription &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkSubpassDescriptionFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineBindPoint" << std::endl;
    // pipelineBindPoint -> Field -> VkPipelineBindPoint
    os << "value: " << t.pipelineBindPoint << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  inputAttachmentCount" << std::endl;
    // inputAttachmentCount -> Field -> uint32_t
    os << "value: " << t.inputAttachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInputAttachments" << std::endl;
    // pInputAttachments -> Field -> ConstDynamicArray(VkAttachmentReference)
    if (t.inputAttachmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkAttachmentReference" << std::endl;
        for (uint64_t i = 0; i < t.inputAttachmentCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pInputAttachments << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  colorAttachmentCount" << std::endl;
    // colorAttachmentCount -> Field -> uint32_t
    os << "value: " << t.colorAttachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pColorAttachments" << std::endl;
    // pColorAttachments -> Field -> ConstDynamicArray(VkAttachmentReference)
    if (t.colorAttachmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkAttachmentReference" << std::endl;
        for (uint64_t i = 0; i < t.colorAttachmentCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pColorAttachments << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pResolveAttachments" << std::endl;
    // pResolveAttachments -> Field -> ConstDynamicArray(VkAttachmentReference)
    if (t.colorAttachmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkAttachmentReference" << std::endl;
        for (uint64_t i = 0; i < t.colorAttachmentCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pResolveAttachments << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDepthStencilAttachment" << std::endl;
    // pointer
    if (t.pDepthStencilAttachment != nullptr) {
      os <<  "members:" << std::endl << *t.pDepthStencilAttachment << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preserveAttachmentCount" << std::endl;
    // preserveAttachmentCount -> Field -> uint32_t
    os << "value: " << t.preserveAttachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPreserveAttachments" << std::endl;
    // pPreserveAttachments -> Field -> ConstDynamicArray(uint32_t)
    if (t.preserveAttachmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.preserveAttachmentCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pPreserveAttachments << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSubpassDependency &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcSubpass" << std::endl;
    // srcSubpass -> Field -> uint32_t
    os << "value: " << t.srcSubpass << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstSubpass" << std::endl;
    // dstSubpass -> Field -> uint32_t
    os << "value: " << t.dstSubpass << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcStageMask" << std::endl;
    // srcStageMask -> Field -> VkPipelineStageFlags
    os << "value: " << t.srcStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstStageMask" << std::endl;
    // dstStageMask -> Field -> VkPipelineStageFlags
    os << "value: " << t.dstStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcAccessMask" << std::endl;
    // srcAccessMask -> Field -> VkAccessFlags
    os << "value: " << t.srcAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstAccessMask" << std::endl;
    // dstAccessMask -> Field -> VkAccessFlags
    os << "value: " << t.dstAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dependencyFlags" << std::endl;
    // dependencyFlags -> Field -> VkDependencyFlags
    os << "value: " << t.dependencyFlags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRenderPassCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkRenderPassCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentCount" << std::endl;
    // attachmentCount -> Field -> uint32_t
    os << "value: " << t.attachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAttachments" << std::endl;
    // pAttachments -> Field -> ConstDynamicArray(VkAttachmentDescription)
    if (t.attachmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkAttachmentDescription" << std::endl;
        for (uint64_t i = 0; i < t.attachmentCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pAttachments << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subpassCount" << std::endl;
    // subpassCount -> Field -> uint32_t
    os << "value: " << t.subpassCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSubpasses" << std::endl;
    // pSubpasses -> Field -> ConstDynamicArray(VkSubpassDescription)
    if (t.subpassCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSubpassDescription" << std::endl;
        for (uint64_t i = 0; i < t.subpassCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pSubpasses << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dependencyCount" << std::endl;
    // dependencyCount -> Field -> uint32_t
    os << "value: " << t.dependencyCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDependencies" << std::endl;
    // pDependencies -> Field -> ConstDynamicArray(VkSubpassDependency)
    if (t.dependencyCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSubpassDependency" << std::endl;
        for (uint64_t i = 0; i < t.dependencyCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pDependencies << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCommandPoolCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkCommandPoolCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueFamilyIndex" << std::endl;
    // queueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.queueFamilyIndex << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCommandBufferAllocateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandPool" << std::endl;
    // commandPool -> Field -> VkCommandPool
    os << "value: " << t.commandPool << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  level" << std::endl;
    // level -> Field -> VkCommandBufferLevel
    os << "value: " << t.level << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBufferCount" << std::endl;
    // commandBufferCount -> Field -> uint32_t
    os << "value: " << t.commandBufferCount << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCommandBufferInheritanceInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  renderPass" << std::endl;
    // renderPass -> Field -> VkRenderPass
    os << "value: " << t.renderPass << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subpass" << std::endl;
    // subpass -> Field -> uint32_t
    os << "value: " << t.subpass << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  framebuffer" << std::endl;
    // framebuffer -> Field -> VkFramebuffer
    os << "value: " << t.framebuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  occlusionQueryEnable" << std::endl;
    // occlusionQueryEnable -> Field -> VkBool32
    os << "value: " << t.occlusionQueryEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryFlags" << std::endl;
    // queryFlags -> Field -> VkQueryControlFlags
    os << "value: " << t.queryFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineStatistics" << std::endl;
    // pipelineStatistics -> Field -> VkQueryPipelineStatisticFlags
    os << "value: " << t.pipelineStatistics << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCommandBufferBeginInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkCommandBufferUsageFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInheritanceInfo" << std::endl;
    // pointer
    if (t.pInheritanceInfo != nullptr) {
      os <<  "members:" << std::endl << *t.pInheritanceInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBufferCopy &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcOffset" << std::endl;
    // srcOffset -> Field -> VkDeviceSize
    os << "value: " << t.srcOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffset" << std::endl;
    // dstOffset -> Field -> VkDeviceSize
    os << "value: " << t.dstOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageSubresourceLayers &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  aspectMask" << std::endl;
    // aspectMask -> Field -> VkImageAspectFlags
    os << "value: " << t.aspectMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mipLevel" << std::endl;
    // mipLevel -> Field -> uint32_t
    os << "value: " << t.mipLevel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  baseArrayLayer" << std::endl;
    // baseArrayLayer -> Field -> uint32_t
    os << "value: " << t.baseArrayLayer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layerCount" << std::endl;
    // layerCount -> Field -> uint32_t
    os << "value: " << t.layerCount << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBufferImageCopy &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferOffset" << std::endl;
    // bufferOffset -> Field -> VkDeviceSize
    os << "value: " << t.bufferOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferRowLength" << std::endl;
    // bufferRowLength -> Field -> uint32_t
    os << "value: " << t.bufferRowLength << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferImageHeight" << std::endl;
    // bufferImageHeight -> Field -> uint32_t
    os << "value: " << t.bufferImageHeight << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageSubresource" << std::endl;
    // imageSubresource -> Field -> VkImageSubresourceLayers
    os <<  "members:" << std::endl << t.imageSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageOffset" << std::endl;
    // imageOffset -> Field -> VkOffset3D
    os <<  "members:" << std::endl << t.imageOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageExtent" << std::endl;
    // imageExtent -> Field -> VkExtent3D
    os <<  "members:" << std::endl << t.imageExtent << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkClearColorValue &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  float32" << std::endl;
    // float32 -> Field -> FixedArray(float)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # float" << std::endl;
        for (uint64_t i = 0; i < 4; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.float32 << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  int32" << std::endl;
    // int32 -> Field -> FixedArray(int32_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # int32_t" << std::endl;
        for (uint64_t i = 0; i < 4; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.int32 << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uint32" << std::endl;
    // uint32 -> Field -> FixedArray(uint32_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < 4; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.uint32 << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkClearDepthStencilValue &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depth" << std::endl;
    // depth -> Field -> float
    os << "value: " << t.depth << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencil" << std::endl;
    // stencil -> Field -> uint32_t
    os << "value: " << t.stencil << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkClearValue &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  color" << std::endl;
    // color -> Field -> VkClearColorValue
    os <<  "members:" << std::endl << t.color << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthStencil" << std::endl;
    // depthStencil -> Field -> VkClearDepthStencilValue
    os <<  "members:" << std::endl << t.depthStencil << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkClearAttachment &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  aspectMask" << std::endl;
    // aspectMask -> Field -> VkImageAspectFlags
    os << "value: " << t.aspectMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  colorAttachment" << std::endl;
    // colorAttachment -> Field -> uint32_t
    os << "value: " << t.colorAttachment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  clearValue" << std::endl;
    // clearValue -> Field -> VkClearValue
    os <<  "members:" << std::endl << t.clearValue << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkClearRect &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rect" << std::endl;
    // rect -> Field -> VkRect2D
    os <<  "members:" << std::endl << t.rect << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  baseArrayLayer" << std::endl;
    // baseArrayLayer -> Field -> uint32_t
    os << "value: " << t.baseArrayLayer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layerCount" << std::endl;
    // layerCount -> Field -> uint32_t
    os << "value: " << t.layerCount << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageBlit &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcSubresource" << std::endl;
    // srcSubresource -> Field -> VkImageSubresourceLayers
    os <<  "members:" << std::endl << t.srcSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcOffsets" << std::endl;
    // srcOffsets -> Field -> FixedArray(VkOffset3D)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkOffset3D" << std::endl;
        for (uint64_t i = 0; i < 2; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.srcOffsets << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstSubresource" << std::endl;
    // dstSubresource -> Field -> VkImageSubresourceLayers
    os <<  "members:" << std::endl << t.dstSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffsets" << std::endl;
    // dstOffsets -> Field -> FixedArray(VkOffset3D)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkOffset3D" << std::endl;
        for (uint64_t i = 0; i < 2; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.dstOffsets << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageCopy &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcSubresource" << std::endl;
    // srcSubresource -> Field -> VkImageSubresourceLayers
    os <<  "members:" << std::endl << t.srcSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcOffset" << std::endl;
    // srcOffset -> Field -> VkOffset3D
    os <<  "members:" << std::endl << t.srcOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstSubresource" << std::endl;
    // dstSubresource -> Field -> VkImageSubresourceLayers
    os <<  "members:" << std::endl << t.dstSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffset" << std::endl;
    // dstOffset -> Field -> VkOffset3D
    os <<  "members:" << std::endl << t.dstOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extent" << std::endl;
    // extent -> Field -> VkExtent3D
    os <<  "members:" << std::endl << t.extent << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageResolve &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcSubresource" << std::endl;
    // srcSubresource -> Field -> VkImageSubresourceLayers
    os <<  "members:" << std::endl << t.srcSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcOffset" << std::endl;
    // srcOffset -> Field -> VkOffset3D
    os <<  "members:" << std::endl << t.srcOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstSubresource" << std::endl;
    // dstSubresource -> Field -> VkImageSubresourceLayers
    os <<  "members:" << std::endl << t.dstSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffset" << std::endl;
    // dstOffset -> Field -> VkOffset3D
    os <<  "members:" << std::endl << t.dstOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extent" << std::endl;
    // extent -> Field -> VkExtent3D
    os <<  "members:" << std::endl << t.extent << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRenderPassBeginInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  renderPass" << std::endl;
    // renderPass -> Field -> VkRenderPass
    os << "value: " << t.renderPass << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  framebuffer" << std::endl;
    // framebuffer -> Field -> VkFramebuffer
    os << "value: " << t.framebuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  renderArea" << std::endl;
    // renderArea -> Field -> VkRect2D
    os <<  "members:" << std::endl << t.renderArea << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  clearValueCount" << std::endl;
    // clearValueCount -> Field -> uint32_t
    os << "value: " << t.clearValueCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pClearValues" << std::endl;
    // pClearValues -> Field -> ConstDynamicArray(VkClearValue)
    if (t.clearValueCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkClearValue" << std::endl;
        for (uint64_t i = 0; i < t.clearValueCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pClearValues << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceSubgroupProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subgroupSize" << std::endl;
    // subgroupSize -> Field -> uint32_t
    os << "value: " << t.subgroupSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedStages" << std::endl;
    // supportedStages -> Field -> VkShaderStageFlags
    os << "value: " << t.supportedStages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedOperations" << std::endl;
    // supportedOperations -> Field -> VkSubgroupFeatureFlags
    os << "value: " << t.supportedOperations << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  quadOperationsInAllStages" << std::endl;
    // quadOperationsInAllStages -> Field -> VkBool32
    os << "value: " << t.quadOperationsInAllStages << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBindBufferMemoryInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memory" << std::endl;
    // memory -> Field -> VkDeviceMemory
    os << "value: " << t.memory << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryOffset" << std::endl;
    // memoryOffset -> Field -> VkDeviceSize
    os << "value: " << t.memoryOffset << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBindImageMemoryInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << t.image << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memory" << std::endl;
    // memory -> Field -> VkDeviceMemory
    os << "value: " << t.memory << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryOffset" << std::endl;
    // memoryOffset -> Field -> VkDeviceSize
    os << "value: " << t.memoryOffset << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDevice16BitStorageFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storageBuffer16BitAccess" << std::endl;
    // storageBuffer16BitAccess -> Field -> VkBool32
    os << "value: " << t.storageBuffer16BitAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uniformAndStorageBuffer16BitAccess" << std::endl;
    // uniformAndStorageBuffer16BitAccess -> Field -> VkBool32
    os << "value: " << t.uniformAndStorageBuffer16BitAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storagePushConstant16" << std::endl;
    // storagePushConstant16 -> Field -> VkBool32
    os << "value: " << t.storagePushConstant16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storageInputOutput16" << std::endl;
    // storageInputOutput16 -> Field -> VkBool32
    os << "value: " << t.storageInputOutput16 << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMemoryDedicatedRequirements &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  prefersDedicatedAllocation" << std::endl;
    // prefersDedicatedAllocation -> Field -> VkBool32
    os << "value: " << t.prefersDedicatedAllocation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  requiresDedicatedAllocation" << std::endl;
    // requiresDedicatedAllocation -> Field -> VkBool32
    os << "value: " << t.requiresDedicatedAllocation << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMemoryDedicatedAllocateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << t.image << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMemoryAllocateFlagsInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkMemoryAllocateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceMask" << std::endl;
    // deviceMask -> Field -> uint32_t
    os << "value: " << t.deviceMask << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceGroupRenderPassBeginInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceMask" << std::endl;
    // deviceMask -> Field -> uint32_t
    os << "value: " << t.deviceMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceRenderAreaCount" << std::endl;
    // deviceRenderAreaCount -> Field -> uint32_t
    os << "value: " << t.deviceRenderAreaCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDeviceRenderAreas" << std::endl;
    // pDeviceRenderAreas -> Field -> ConstDynamicArray(VkRect2D)
    if (t.deviceRenderAreaCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkRect2D" << std::endl;
        for (uint64_t i = 0; i < t.deviceRenderAreaCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pDeviceRenderAreas << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceGroupCommandBufferBeginInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceMask" << std::endl;
    // deviceMask -> Field -> uint32_t
    os << "value: " << t.deviceMask << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceGroupSubmitInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  waitSemaphoreCount" << std::endl;
    // waitSemaphoreCount -> Field -> uint32_t
    os << "value: " << t.waitSemaphoreCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pWaitSemaphoreDeviceIndices" << std::endl;
    // pWaitSemaphoreDeviceIndices -> Field -> ConstDynamicArray(uint32_t)
    if (t.waitSemaphoreCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.waitSemaphoreCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pWaitSemaphoreDeviceIndices << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBufferCount" << std::endl;
    // commandBufferCount -> Field -> uint32_t
    os << "value: " << t.commandBufferCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCommandBufferDeviceMasks" << std::endl;
    // pCommandBufferDeviceMasks -> Field -> ConstDynamicArray(uint32_t)
    if (t.commandBufferCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.commandBufferCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pCommandBufferDeviceMasks << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  signalSemaphoreCount" << std::endl;
    // signalSemaphoreCount -> Field -> uint32_t
    os << "value: " << t.signalSemaphoreCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSignalSemaphoreDeviceIndices" << std::endl;
    // pSignalSemaphoreDeviceIndices -> Field -> ConstDynamicArray(uint32_t)
    if (t.signalSemaphoreCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.signalSemaphoreCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pSignalSemaphoreDeviceIndices << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceGroupBindSparseInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  resourceDeviceIndex" << std::endl;
    // resourceDeviceIndex -> Field -> uint32_t
    os << "value: " << t.resourceDeviceIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryDeviceIndex" << std::endl;
    // memoryDeviceIndex -> Field -> uint32_t
    os << "value: " << t.memoryDeviceIndex << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBindBufferMemoryDeviceGroupInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceIndexCount" << std::endl;
    // deviceIndexCount -> Field -> uint32_t
    os << "value: " << t.deviceIndexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDeviceIndices" << std::endl;
    // pDeviceIndices -> Field -> ConstDynamicArray(uint32_t)
    if (t.deviceIndexCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.deviceIndexCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pDeviceIndices << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBindImageMemoryDeviceGroupInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceIndexCount" << std::endl;
    // deviceIndexCount -> Field -> uint32_t
    os << "value: " << t.deviceIndexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDeviceIndices" << std::endl;
    // pDeviceIndices -> Field -> ConstDynamicArray(uint32_t)
    if (t.deviceIndexCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.deviceIndexCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pDeviceIndices << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  splitInstanceBindRegionCount" << std::endl;
    // splitInstanceBindRegionCount -> Field -> uint32_t
    os << "value: " << t.splitInstanceBindRegionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSplitInstanceBindRegions" << std::endl;
    // pSplitInstanceBindRegions -> Field -> ConstDynamicArray(VkRect2D)
    if (t.splitInstanceBindRegionCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkRect2D" << std::endl;
        for (uint64_t i = 0; i < t.splitInstanceBindRegionCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pSplitInstanceBindRegions << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceGroupProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  physicalDeviceCount" << std::endl;
    // physicalDeviceCount -> Field -> uint32_t
    os << "value: " << t.physicalDeviceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  physicalDevices" << std::endl;
    // physicalDevices -> Field -> FixedArray(VkPhysicalDevice)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkPhysicalDevice" << std::endl;
        for (uint64_t i = 0; i < VK_MAX_DEVICE_GROUP_SIZE; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.physicalDevices << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subsetAllocation" << std::endl;
    // subsetAllocation -> Field -> VkBool32
    os << "value: " << t.subsetAllocation << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceGroupDeviceCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  physicalDeviceCount" << std::endl;
    // physicalDeviceCount -> Field -> uint32_t
    os << "value: " << t.physicalDeviceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPhysicalDevices" << std::endl;
    // pPhysicalDevices -> Field -> ConstDynamicArray(VkPhysicalDevice)
    if (t.physicalDeviceCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkPhysicalDevice" << std::endl;
        for (uint64_t i = 0; i < t.physicalDeviceCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pPhysicalDevices << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBufferMemoryRequirementsInfo2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageMemoryRequirementsInfo2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << t.image << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageSparseMemoryRequirementsInfo2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << t.image << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMemoryRequirements2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryRequirements" << std::endl;
    // memoryRequirements -> Field -> VkMemoryRequirements
    os <<  "members:" << std::endl << t.memoryRequirements << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSparseImageMemoryRequirements2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryRequirements" << std::endl;
    // memoryRequirements -> Field -> VkSparseImageMemoryRequirements
    os <<  "members:" << std::endl << t.memoryRequirements << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceFeatures2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  features" << std::endl;
    // features -> Field -> VkPhysicalDeviceFeatures
    os <<  "members:" << std::endl << t.features << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceProperties2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  properties" << std::endl;
    // properties -> Field -> VkPhysicalDeviceProperties
    os <<  "members:" << std::endl << t.properties << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkFormatProperties2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  formatProperties" << std::endl;
    // formatProperties -> Field -> VkFormatProperties
    os <<  "members:" << std::endl << t.formatProperties << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageFormatProperties2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageFormatProperties" << std::endl;
    // imageFormatProperties -> Field -> VkImageFormatProperties
    os <<  "members:" << std::endl << t.imageFormatProperties << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceImageFormatInfo2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  type" << std::endl;
    // type -> Field -> VkImageType
    os << "value: " << t.type << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tiling" << std::endl;
    // tiling -> Field -> VkImageTiling
    os << "value: " << t.tiling << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  usage" << std::endl;
    // usage -> Field -> VkImageUsageFlags
    os << "value: " << t.usage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkImageCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkQueueFamilyProperties2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueFamilyProperties" << std::endl;
    // queueFamilyProperties -> Field -> VkQueueFamilyProperties
    os <<  "members:" << std::endl << t.queueFamilyProperties << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceMemoryProperties2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryProperties" << std::endl;
    // memoryProperties -> Field -> VkPhysicalDeviceMemoryProperties
    os <<  "members:" << std::endl << t.memoryProperties << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSparseImageFormatProperties2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  properties" << std::endl;
    // properties -> Field -> VkSparseImageFormatProperties
    os <<  "members:" << std::endl << t.properties << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceSparseImageFormatInfo2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  type" << std::endl;
    // type -> Field -> VkImageType
    os << "value: " << t.type << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samples" << std::endl;
    // samples -> Field -> VkSampleCountFlagBits
    os << "value: " << t.samples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  usage" << std::endl;
    // usage -> Field -> VkImageUsageFlags
    os << "value: " << t.usage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tiling" << std::endl;
    // tiling -> Field -> VkImageTiling
    os << "value: " << t.tiling << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDevicePointClippingProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pointClippingBehavior" << std::endl;
    // pointClippingBehavior -> Field -> VkPointClippingBehavior
    os << "value: " << t.pointClippingBehavior << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkInputAttachmentAspectReference &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subpass" << std::endl;
    // subpass -> Field -> uint32_t
    os << "value: " << t.subpass << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  inputAttachmentIndex" << std::endl;
    // inputAttachmentIndex -> Field -> uint32_t
    os << "value: " << t.inputAttachmentIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  aspectMask" << std::endl;
    // aspectMask -> Field -> VkImageAspectFlags
    os << "value: " << t.aspectMask << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRenderPassInputAttachmentAspectCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  aspectReferenceCount" << std::endl;
    // aspectReferenceCount -> Field -> uint32_t
    os << "value: " << t.aspectReferenceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAspectReferences" << std::endl;
    // pAspectReferences -> Field -> ConstDynamicArray(VkInputAttachmentAspectReference)
    if (t.aspectReferenceCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkInputAttachmentAspectReference" << std::endl;
        for (uint64_t i = 0; i < t.aspectReferenceCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pAspectReferences << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageViewUsageCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  usage" << std::endl;
    // usage -> Field -> VkImageUsageFlags
    os << "value: " << t.usage << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineTessellationDomainOriginStateCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  domainOrigin" << std::endl;
    // domainOrigin -> Field -> VkTessellationDomainOrigin
    os << "value: " << t.domainOrigin << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRenderPassMultiviewCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subpassCount" << std::endl;
    // subpassCount -> Field -> uint32_t
    os << "value: " << t.subpassCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pViewMasks" << std::endl;
    // pViewMasks -> Field -> ConstDynamicArray(uint32_t)
    if (t.subpassCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.subpassCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pViewMasks << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dependencyCount" << std::endl;
    // dependencyCount -> Field -> uint32_t
    os << "value: " << t.dependencyCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pViewOffsets" << std::endl;
    // pViewOffsets -> Field -> ConstDynamicArray(int32_t)
    if (t.dependencyCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # int32_t" << std::endl;
        for (uint64_t i = 0; i < t.dependencyCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pViewOffsets << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  correlationMaskCount" << std::endl;
    // correlationMaskCount -> Field -> uint32_t
    os << "value: " << t.correlationMaskCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCorrelationMasks" << std::endl;
    // pCorrelationMasks -> Field -> ConstDynamicArray(uint32_t)
    if (t.correlationMaskCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.correlationMaskCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pCorrelationMasks << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceMultiviewFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multiview" << std::endl;
    // multiview -> Field -> VkBool32
    os << "value: " << t.multiview << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multiviewGeometryShader" << std::endl;
    // multiviewGeometryShader -> Field -> VkBool32
    os << "value: " << t.multiviewGeometryShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multiviewTessellationShader" << std::endl;
    // multiviewTessellationShader -> Field -> VkBool32
    os << "value: " << t.multiviewTessellationShader << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceMultiviewProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMultiviewViewCount" << std::endl;
    // maxMultiviewViewCount -> Field -> uint32_t
    os << "value: " << t.maxMultiviewViewCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMultiviewInstanceIndex" << std::endl;
    // maxMultiviewInstanceIndex -> Field -> uint32_t
    os << "value: " << t.maxMultiviewInstanceIndex << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceVariablePointersFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  variablePointersStorageBuffer" << std::endl;
    // variablePointersStorageBuffer -> Field -> VkBool32
    os << "value: " << t.variablePointersStorageBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  variablePointers" << std::endl;
    // variablePointers -> Field -> VkBool32
    os << "value: " << t.variablePointers << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceProtectedMemoryFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  protectedMemory" << std::endl;
    // protectedMemory -> Field -> VkBool32
    os << "value: " << t.protectedMemory << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceProtectedMemoryProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  protectedNoFault" << std::endl;
    // protectedNoFault -> Field -> VkBool32
    os << "value: " << t.protectedNoFault << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceQueueInfo2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDeviceQueueCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueFamilyIndex" << std::endl;
    // queueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.queueFamilyIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueIndex" << std::endl;
    // queueIndex -> Field -> uint32_t
    os << "value: " << t.queueIndex << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkProtectedSubmitInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  protectedSubmit" << std::endl;
    // protectedSubmit -> Field -> VkBool32
    os << "value: " << t.protectedSubmit << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSamplerYcbcrConversionCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ycbcrModel" << std::endl;
    // ycbcrModel -> Field -> VkSamplerYcbcrModelConversion
    os << "value: " << t.ycbcrModel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ycbcrRange" << std::endl;
    // ycbcrRange -> Field -> VkSamplerYcbcrRange
    os << "value: " << t.ycbcrRange << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  components" << std::endl;
    // components -> Field -> VkComponentMapping
    os <<  "members:" << std::endl << t.components << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  xChromaOffset" << std::endl;
    // xChromaOffset -> Field -> VkChromaLocation
    os << "value: " << t.xChromaOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  yChromaOffset" << std::endl;
    // yChromaOffset -> Field -> VkChromaLocation
    os << "value: " << t.yChromaOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  chromaFilter" << std::endl;
    // chromaFilter -> Field -> VkFilter
    os << "value: " << t.chromaFilter << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  forceExplicitReconstruction" << std::endl;
    // forceExplicitReconstruction -> Field -> VkBool32
    os << "value: " << t.forceExplicitReconstruction << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSamplerYcbcrConversionInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  conversion" << std::endl;
    // conversion -> Field -> VkSamplerYcbcrConversion
    os << "value: " << t.conversion << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBindImagePlaneMemoryInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  planeAspect" << std::endl;
    // planeAspect -> Field -> VkImageAspectFlagBits
    os << "value: " << t.planeAspect << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImagePlaneMemoryRequirementsInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  planeAspect" << std::endl;
    // planeAspect -> Field -> VkImageAspectFlagBits
    os << "value: " << t.planeAspect << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceSamplerYcbcrConversionFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samplerYcbcrConversion" << std::endl;
    // samplerYcbcrConversion -> Field -> VkBool32
    os << "value: " << t.samplerYcbcrConversion << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSamplerYcbcrConversionImageFormatProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  combinedImageSamplerDescriptorCount" << std::endl;
    // combinedImageSamplerDescriptorCount -> Field -> uint32_t
    os << "value: " << t.combinedImageSamplerDescriptorCount << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDescriptorUpdateTemplateEntry &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBinding" << std::endl;
    // dstBinding -> Field -> uint32_t
    os << "value: " << t.dstBinding << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstArrayElement" << std::endl;
    // dstArrayElement -> Field -> uint32_t
    os << "value: " << t.dstArrayElement << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorCount" << std::endl;
    // descriptorCount -> Field -> uint32_t
    os << "value: " << t.descriptorCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorType" << std::endl;
    // descriptorType -> Field -> VkDescriptorType
    os << "value: " << t.descriptorType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> size_t
    os << "value: " << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> size_t
    os << "value: " << t.stride << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDescriptorUpdateTemplateCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDescriptorUpdateTemplateCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorUpdateEntryCount" << std::endl;
    // descriptorUpdateEntryCount -> Field -> uint32_t
    os << "value: " << t.descriptorUpdateEntryCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDescriptorUpdateEntries" << std::endl;
    // pDescriptorUpdateEntries -> Field -> ConstDynamicArray(VkDescriptorUpdateTemplateEntry)
    if (t.descriptorUpdateEntryCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDescriptorUpdateTemplateEntry" << std::endl;
        for (uint64_t i = 0; i < t.descriptorUpdateEntryCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pDescriptorUpdateEntries << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  templateType" << std::endl;
    // templateType -> Field -> VkDescriptorUpdateTemplateType
    os << "value: " << t.templateType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorSetLayout" << std::endl;
    // descriptorSetLayout -> Field -> VkDescriptorSetLayout
    os << "value: " << t.descriptorSetLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineBindPoint" << std::endl;
    // pipelineBindPoint -> Field -> VkPipelineBindPoint
    os << "value: " << t.pipelineBindPoint << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineLayout" << std::endl;
    // pipelineLayout -> Field -> VkPipelineLayout
    os << "value: " << t.pipelineLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  set" << std::endl;
    // set -> Field -> uint32_t
    os << "value: " << t.set << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkExternalMemoryProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  externalMemoryFeatures" << std::endl;
    // externalMemoryFeatures -> Field -> VkExternalMemoryFeatureFlags
    os << "value: " << t.externalMemoryFeatures << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  exportFromImportedHandleTypes" << std::endl;
    // exportFromImportedHandleTypes -> Field -> VkExternalMemoryHandleTypeFlags
    os << "value: " << t.exportFromImportedHandleTypes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compatibleHandleTypes" << std::endl;
    // compatibleHandleTypes -> Field -> VkExternalMemoryHandleTypeFlags
    os << "value: " << t.compatibleHandleTypes << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceExternalImageFormatInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalMemoryHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkExternalImageFormatProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  externalMemoryProperties" << std::endl;
    // externalMemoryProperties -> Field -> VkExternalMemoryProperties
    os <<  "members:" << std::endl << t.externalMemoryProperties << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceExternalBufferInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkBufferCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  usage" << std::endl;
    // usage -> Field -> VkBufferUsageFlags
    os << "value: " << t.usage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalMemoryHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkExternalBufferProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  externalMemoryProperties" << std::endl;
    // externalMemoryProperties -> Field -> VkExternalMemoryProperties
    os <<  "members:" << std::endl << t.externalMemoryProperties << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceIDProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceUUID" << std::endl;
    // deviceUUID -> Field -> FixedArray(uint8_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint8_t" << std::endl;
        for (uint64_t i = 0; i < VK_UUID_SIZE; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.deviceUUID << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  driverUUID" << std::endl;
    // driverUUID -> Field -> FixedArray(uint8_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint8_t" << std::endl;
        for (uint64_t i = 0; i < VK_UUID_SIZE; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.driverUUID << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceLUID" << std::endl;
    // deviceLUID -> Field -> FixedArray(uint8_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint8_t" << std::endl;
        for (uint64_t i = 0; i < VK_LUID_SIZE; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.deviceLUID << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceNodeMask" << std::endl;
    // deviceNodeMask -> Field -> uint32_t
    os << "value: " << t.deviceNodeMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceLUIDValid" << std::endl;
    // deviceLUIDValid -> Field -> VkBool32
    os << "value: " << t.deviceLUIDValid << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkExternalMemoryImageCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleTypes" << std::endl;
    // handleTypes -> Field -> VkExternalMemoryHandleTypeFlags
    os << "value: " << t.handleTypes << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkExternalMemoryBufferCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleTypes" << std::endl;
    // handleTypes -> Field -> VkExternalMemoryHandleTypeFlags
    os << "value: " << t.handleTypes << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkExportMemoryAllocateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleTypes" << std::endl;
    // handleTypes -> Field -> VkExternalMemoryHandleTypeFlags
    os << "value: " << t.handleTypes << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceExternalFenceInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalFenceHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkExternalFenceProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  exportFromImportedHandleTypes" << std::endl;
    // exportFromImportedHandleTypes -> Field -> VkExternalFenceHandleTypeFlags
    os << "value: " << t.exportFromImportedHandleTypes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compatibleHandleTypes" << std::endl;
    // compatibleHandleTypes -> Field -> VkExternalFenceHandleTypeFlags
    os << "value: " << t.compatibleHandleTypes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  externalFenceFeatures" << std::endl;
    // externalFenceFeatures -> Field -> VkExternalFenceFeatureFlags
    os << "value: " << t.externalFenceFeatures << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkExportFenceCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleTypes" << std::endl;
    // handleTypes -> Field -> VkExternalFenceHandleTypeFlags
    os << "value: " << t.handleTypes << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkExportSemaphoreCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleTypes" << std::endl;
    // handleTypes -> Field -> VkExternalSemaphoreHandleTypeFlags
    os << "value: " << t.handleTypes << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceExternalSemaphoreInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalSemaphoreHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkExternalSemaphoreProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  exportFromImportedHandleTypes" << std::endl;
    // exportFromImportedHandleTypes -> Field -> VkExternalSemaphoreHandleTypeFlags
    os << "value: " << t.exportFromImportedHandleTypes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compatibleHandleTypes" << std::endl;
    // compatibleHandleTypes -> Field -> VkExternalSemaphoreHandleTypeFlags
    os << "value: " << t.compatibleHandleTypes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  externalSemaphoreFeatures" << std::endl;
    // externalSemaphoreFeatures -> Field -> VkExternalSemaphoreFeatureFlags
    os << "value: " << t.externalSemaphoreFeatures << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceMaintenance3Properties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerSetDescriptors" << std::endl;
    // maxPerSetDescriptors -> Field -> uint32_t
    os << "value: " << t.maxPerSetDescriptors << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMemoryAllocationSize" << std::endl;
    // maxMemoryAllocationSize -> Field -> VkDeviceSize
    os << "value: " << t.maxMemoryAllocationSize << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDescriptorSetLayoutSupport &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supported" << std::endl;
    // supported -> Field -> VkBool32
    os << "value: " << t.supported << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderDrawParametersFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDrawParameters" << std::endl;
    // shaderDrawParameters -> Field -> VkBool32
    os << "value: " << t.shaderDrawParameters << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceVulkan11Features &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storageBuffer16BitAccess" << std::endl;
    // storageBuffer16BitAccess -> Field -> VkBool32
    os << "value: " << t.storageBuffer16BitAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uniformAndStorageBuffer16BitAccess" << std::endl;
    // uniformAndStorageBuffer16BitAccess -> Field -> VkBool32
    os << "value: " << t.uniformAndStorageBuffer16BitAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storagePushConstant16" << std::endl;
    // storagePushConstant16 -> Field -> VkBool32
    os << "value: " << t.storagePushConstant16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storageInputOutput16" << std::endl;
    // storageInputOutput16 -> Field -> VkBool32
    os << "value: " << t.storageInputOutput16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multiview" << std::endl;
    // multiview -> Field -> VkBool32
    os << "value: " << t.multiview << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multiviewGeometryShader" << std::endl;
    // multiviewGeometryShader -> Field -> VkBool32
    os << "value: " << t.multiviewGeometryShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multiviewTessellationShader" << std::endl;
    // multiviewTessellationShader -> Field -> VkBool32
    os << "value: " << t.multiviewTessellationShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  variablePointersStorageBuffer" << std::endl;
    // variablePointersStorageBuffer -> Field -> VkBool32
    os << "value: " << t.variablePointersStorageBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  variablePointers" << std::endl;
    // variablePointers -> Field -> VkBool32
    os << "value: " << t.variablePointers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  protectedMemory" << std::endl;
    // protectedMemory -> Field -> VkBool32
    os << "value: " << t.protectedMemory << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samplerYcbcrConversion" << std::endl;
    // samplerYcbcrConversion -> Field -> VkBool32
    os << "value: " << t.samplerYcbcrConversion << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDrawParameters" << std::endl;
    // shaderDrawParameters -> Field -> VkBool32
    os << "value: " << t.shaderDrawParameters << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceVulkan11Properties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceUUID" << std::endl;
    // deviceUUID -> Field -> FixedArray(uint8_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint8_t" << std::endl;
        for (uint64_t i = 0; i < VK_UUID_SIZE; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.deviceUUID << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  driverUUID" << std::endl;
    // driverUUID -> Field -> FixedArray(uint8_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint8_t" << std::endl;
        for (uint64_t i = 0; i < VK_UUID_SIZE; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.driverUUID << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceLUID" << std::endl;
    // deviceLUID -> Field -> FixedArray(uint8_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint8_t" << std::endl;
        for (uint64_t i = 0; i < VK_LUID_SIZE; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.deviceLUID << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceNodeMask" << std::endl;
    // deviceNodeMask -> Field -> uint32_t
    os << "value: " << t.deviceNodeMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceLUIDValid" << std::endl;
    // deviceLUIDValid -> Field -> VkBool32
    os << "value: " << t.deviceLUIDValid << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subgroupSize" << std::endl;
    // subgroupSize -> Field -> uint32_t
    os << "value: " << t.subgroupSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subgroupSupportedStages" << std::endl;
    // subgroupSupportedStages -> Field -> VkShaderStageFlags
    os << "value: " << t.subgroupSupportedStages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subgroupSupportedOperations" << std::endl;
    // subgroupSupportedOperations -> Field -> VkSubgroupFeatureFlags
    os << "value: " << t.subgroupSupportedOperations << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subgroupQuadOperationsInAllStages" << std::endl;
    // subgroupQuadOperationsInAllStages -> Field -> VkBool32
    os << "value: " << t.subgroupQuadOperationsInAllStages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pointClippingBehavior" << std::endl;
    // pointClippingBehavior -> Field -> VkPointClippingBehavior
    os << "value: " << t.pointClippingBehavior << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMultiviewViewCount" << std::endl;
    // maxMultiviewViewCount -> Field -> uint32_t
    os << "value: " << t.maxMultiviewViewCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMultiviewInstanceIndex" << std::endl;
    // maxMultiviewInstanceIndex -> Field -> uint32_t
    os << "value: " << t.maxMultiviewInstanceIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  protectedNoFault" << std::endl;
    // protectedNoFault -> Field -> VkBool32
    os << "value: " << t.protectedNoFault << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerSetDescriptors" << std::endl;
    // maxPerSetDescriptors -> Field -> uint32_t
    os << "value: " << t.maxPerSetDescriptors << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMemoryAllocationSize" << std::endl;
    // maxMemoryAllocationSize -> Field -> VkDeviceSize
    os << "value: " << t.maxMemoryAllocationSize << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceVulkan12Features &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samplerMirrorClampToEdge" << std::endl;
    // samplerMirrorClampToEdge -> Field -> VkBool32
    os << "value: " << t.samplerMirrorClampToEdge << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drawIndirectCount" << std::endl;
    // drawIndirectCount -> Field -> VkBool32
    os << "value: " << t.drawIndirectCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storageBuffer8BitAccess" << std::endl;
    // storageBuffer8BitAccess -> Field -> VkBool32
    os << "value: " << t.storageBuffer8BitAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uniformAndStorageBuffer8BitAccess" << std::endl;
    // uniformAndStorageBuffer8BitAccess -> Field -> VkBool32
    os << "value: " << t.uniformAndStorageBuffer8BitAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storagePushConstant8" << std::endl;
    // storagePushConstant8 -> Field -> VkBool32
    os << "value: " << t.storagePushConstant8 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderBufferInt64Atomics" << std::endl;
    // shaderBufferInt64Atomics -> Field -> VkBool32
    os << "value: " << t.shaderBufferInt64Atomics << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSharedInt64Atomics" << std::endl;
    // shaderSharedInt64Atomics -> Field -> VkBool32
    os << "value: " << t.shaderSharedInt64Atomics << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderFloat16" << std::endl;
    // shaderFloat16 -> Field -> VkBool32
    os << "value: " << t.shaderFloat16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderInt8" << std::endl;
    // shaderInt8 -> Field -> VkBool32
    os << "value: " << t.shaderInt8 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorIndexing" << std::endl;
    // descriptorIndexing -> Field -> VkBool32
    os << "value: " << t.descriptorIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderInputAttachmentArrayDynamicIndexing" << std::endl;
    // shaderInputAttachmentArrayDynamicIndexing -> Field -> VkBool32
    os << "value: " << t.shaderInputAttachmentArrayDynamicIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderUniformTexelBufferArrayDynamicIndexing" << std::endl;
    // shaderUniformTexelBufferArrayDynamicIndexing -> Field -> VkBool32
    os << "value: " << t.shaderUniformTexelBufferArrayDynamicIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageTexelBufferArrayDynamicIndexing" << std::endl;
    // shaderStorageTexelBufferArrayDynamicIndexing -> Field -> VkBool32
    os << "value: " << t.shaderStorageTexelBufferArrayDynamicIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderUniformBufferArrayNonUniformIndexing" << std::endl;
    // shaderUniformBufferArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderUniformBufferArrayNonUniformIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSampledImageArrayNonUniformIndexing" << std::endl;
    // shaderSampledImageArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderSampledImageArrayNonUniformIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageBufferArrayNonUniformIndexing" << std::endl;
    // shaderStorageBufferArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderStorageBufferArrayNonUniformIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageImageArrayNonUniformIndexing" << std::endl;
    // shaderStorageImageArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderStorageImageArrayNonUniformIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderInputAttachmentArrayNonUniformIndexing" << std::endl;
    // shaderInputAttachmentArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderInputAttachmentArrayNonUniformIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderUniformTexelBufferArrayNonUniformIndexing" << std::endl;
    // shaderUniformTexelBufferArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderUniformTexelBufferArrayNonUniformIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageTexelBufferArrayNonUniformIndexing" << std::endl;
    // shaderStorageTexelBufferArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderStorageTexelBufferArrayNonUniformIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingUniformBufferUpdateAfterBind" << std::endl;
    // descriptorBindingUniformBufferUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingUniformBufferUpdateAfterBind << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingSampledImageUpdateAfterBind" << std::endl;
    // descriptorBindingSampledImageUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingSampledImageUpdateAfterBind << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingStorageImageUpdateAfterBind" << std::endl;
    // descriptorBindingStorageImageUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingStorageImageUpdateAfterBind << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingStorageBufferUpdateAfterBind" << std::endl;
    // descriptorBindingStorageBufferUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingStorageBufferUpdateAfterBind << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingUniformTexelBufferUpdateAfterBind" << std::endl;
    // descriptorBindingUniformTexelBufferUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingUniformTexelBufferUpdateAfterBind << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingStorageTexelBufferUpdateAfterBind" << std::endl;
    // descriptorBindingStorageTexelBufferUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingStorageTexelBufferUpdateAfterBind << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingUpdateUnusedWhilePending" << std::endl;
    // descriptorBindingUpdateUnusedWhilePending -> Field -> VkBool32
    os << "value: " << t.descriptorBindingUpdateUnusedWhilePending << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingPartiallyBound" << std::endl;
    // descriptorBindingPartiallyBound -> Field -> VkBool32
    os << "value: " << t.descriptorBindingPartiallyBound << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingVariableDescriptorCount" << std::endl;
    // descriptorBindingVariableDescriptorCount -> Field -> VkBool32
    os << "value: " << t.descriptorBindingVariableDescriptorCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  runtimeDescriptorArray" << std::endl;
    // runtimeDescriptorArray -> Field -> VkBool32
    os << "value: " << t.runtimeDescriptorArray << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samplerFilterMinmax" << std::endl;
    // samplerFilterMinmax -> Field -> VkBool32
    os << "value: " << t.samplerFilterMinmax << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  scalarBlockLayout" << std::endl;
    // scalarBlockLayout -> Field -> VkBool32
    os << "value: " << t.scalarBlockLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imagelessFramebuffer" << std::endl;
    // imagelessFramebuffer -> Field -> VkBool32
    os << "value: " << t.imagelessFramebuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uniformBufferStandardLayout" << std::endl;
    // uniformBufferStandardLayout -> Field -> VkBool32
    os << "value: " << t.uniformBufferStandardLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSubgroupExtendedTypes" << std::endl;
    // shaderSubgroupExtendedTypes -> Field -> VkBool32
    os << "value: " << t.shaderSubgroupExtendedTypes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  separateDepthStencilLayouts" << std::endl;
    // separateDepthStencilLayouts -> Field -> VkBool32
    os << "value: " << t.separateDepthStencilLayouts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hostQueryReset" << std::endl;
    // hostQueryReset -> Field -> VkBool32
    os << "value: " << t.hostQueryReset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  timelineSemaphore" << std::endl;
    // timelineSemaphore -> Field -> VkBool32
    os << "value: " << t.timelineSemaphore << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferDeviceAddress" << std::endl;
    // bufferDeviceAddress -> Field -> VkBool32
    os << "value: " << t.bufferDeviceAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferDeviceAddressCaptureReplay" << std::endl;
    // bufferDeviceAddressCaptureReplay -> Field -> VkBool32
    os << "value: " << t.bufferDeviceAddressCaptureReplay << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferDeviceAddressMultiDevice" << std::endl;
    // bufferDeviceAddressMultiDevice -> Field -> VkBool32
    os << "value: " << t.bufferDeviceAddressMultiDevice << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vulkanMemoryModel" << std::endl;
    // vulkanMemoryModel -> Field -> VkBool32
    os << "value: " << t.vulkanMemoryModel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vulkanMemoryModelDeviceScope" << std::endl;
    // vulkanMemoryModelDeviceScope -> Field -> VkBool32
    os << "value: " << t.vulkanMemoryModelDeviceScope << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vulkanMemoryModelAvailabilityVisibilityChains" << std::endl;
    // vulkanMemoryModelAvailabilityVisibilityChains -> Field -> VkBool32
    os << "value: " << t.vulkanMemoryModelAvailabilityVisibilityChains << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderOutputViewportIndex" << std::endl;
    // shaderOutputViewportIndex -> Field -> VkBool32
    os << "value: " << t.shaderOutputViewportIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderOutputLayer" << std::endl;
    // shaderOutputLayer -> Field -> VkBool32
    os << "value: " << t.shaderOutputLayer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subgroupBroadcastDynamicId" << std::endl;
    // subgroupBroadcastDynamicId -> Field -> VkBool32
    os << "value: " << t.subgroupBroadcastDynamicId << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkConformanceVersion &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  major" << std::endl;
    // major -> Field -> uint8_t
    os << "value: " << t.major << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minor" << std::endl;
    // minor -> Field -> uint8_t
    os << "value: " << t.minor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subminor" << std::endl;
    // subminor -> Field -> uint8_t
    os << "value: " << t.subminor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  patch" << std::endl;
    // patch -> Field -> uint8_t
    os << "value: " << t.patch << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceVulkan12Properties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  driverID" << std::endl;
    // driverID -> Field -> VkDriverId
    os << "value: " << t.driverID << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  driverName" << std::endl;
    // driverName -> Field -> FixedArray(char)
    os << "value: " << t.driverName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  driverInfo" << std::endl;
    // driverInfo -> Field -> FixedArray(char)
    os << "value: " << t.driverInfo << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  conformanceVersion" << std::endl;
    // conformanceVersion -> Field -> VkConformanceVersion
    os <<  "members:" << std::endl << t.conformanceVersion << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  denormBehaviorIndependence" << std::endl;
    // denormBehaviorIndependence -> Field -> VkShaderFloatControlsIndependence
    os << "value: " << t.denormBehaviorIndependence << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  roundingModeIndependence" << std::endl;
    // roundingModeIndependence -> Field -> VkShaderFloatControlsIndependence
    os << "value: " << t.roundingModeIndependence << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSignedZeroInfNanPreserveFloat16" << std::endl;
    // shaderSignedZeroInfNanPreserveFloat16 -> Field -> VkBool32
    os << "value: " << t.shaderSignedZeroInfNanPreserveFloat16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSignedZeroInfNanPreserveFloat32" << std::endl;
    // shaderSignedZeroInfNanPreserveFloat32 -> Field -> VkBool32
    os << "value: " << t.shaderSignedZeroInfNanPreserveFloat32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSignedZeroInfNanPreserveFloat64" << std::endl;
    // shaderSignedZeroInfNanPreserveFloat64 -> Field -> VkBool32
    os << "value: " << t.shaderSignedZeroInfNanPreserveFloat64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDenormPreserveFloat16" << std::endl;
    // shaderDenormPreserveFloat16 -> Field -> VkBool32
    os << "value: " << t.shaderDenormPreserveFloat16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDenormPreserveFloat32" << std::endl;
    // shaderDenormPreserveFloat32 -> Field -> VkBool32
    os << "value: " << t.shaderDenormPreserveFloat32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDenormPreserveFloat64" << std::endl;
    // shaderDenormPreserveFloat64 -> Field -> VkBool32
    os << "value: " << t.shaderDenormPreserveFloat64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDenormFlushToZeroFloat16" << std::endl;
    // shaderDenormFlushToZeroFloat16 -> Field -> VkBool32
    os << "value: " << t.shaderDenormFlushToZeroFloat16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDenormFlushToZeroFloat32" << std::endl;
    // shaderDenormFlushToZeroFloat32 -> Field -> VkBool32
    os << "value: " << t.shaderDenormFlushToZeroFloat32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDenormFlushToZeroFloat64" << std::endl;
    // shaderDenormFlushToZeroFloat64 -> Field -> VkBool32
    os << "value: " << t.shaderDenormFlushToZeroFloat64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderRoundingModeRTEFloat16" << std::endl;
    // shaderRoundingModeRTEFloat16 -> Field -> VkBool32
    os << "value: " << t.shaderRoundingModeRTEFloat16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderRoundingModeRTEFloat32" << std::endl;
    // shaderRoundingModeRTEFloat32 -> Field -> VkBool32
    os << "value: " << t.shaderRoundingModeRTEFloat32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderRoundingModeRTEFloat64" << std::endl;
    // shaderRoundingModeRTEFloat64 -> Field -> VkBool32
    os << "value: " << t.shaderRoundingModeRTEFloat64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderRoundingModeRTZFloat16" << std::endl;
    // shaderRoundingModeRTZFloat16 -> Field -> VkBool32
    os << "value: " << t.shaderRoundingModeRTZFloat16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderRoundingModeRTZFloat32" << std::endl;
    // shaderRoundingModeRTZFloat32 -> Field -> VkBool32
    os << "value: " << t.shaderRoundingModeRTZFloat32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderRoundingModeRTZFloat64" << std::endl;
    // shaderRoundingModeRTZFloat64 -> Field -> VkBool32
    os << "value: " << t.shaderRoundingModeRTZFloat64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxUpdateAfterBindDescriptorsInAllPools" << std::endl;
    // maxUpdateAfterBindDescriptorsInAllPools -> Field -> uint32_t
    os << "value: " << t.maxUpdateAfterBindDescriptorsInAllPools << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderUniformBufferArrayNonUniformIndexingNative" << std::endl;
    // shaderUniformBufferArrayNonUniformIndexingNative -> Field -> VkBool32
    os << "value: " << t.shaderUniformBufferArrayNonUniformIndexingNative << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSampledImageArrayNonUniformIndexingNative" << std::endl;
    // shaderSampledImageArrayNonUniformIndexingNative -> Field -> VkBool32
    os << "value: " << t.shaderSampledImageArrayNonUniformIndexingNative << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageBufferArrayNonUniformIndexingNative" << std::endl;
    // shaderStorageBufferArrayNonUniformIndexingNative -> Field -> VkBool32
    os << "value: " << t.shaderStorageBufferArrayNonUniformIndexingNative << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageImageArrayNonUniformIndexingNative" << std::endl;
    // shaderStorageImageArrayNonUniformIndexingNative -> Field -> VkBool32
    os << "value: " << t.shaderStorageImageArrayNonUniformIndexingNative << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderInputAttachmentArrayNonUniformIndexingNative" << std::endl;
    // shaderInputAttachmentArrayNonUniformIndexingNative -> Field -> VkBool32
    os << "value: " << t.shaderInputAttachmentArrayNonUniformIndexingNative << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  robustBufferAccessUpdateAfterBind" << std::endl;
    // robustBufferAccessUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.robustBufferAccessUpdateAfterBind << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  quadDivergentImplicitLod" << std::endl;
    // quadDivergentImplicitLod -> Field -> VkBool32
    os << "value: " << t.quadDivergentImplicitLod << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindSamplers" << std::endl;
    // maxPerStageDescriptorUpdateAfterBindSamplers -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindSamplers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindUniformBuffers" << std::endl;
    // maxPerStageDescriptorUpdateAfterBindUniformBuffers -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindUniformBuffers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindStorageBuffers" << std::endl;
    // maxPerStageDescriptorUpdateAfterBindStorageBuffers -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindStorageBuffers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindSampledImages" << std::endl;
    // maxPerStageDescriptorUpdateAfterBindSampledImages -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindSampledImages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindStorageImages" << std::endl;
    // maxPerStageDescriptorUpdateAfterBindStorageImages -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindStorageImages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindInputAttachments" << std::endl;
    // maxPerStageDescriptorUpdateAfterBindInputAttachments -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindInputAttachments << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageUpdateAfterBindResources" << std::endl;
    // maxPerStageUpdateAfterBindResources -> Field -> uint32_t
    os << "value: " << t.maxPerStageUpdateAfterBindResources << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindSamplers" << std::endl;
    // maxDescriptorSetUpdateAfterBindSamplers -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindSamplers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindUniformBuffers" << std::endl;
    // maxDescriptorSetUpdateAfterBindUniformBuffers -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindUniformBuffers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindUniformBuffersDynamic" << std::endl;
    // maxDescriptorSetUpdateAfterBindUniformBuffersDynamic -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindStorageBuffers" << std::endl;
    // maxDescriptorSetUpdateAfterBindStorageBuffers -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindStorageBuffers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindStorageBuffersDynamic" << std::endl;
    // maxDescriptorSetUpdateAfterBindStorageBuffersDynamic -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindSampledImages" << std::endl;
    // maxDescriptorSetUpdateAfterBindSampledImages -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindSampledImages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindStorageImages" << std::endl;
    // maxDescriptorSetUpdateAfterBindStorageImages -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindStorageImages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindInputAttachments" << std::endl;
    // maxDescriptorSetUpdateAfterBindInputAttachments -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindInputAttachments << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedDepthResolveModes" << std::endl;
    // supportedDepthResolveModes -> Field -> VkResolveModeFlags
    os << "value: " << t.supportedDepthResolveModes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedStencilResolveModes" << std::endl;
    // supportedStencilResolveModes -> Field -> VkResolveModeFlags
    os << "value: " << t.supportedStencilResolveModes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  independentResolveNone" << std::endl;
    // independentResolveNone -> Field -> VkBool32
    os << "value: " << t.independentResolveNone << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  independentResolve" << std::endl;
    // independentResolve -> Field -> VkBool32
    os << "value: " << t.independentResolve << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  filterMinmaxSingleComponentFormats" << std::endl;
    // filterMinmaxSingleComponentFormats -> Field -> VkBool32
    os << "value: " << t.filterMinmaxSingleComponentFormats << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  filterMinmaxImageComponentMapping" << std::endl;
    // filterMinmaxImageComponentMapping -> Field -> VkBool32
    os << "value: " << t.filterMinmaxImageComponentMapping << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTimelineSemaphoreValueDifference" << std::endl;
    // maxTimelineSemaphoreValueDifference -> Field -> uint64_t
    os << "value: " << t.maxTimelineSemaphoreValueDifference << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  framebufferIntegerColorSampleCounts" << std::endl;
    // framebufferIntegerColorSampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.framebufferIntegerColorSampleCounts << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageFormatListCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewFormatCount" << std::endl;
    // viewFormatCount -> Field -> uint32_t
    os << "value: " << t.viewFormatCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pViewFormats" << std::endl;
    // pViewFormats -> Field -> ConstDynamicArray(VkFormat)
    if (t.viewFormatCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkFormat" << std::endl;
        for (uint64_t i = 0; i < t.viewFormatCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pViewFormats << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAttachmentDescription2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkAttachmentDescriptionFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samples" << std::endl;
    // samples -> Field -> VkSampleCountFlagBits
    os << "value: " << t.samples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  loadOp" << std::endl;
    // loadOp -> Field -> VkAttachmentLoadOp
    os << "value: " << t.loadOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storeOp" << std::endl;
    // storeOp -> Field -> VkAttachmentStoreOp
    os << "value: " << t.storeOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilLoadOp" << std::endl;
    // stencilLoadOp -> Field -> VkAttachmentLoadOp
    os << "value: " << t.stencilLoadOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilStoreOp" << std::endl;
    // stencilStoreOp -> Field -> VkAttachmentStoreOp
    os << "value: " << t.stencilStoreOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  initialLayout" << std::endl;
    // initialLayout -> Field -> VkImageLayout
    os << "value: " << t.initialLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  finalLayout" << std::endl;
    // finalLayout -> Field -> VkImageLayout
    os << "value: " << t.finalLayout << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAttachmentReference2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachment" << std::endl;
    // attachment -> Field -> uint32_t
    os << "value: " << t.attachment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layout" << std::endl;
    // layout -> Field -> VkImageLayout
    os << "value: " << t.layout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  aspectMask" << std::endl;
    // aspectMask -> Field -> VkImageAspectFlags
    os << "value: " << t.aspectMask << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSubpassDescription2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkSubpassDescriptionFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineBindPoint" << std::endl;
    // pipelineBindPoint -> Field -> VkPipelineBindPoint
    os << "value: " << t.pipelineBindPoint << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewMask" << std::endl;
    // viewMask -> Field -> uint32_t
    os << "value: " << t.viewMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  inputAttachmentCount" << std::endl;
    // inputAttachmentCount -> Field -> uint32_t
    os << "value: " << t.inputAttachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInputAttachments" << std::endl;
    // pInputAttachments -> Field -> ConstDynamicArray(VkAttachmentReference2)
    if (t.inputAttachmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkAttachmentReference2" << std::endl;
        for (uint64_t i = 0; i < t.inputAttachmentCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pInputAttachments << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  colorAttachmentCount" << std::endl;
    // colorAttachmentCount -> Field -> uint32_t
    os << "value: " << t.colorAttachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pColorAttachments" << std::endl;
    // pColorAttachments -> Field -> ConstDynamicArray(VkAttachmentReference2)
    if (t.colorAttachmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkAttachmentReference2" << std::endl;
        for (uint64_t i = 0; i < t.colorAttachmentCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pColorAttachments << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pResolveAttachments" << std::endl;
    // pResolveAttachments -> Field -> ConstDynamicArray(VkAttachmentReference2)
    if (t.colorAttachmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkAttachmentReference2" << std::endl;
        for (uint64_t i = 0; i < t.colorAttachmentCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pResolveAttachments << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDepthStencilAttachment" << std::endl;
    // pointer
    if (t.pDepthStencilAttachment != nullptr) {
      os <<  "members:" << std::endl << *t.pDepthStencilAttachment << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preserveAttachmentCount" << std::endl;
    // preserveAttachmentCount -> Field -> uint32_t
    os << "value: " << t.preserveAttachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPreserveAttachments" << std::endl;
    // pPreserveAttachments -> Field -> ConstDynamicArray(uint32_t)
    if (t.preserveAttachmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.preserveAttachmentCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pPreserveAttachments << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSubpassDependency2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcSubpass" << std::endl;
    // srcSubpass -> Field -> uint32_t
    os << "value: " << t.srcSubpass << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstSubpass" << std::endl;
    // dstSubpass -> Field -> uint32_t
    os << "value: " << t.dstSubpass << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcStageMask" << std::endl;
    // srcStageMask -> Field -> VkPipelineStageFlags
    os << "value: " << t.srcStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstStageMask" << std::endl;
    // dstStageMask -> Field -> VkPipelineStageFlags
    os << "value: " << t.dstStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcAccessMask" << std::endl;
    // srcAccessMask -> Field -> VkAccessFlags
    os << "value: " << t.srcAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstAccessMask" << std::endl;
    // dstAccessMask -> Field -> VkAccessFlags
    os << "value: " << t.dstAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dependencyFlags" << std::endl;
    // dependencyFlags -> Field -> VkDependencyFlags
    os << "value: " << t.dependencyFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewOffset" << std::endl;
    // viewOffset -> Field -> int32_t
    os << "value: " << t.viewOffset << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRenderPassCreateInfo2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkRenderPassCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentCount" << std::endl;
    // attachmentCount -> Field -> uint32_t
    os << "value: " << t.attachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAttachments" << std::endl;
    // pAttachments -> Field -> ConstDynamicArray(VkAttachmentDescription2)
    if (t.attachmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkAttachmentDescription2" << std::endl;
        for (uint64_t i = 0; i < t.attachmentCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pAttachments << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subpassCount" << std::endl;
    // subpassCount -> Field -> uint32_t
    os << "value: " << t.subpassCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSubpasses" << std::endl;
    // pSubpasses -> Field -> ConstDynamicArray(VkSubpassDescription2)
    if (t.subpassCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSubpassDescription2" << std::endl;
        for (uint64_t i = 0; i < t.subpassCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pSubpasses << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dependencyCount" << std::endl;
    // dependencyCount -> Field -> uint32_t
    os << "value: " << t.dependencyCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDependencies" << std::endl;
    // pDependencies -> Field -> ConstDynamicArray(VkSubpassDependency2)
    if (t.dependencyCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSubpassDependency2" << std::endl;
        for (uint64_t i = 0; i < t.dependencyCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pDependencies << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  correlatedViewMaskCount" << std::endl;
    // correlatedViewMaskCount -> Field -> uint32_t
    os << "value: " << t.correlatedViewMaskCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCorrelatedViewMasks" << std::endl;
    // pCorrelatedViewMasks -> Field -> ConstDynamicArray(uint32_t)
    if (t.correlatedViewMaskCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.correlatedViewMaskCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pCorrelatedViewMasks << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSubpassBeginInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  contents" << std::endl;
    // contents -> Field -> VkSubpassContents
    os << "value: " << t.contents << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSubpassEndInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDevice8BitStorageFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storageBuffer8BitAccess" << std::endl;
    // storageBuffer8BitAccess -> Field -> VkBool32
    os << "value: " << t.storageBuffer8BitAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uniformAndStorageBuffer8BitAccess" << std::endl;
    // uniformAndStorageBuffer8BitAccess -> Field -> VkBool32
    os << "value: " << t.uniformAndStorageBuffer8BitAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storagePushConstant8" << std::endl;
    // storagePushConstant8 -> Field -> VkBool32
    os << "value: " << t.storagePushConstant8 << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceDriverProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  driverID" << std::endl;
    // driverID -> Field -> VkDriverId
    os << "value: " << t.driverID << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  driverName" << std::endl;
    // driverName -> Field -> FixedArray(char)
    os << "value: " << t.driverName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  driverInfo" << std::endl;
    // driverInfo -> Field -> FixedArray(char)
    os << "value: " << t.driverInfo << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  conformanceVersion" << std::endl;
    // conformanceVersion -> Field -> VkConformanceVersion
    os <<  "members:" << std::endl << t.conformanceVersion << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderAtomicInt64Features &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderBufferInt64Atomics" << std::endl;
    // shaderBufferInt64Atomics -> Field -> VkBool32
    os << "value: " << t.shaderBufferInt64Atomics << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSharedInt64Atomics" << std::endl;
    // shaderSharedInt64Atomics -> Field -> VkBool32
    os << "value: " << t.shaderSharedInt64Atomics << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderFloat16Int8Features &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderFloat16" << std::endl;
    // shaderFloat16 -> Field -> VkBool32
    os << "value: " << t.shaderFloat16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderInt8" << std::endl;
    // shaderInt8 -> Field -> VkBool32
    os << "value: " << t.shaderInt8 << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceFloatControlsProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  denormBehaviorIndependence" << std::endl;
    // denormBehaviorIndependence -> Field -> VkShaderFloatControlsIndependence
    os << "value: " << t.denormBehaviorIndependence << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  roundingModeIndependence" << std::endl;
    // roundingModeIndependence -> Field -> VkShaderFloatControlsIndependence
    os << "value: " << t.roundingModeIndependence << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSignedZeroInfNanPreserveFloat16" << std::endl;
    // shaderSignedZeroInfNanPreserveFloat16 -> Field -> VkBool32
    os << "value: " << t.shaderSignedZeroInfNanPreserveFloat16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSignedZeroInfNanPreserveFloat32" << std::endl;
    // shaderSignedZeroInfNanPreserveFloat32 -> Field -> VkBool32
    os << "value: " << t.shaderSignedZeroInfNanPreserveFloat32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSignedZeroInfNanPreserveFloat64" << std::endl;
    // shaderSignedZeroInfNanPreserveFloat64 -> Field -> VkBool32
    os << "value: " << t.shaderSignedZeroInfNanPreserveFloat64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDenormPreserveFloat16" << std::endl;
    // shaderDenormPreserveFloat16 -> Field -> VkBool32
    os << "value: " << t.shaderDenormPreserveFloat16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDenormPreserveFloat32" << std::endl;
    // shaderDenormPreserveFloat32 -> Field -> VkBool32
    os << "value: " << t.shaderDenormPreserveFloat32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDenormPreserveFloat64" << std::endl;
    // shaderDenormPreserveFloat64 -> Field -> VkBool32
    os << "value: " << t.shaderDenormPreserveFloat64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDenormFlushToZeroFloat16" << std::endl;
    // shaderDenormFlushToZeroFloat16 -> Field -> VkBool32
    os << "value: " << t.shaderDenormFlushToZeroFloat16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDenormFlushToZeroFloat32" << std::endl;
    // shaderDenormFlushToZeroFloat32 -> Field -> VkBool32
    os << "value: " << t.shaderDenormFlushToZeroFloat32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDenormFlushToZeroFloat64" << std::endl;
    // shaderDenormFlushToZeroFloat64 -> Field -> VkBool32
    os << "value: " << t.shaderDenormFlushToZeroFloat64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderRoundingModeRTEFloat16" << std::endl;
    // shaderRoundingModeRTEFloat16 -> Field -> VkBool32
    os << "value: " << t.shaderRoundingModeRTEFloat16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderRoundingModeRTEFloat32" << std::endl;
    // shaderRoundingModeRTEFloat32 -> Field -> VkBool32
    os << "value: " << t.shaderRoundingModeRTEFloat32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderRoundingModeRTEFloat64" << std::endl;
    // shaderRoundingModeRTEFloat64 -> Field -> VkBool32
    os << "value: " << t.shaderRoundingModeRTEFloat64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderRoundingModeRTZFloat16" << std::endl;
    // shaderRoundingModeRTZFloat16 -> Field -> VkBool32
    os << "value: " << t.shaderRoundingModeRTZFloat16 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderRoundingModeRTZFloat32" << std::endl;
    // shaderRoundingModeRTZFloat32 -> Field -> VkBool32
    os << "value: " << t.shaderRoundingModeRTZFloat32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderRoundingModeRTZFloat64" << std::endl;
    // shaderRoundingModeRTZFloat64 -> Field -> VkBool32
    os << "value: " << t.shaderRoundingModeRTZFloat64 << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDescriptorSetLayoutBindingFlagsCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bindingCount" << std::endl;
    // bindingCount -> Field -> uint32_t
    os << "value: " << t.bindingCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBindingFlags" << std::endl;
    // pBindingFlags -> Field -> ConstDynamicArray(VkDescriptorBindingFlags)
    if (t.bindingCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDescriptorBindingFlags" << std::endl;
        for (uint64_t i = 0; i < t.bindingCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pBindingFlags << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceDescriptorIndexingFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderInputAttachmentArrayDynamicIndexing" << std::endl;
    // shaderInputAttachmentArrayDynamicIndexing -> Field -> VkBool32
    os << "value: " << t.shaderInputAttachmentArrayDynamicIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderUniformTexelBufferArrayDynamicIndexing" << std::endl;
    // shaderUniformTexelBufferArrayDynamicIndexing -> Field -> VkBool32
    os << "value: " << t.shaderUniformTexelBufferArrayDynamicIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageTexelBufferArrayDynamicIndexing" << std::endl;
    // shaderStorageTexelBufferArrayDynamicIndexing -> Field -> VkBool32
    os << "value: " << t.shaderStorageTexelBufferArrayDynamicIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderUniformBufferArrayNonUniformIndexing" << std::endl;
    // shaderUniformBufferArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderUniformBufferArrayNonUniformIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSampledImageArrayNonUniformIndexing" << std::endl;
    // shaderSampledImageArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderSampledImageArrayNonUniformIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageBufferArrayNonUniformIndexing" << std::endl;
    // shaderStorageBufferArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderStorageBufferArrayNonUniformIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageImageArrayNonUniformIndexing" << std::endl;
    // shaderStorageImageArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderStorageImageArrayNonUniformIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderInputAttachmentArrayNonUniformIndexing" << std::endl;
    // shaderInputAttachmentArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderInputAttachmentArrayNonUniformIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderUniformTexelBufferArrayNonUniformIndexing" << std::endl;
    // shaderUniformTexelBufferArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderUniformTexelBufferArrayNonUniformIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageTexelBufferArrayNonUniformIndexing" << std::endl;
    // shaderStorageTexelBufferArrayNonUniformIndexing -> Field -> VkBool32
    os << "value: " << t.shaderStorageTexelBufferArrayNonUniformIndexing << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingUniformBufferUpdateAfterBind" << std::endl;
    // descriptorBindingUniformBufferUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingUniformBufferUpdateAfterBind << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingSampledImageUpdateAfterBind" << std::endl;
    // descriptorBindingSampledImageUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingSampledImageUpdateAfterBind << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingStorageImageUpdateAfterBind" << std::endl;
    // descriptorBindingStorageImageUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingStorageImageUpdateAfterBind << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingStorageBufferUpdateAfterBind" << std::endl;
    // descriptorBindingStorageBufferUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingStorageBufferUpdateAfterBind << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingUniformTexelBufferUpdateAfterBind" << std::endl;
    // descriptorBindingUniformTexelBufferUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingUniformTexelBufferUpdateAfterBind << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingStorageTexelBufferUpdateAfterBind" << std::endl;
    // descriptorBindingStorageTexelBufferUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingStorageTexelBufferUpdateAfterBind << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingUpdateUnusedWhilePending" << std::endl;
    // descriptorBindingUpdateUnusedWhilePending -> Field -> VkBool32
    os << "value: " << t.descriptorBindingUpdateUnusedWhilePending << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingPartiallyBound" << std::endl;
    // descriptorBindingPartiallyBound -> Field -> VkBool32
    os << "value: " << t.descriptorBindingPartiallyBound << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingVariableDescriptorCount" << std::endl;
    // descriptorBindingVariableDescriptorCount -> Field -> VkBool32
    os << "value: " << t.descriptorBindingVariableDescriptorCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  runtimeDescriptorArray" << std::endl;
    // runtimeDescriptorArray -> Field -> VkBool32
    os << "value: " << t.runtimeDescriptorArray << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceDescriptorIndexingProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxUpdateAfterBindDescriptorsInAllPools" << std::endl;
    // maxUpdateAfterBindDescriptorsInAllPools -> Field -> uint32_t
    os << "value: " << t.maxUpdateAfterBindDescriptorsInAllPools << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderUniformBufferArrayNonUniformIndexingNative" << std::endl;
    // shaderUniformBufferArrayNonUniformIndexingNative -> Field -> VkBool32
    os << "value: " << t.shaderUniformBufferArrayNonUniformIndexingNative << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSampledImageArrayNonUniformIndexingNative" << std::endl;
    // shaderSampledImageArrayNonUniformIndexingNative -> Field -> VkBool32
    os << "value: " << t.shaderSampledImageArrayNonUniformIndexingNative << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageBufferArrayNonUniformIndexingNative" << std::endl;
    // shaderStorageBufferArrayNonUniformIndexingNative -> Field -> VkBool32
    os << "value: " << t.shaderStorageBufferArrayNonUniformIndexingNative << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStorageImageArrayNonUniformIndexingNative" << std::endl;
    // shaderStorageImageArrayNonUniformIndexingNative -> Field -> VkBool32
    os << "value: " << t.shaderStorageImageArrayNonUniformIndexingNative << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderInputAttachmentArrayNonUniformIndexingNative" << std::endl;
    // shaderInputAttachmentArrayNonUniformIndexingNative -> Field -> VkBool32
    os << "value: " << t.shaderInputAttachmentArrayNonUniformIndexingNative << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  robustBufferAccessUpdateAfterBind" << std::endl;
    // robustBufferAccessUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.robustBufferAccessUpdateAfterBind << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  quadDivergentImplicitLod" << std::endl;
    // quadDivergentImplicitLod -> Field -> VkBool32
    os << "value: " << t.quadDivergentImplicitLod << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindSamplers" << std::endl;
    // maxPerStageDescriptorUpdateAfterBindSamplers -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindSamplers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindUniformBuffers" << std::endl;
    // maxPerStageDescriptorUpdateAfterBindUniformBuffers -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindUniformBuffers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindStorageBuffers" << std::endl;
    // maxPerStageDescriptorUpdateAfterBindStorageBuffers -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindStorageBuffers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindSampledImages" << std::endl;
    // maxPerStageDescriptorUpdateAfterBindSampledImages -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindSampledImages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindStorageImages" << std::endl;
    // maxPerStageDescriptorUpdateAfterBindStorageImages -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindStorageImages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindInputAttachments" << std::endl;
    // maxPerStageDescriptorUpdateAfterBindInputAttachments -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindInputAttachments << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageUpdateAfterBindResources" << std::endl;
    // maxPerStageUpdateAfterBindResources -> Field -> uint32_t
    os << "value: " << t.maxPerStageUpdateAfterBindResources << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindSamplers" << std::endl;
    // maxDescriptorSetUpdateAfterBindSamplers -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindSamplers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindUniformBuffers" << std::endl;
    // maxDescriptorSetUpdateAfterBindUniformBuffers -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindUniformBuffers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindUniformBuffersDynamic" << std::endl;
    // maxDescriptorSetUpdateAfterBindUniformBuffersDynamic -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindStorageBuffers" << std::endl;
    // maxDescriptorSetUpdateAfterBindStorageBuffers -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindStorageBuffers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindStorageBuffersDynamic" << std::endl;
    // maxDescriptorSetUpdateAfterBindStorageBuffersDynamic -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindSampledImages" << std::endl;
    // maxDescriptorSetUpdateAfterBindSampledImages -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindSampledImages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindStorageImages" << std::endl;
    // maxDescriptorSetUpdateAfterBindStorageImages -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindStorageImages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindInputAttachments" << std::endl;
    // maxDescriptorSetUpdateAfterBindInputAttachments -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindInputAttachments << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDescriptorSetVariableDescriptorCountAllocateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorSetCount" << std::endl;
    // descriptorSetCount -> Field -> uint32_t
    os << "value: " << t.descriptorSetCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDescriptorCounts" << std::endl;
    // pDescriptorCounts -> Field -> ConstDynamicArray(uint32_t)
    if (t.descriptorSetCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.descriptorSetCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pDescriptorCounts << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDescriptorSetVariableDescriptorCountLayoutSupport &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxVariableDescriptorCount" << std::endl;
    // maxVariableDescriptorCount -> Field -> uint32_t
    os << "value: " << t.maxVariableDescriptorCount << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSubpassDescriptionDepthStencilResolve &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthResolveMode" << std::endl;
    // depthResolveMode -> Field -> VkResolveModeFlagBits
    os << "value: " << t.depthResolveMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilResolveMode" << std::endl;
    // stencilResolveMode -> Field -> VkResolveModeFlagBits
    os << "value: " << t.stencilResolveMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDepthStencilResolveAttachment" << std::endl;
    // pointer
    if (t.pDepthStencilResolveAttachment != nullptr) {
      os <<  "members:" << std::endl << *t.pDepthStencilResolveAttachment << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceDepthStencilResolveProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedDepthResolveModes" << std::endl;
    // supportedDepthResolveModes -> Field -> VkResolveModeFlags
    os << "value: " << t.supportedDepthResolveModes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedStencilResolveModes" << std::endl;
    // supportedStencilResolveModes -> Field -> VkResolveModeFlags
    os << "value: " << t.supportedStencilResolveModes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  independentResolveNone" << std::endl;
    // independentResolveNone -> Field -> VkBool32
    os << "value: " << t.independentResolveNone << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  independentResolve" << std::endl;
    // independentResolve -> Field -> VkBool32
    os << "value: " << t.independentResolve << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceScalarBlockLayoutFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  scalarBlockLayout" << std::endl;
    // scalarBlockLayout -> Field -> VkBool32
    os << "value: " << t.scalarBlockLayout << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageStencilUsageCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilUsage" << std::endl;
    // stencilUsage -> Field -> VkImageUsageFlags
    os << "value: " << t.stencilUsage << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSamplerReductionModeCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  reductionMode" << std::endl;
    // reductionMode -> Field -> VkSamplerReductionMode
    os << "value: " << t.reductionMode << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceSamplerFilterMinmaxProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  filterMinmaxSingleComponentFormats" << std::endl;
    // filterMinmaxSingleComponentFormats -> Field -> VkBool32
    os << "value: " << t.filterMinmaxSingleComponentFormats << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  filterMinmaxImageComponentMapping" << std::endl;
    // filterMinmaxImageComponentMapping -> Field -> VkBool32
    os << "value: " << t.filterMinmaxImageComponentMapping << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceVulkanMemoryModelFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vulkanMemoryModel" << std::endl;
    // vulkanMemoryModel -> Field -> VkBool32
    os << "value: " << t.vulkanMemoryModel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vulkanMemoryModelDeviceScope" << std::endl;
    // vulkanMemoryModelDeviceScope -> Field -> VkBool32
    os << "value: " << t.vulkanMemoryModelDeviceScope << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vulkanMemoryModelAvailabilityVisibilityChains" << std::endl;
    // vulkanMemoryModelAvailabilityVisibilityChains -> Field -> VkBool32
    os << "value: " << t.vulkanMemoryModelAvailabilityVisibilityChains << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceImagelessFramebufferFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imagelessFramebuffer" << std::endl;
    // imagelessFramebuffer -> Field -> VkBool32
    os << "value: " << t.imagelessFramebuffer << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkFramebufferAttachmentImageInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkImageCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  usage" << std::endl;
    // usage -> Field -> VkImageUsageFlags
    os << "value: " << t.usage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  width" << std::endl;
    // width -> Field -> uint32_t
    os << "value: " << t.width << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  height" << std::endl;
    // height -> Field -> uint32_t
    os << "value: " << t.height << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layerCount" << std::endl;
    // layerCount -> Field -> uint32_t
    os << "value: " << t.layerCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewFormatCount" << std::endl;
    // viewFormatCount -> Field -> uint32_t
    os << "value: " << t.viewFormatCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pViewFormats" << std::endl;
    // pViewFormats -> Field -> ConstDynamicArray(VkFormat)
    if (t.viewFormatCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkFormat" << std::endl;
        for (uint64_t i = 0; i < t.viewFormatCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pViewFormats << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkFramebufferAttachmentsCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentImageInfoCount" << std::endl;
    // attachmentImageInfoCount -> Field -> uint32_t
    os << "value: " << t.attachmentImageInfoCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAttachmentImageInfos" << std::endl;
    // pAttachmentImageInfos -> Field -> ConstDynamicArray(VkFramebufferAttachmentImageInfo)
    if (t.attachmentImageInfoCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkFramebufferAttachmentImageInfo" << std::endl;
        for (uint64_t i = 0; i < t.attachmentImageInfoCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pAttachmentImageInfos << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRenderPassAttachmentBeginInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentCount" << std::endl;
    // attachmentCount -> Field -> uint32_t
    os << "value: " << t.attachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAttachments" << std::endl;
    // pAttachments -> Field -> ConstDynamicArray(VkImageView)
    if (t.attachmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkImageView" << std::endl;
        for (uint64_t i = 0; i < t.attachmentCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pAttachments << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceUniformBufferStandardLayoutFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uniformBufferStandardLayout" << std::endl;
    // uniformBufferStandardLayout -> Field -> VkBool32
    os << "value: " << t.uniformBufferStandardLayout << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSubgroupExtendedTypes" << std::endl;
    // shaderSubgroupExtendedTypes -> Field -> VkBool32
    os << "value: " << t.shaderSubgroupExtendedTypes << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  separateDepthStencilLayouts" << std::endl;
    // separateDepthStencilLayouts -> Field -> VkBool32
    os << "value: " << t.separateDepthStencilLayouts << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAttachmentReferenceStencilLayout &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilLayout" << std::endl;
    // stencilLayout -> Field -> VkImageLayout
    os << "value: " << t.stencilLayout << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAttachmentDescriptionStencilLayout &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilInitialLayout" << std::endl;
    // stencilInitialLayout -> Field -> VkImageLayout
    os << "value: " << t.stencilInitialLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilFinalLayout" << std::endl;
    // stencilFinalLayout -> Field -> VkImageLayout
    os << "value: " << t.stencilFinalLayout << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceHostQueryResetFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hostQueryReset" << std::endl;
    // hostQueryReset -> Field -> VkBool32
    os << "value: " << t.hostQueryReset << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceTimelineSemaphoreFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  timelineSemaphore" << std::endl;
    // timelineSemaphore -> Field -> VkBool32
    os << "value: " << t.timelineSemaphore << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceTimelineSemaphoreProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTimelineSemaphoreValueDifference" << std::endl;
    // maxTimelineSemaphoreValueDifference -> Field -> uint64_t
    os << "value: " << t.maxTimelineSemaphoreValueDifference << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSemaphoreTypeCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  semaphoreType" << std::endl;
    // semaphoreType -> Field -> VkSemaphoreType
    os << "value: " << t.semaphoreType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  initialValue" << std::endl;
    // initialValue -> Field -> uint64_t
    os << "value: " << t.initialValue << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkTimelineSemaphoreSubmitInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  waitSemaphoreValueCount" << std::endl;
    // waitSemaphoreValueCount -> Field -> uint32_t
    os << "value: " << t.waitSemaphoreValueCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pWaitSemaphoreValues" << std::endl;
    // pWaitSemaphoreValues -> Field -> ConstDynamicArray(uint64_t)
    if (t.waitSemaphoreValueCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint64_t" << std::endl;
        for (uint64_t i = 0; i < t.waitSemaphoreValueCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pWaitSemaphoreValues << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  signalSemaphoreValueCount" << std::endl;
    // signalSemaphoreValueCount -> Field -> uint32_t
    os << "value: " << t.signalSemaphoreValueCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSignalSemaphoreValues" << std::endl;
    // pSignalSemaphoreValues -> Field -> ConstDynamicArray(uint64_t)
    if (t.signalSemaphoreValueCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint64_t" << std::endl;
        for (uint64_t i = 0; i < t.signalSemaphoreValueCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pSignalSemaphoreValues << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSemaphoreWaitInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkSemaphoreWaitFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  semaphoreCount" << std::endl;
    // semaphoreCount -> Field -> uint32_t
    os << "value: " << t.semaphoreCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSemaphores" << std::endl;
    // pSemaphores -> Field -> ConstDynamicArray(VkSemaphore)
    if (t.semaphoreCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSemaphore" << std::endl;
        for (uint64_t i = 0; i < t.semaphoreCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pSemaphores << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pValues" << std::endl;
    // pValues -> Field -> ConstDynamicArray(uint64_t)
    if (t.semaphoreCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint64_t" << std::endl;
        for (uint64_t i = 0; i < t.semaphoreCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pValues << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSemaphoreSignalInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  semaphore" << std::endl;
    // semaphore -> Field -> VkSemaphore
    os << "value: " << t.semaphore << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  value" << std::endl;
    // value -> Field -> uint64_t
    os << "value: " << t.value << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceBufferDeviceAddressFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferDeviceAddress" << std::endl;
    // bufferDeviceAddress -> Field -> VkBool32
    os << "value: " << t.bufferDeviceAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferDeviceAddressCaptureReplay" << std::endl;
    // bufferDeviceAddressCaptureReplay -> Field -> VkBool32
    os << "value: " << t.bufferDeviceAddressCaptureReplay << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferDeviceAddressMultiDevice" << std::endl;
    // bufferDeviceAddressMultiDevice -> Field -> VkBool32
    os << "value: " << t.bufferDeviceAddressMultiDevice << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBufferDeviceAddressInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBufferOpaqueCaptureAddressCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  opaqueCaptureAddress" << std::endl;
    // opaqueCaptureAddress -> Field -> uint64_t
    os << "value: " << t.opaqueCaptureAddress << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMemoryOpaqueCaptureAddressAllocateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  opaqueCaptureAddress" << std::endl;
    // opaqueCaptureAddress -> Field -> uint64_t
    os << "value: " << t.opaqueCaptureAddress << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceMemoryOpaqueCaptureAddressInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memory" << std::endl;
    // memory -> Field -> VkDeviceMemory
    os << "value: " << t.memory << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceVulkan13Features &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  robustImageAccess" << std::endl;
    // robustImageAccess -> Field -> VkBool32
    os << "value: " << t.robustImageAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  inlineUniformBlock" << std::endl;
    // inlineUniformBlock -> Field -> VkBool32
    os << "value: " << t.inlineUniformBlock << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingInlineUniformBlockUpdateAfterBind" << std::endl;
    // descriptorBindingInlineUniformBlockUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingInlineUniformBlockUpdateAfterBind << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineCreationCacheControl" << std::endl;
    // pipelineCreationCacheControl -> Field -> VkBool32
    os << "value: " << t.pipelineCreationCacheControl << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  privateData" << std::endl;
    // privateData -> Field -> VkBool32
    os << "value: " << t.privateData << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDemoteToHelperInvocation" << std::endl;
    // shaderDemoteToHelperInvocation -> Field -> VkBool32
    os << "value: " << t.shaderDemoteToHelperInvocation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderTerminateInvocation" << std::endl;
    // shaderTerminateInvocation -> Field -> VkBool32
    os << "value: " << t.shaderTerminateInvocation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subgroupSizeControl" << std::endl;
    // subgroupSizeControl -> Field -> VkBool32
    os << "value: " << t.subgroupSizeControl << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  computeFullSubgroups" << std::endl;
    // computeFullSubgroups -> Field -> VkBool32
    os << "value: " << t.computeFullSubgroups << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  synchronization2" << std::endl;
    // synchronization2 -> Field -> VkBool32
    os << "value: " << t.synchronization2 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  textureCompressionASTC_HDR" << std::endl;
    // textureCompressionASTC_HDR -> Field -> VkBool32
    os << "value: " << t.textureCompressionASTC_HDR << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderZeroInitializeWorkgroupMemory" << std::endl;
    // shaderZeroInitializeWorkgroupMemory -> Field -> VkBool32
    os << "value: " << t.shaderZeroInitializeWorkgroupMemory << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dynamicRendering" << std::endl;
    // dynamicRendering -> Field -> VkBool32
    os << "value: " << t.dynamicRendering << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderIntegerDotProduct" << std::endl;
    // shaderIntegerDotProduct -> Field -> VkBool32
    os << "value: " << t.shaderIntegerDotProduct << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maintenance4" << std::endl;
    // maintenance4 -> Field -> VkBool32
    os << "value: " << t.maintenance4 << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceVulkan13Properties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minSubgroupSize" << std::endl;
    // minSubgroupSize -> Field -> uint32_t
    os << "value: " << t.minSubgroupSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSubgroupSize" << std::endl;
    // maxSubgroupSize -> Field -> uint32_t
    os << "value: " << t.maxSubgroupSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxComputeWorkgroupSubgroups" << std::endl;
    // maxComputeWorkgroupSubgroups -> Field -> uint32_t
    os << "value: " << t.maxComputeWorkgroupSubgroups << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  requiredSubgroupSizeStages" << std::endl;
    // requiredSubgroupSizeStages -> Field -> VkShaderStageFlags
    os << "value: " << t.requiredSubgroupSizeStages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxInlineUniformBlockSize" << std::endl;
    // maxInlineUniformBlockSize -> Field -> uint32_t
    os << "value: " << t.maxInlineUniformBlockSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorInlineUniformBlocks" << std::endl;
    // maxPerStageDescriptorInlineUniformBlocks -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorInlineUniformBlocks << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks" << std::endl;
    // maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetInlineUniformBlocks" << std::endl;
    // maxDescriptorSetInlineUniformBlocks -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetInlineUniformBlocks << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindInlineUniformBlocks" << std::endl;
    // maxDescriptorSetUpdateAfterBindInlineUniformBlocks -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindInlineUniformBlocks << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxInlineUniformTotalSize" << std::endl;
    // maxInlineUniformTotalSize -> Field -> uint32_t
    os << "value: " << t.maxInlineUniformTotalSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct8BitUnsignedAccelerated" << std::endl;
    // integerDotProduct8BitUnsignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct8BitUnsignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct8BitSignedAccelerated" << std::endl;
    // integerDotProduct8BitSignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct8BitSignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct8BitMixedSignednessAccelerated" << std::endl;
    // integerDotProduct8BitMixedSignednessAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct8BitMixedSignednessAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct4x8BitPackedUnsignedAccelerated" << std::endl;
    // integerDotProduct4x8BitPackedUnsignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct4x8BitPackedUnsignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct4x8BitPackedSignedAccelerated" << std::endl;
    // integerDotProduct4x8BitPackedSignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct4x8BitPackedSignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct4x8BitPackedMixedSignednessAccelerated" << std::endl;
    // integerDotProduct4x8BitPackedMixedSignednessAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct4x8BitPackedMixedSignednessAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct16BitUnsignedAccelerated" << std::endl;
    // integerDotProduct16BitUnsignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct16BitUnsignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct16BitSignedAccelerated" << std::endl;
    // integerDotProduct16BitSignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct16BitSignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct16BitMixedSignednessAccelerated" << std::endl;
    // integerDotProduct16BitMixedSignednessAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct16BitMixedSignednessAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct32BitUnsignedAccelerated" << std::endl;
    // integerDotProduct32BitUnsignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct32BitUnsignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct32BitSignedAccelerated" << std::endl;
    // integerDotProduct32BitSignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct32BitSignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct32BitMixedSignednessAccelerated" << std::endl;
    // integerDotProduct32BitMixedSignednessAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct32BitMixedSignednessAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct64BitUnsignedAccelerated" << std::endl;
    // integerDotProduct64BitUnsignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct64BitUnsignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct64BitSignedAccelerated" << std::endl;
    // integerDotProduct64BitSignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct64BitSignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct64BitMixedSignednessAccelerated" << std::endl;
    // integerDotProduct64BitMixedSignednessAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct64BitMixedSignednessAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating8BitUnsignedAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating8BitUnsignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating8BitSignedAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating8BitSignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating8BitSignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating16BitUnsignedAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating16BitUnsignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating16BitSignedAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating16BitSignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating16BitSignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating32BitUnsignedAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating32BitUnsignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating32BitSignedAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating32BitSignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating32BitSignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating64BitUnsignedAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating64BitUnsignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating64BitSignedAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating64BitSignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating64BitSignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storageTexelBufferOffsetAlignmentBytes" << std::endl;
    // storageTexelBufferOffsetAlignmentBytes -> Field -> VkDeviceSize
    os << "value: " << t.storageTexelBufferOffsetAlignmentBytes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storageTexelBufferOffsetSingleTexelAlignment" << std::endl;
    // storageTexelBufferOffsetSingleTexelAlignment -> Field -> VkBool32
    os << "value: " << t.storageTexelBufferOffsetSingleTexelAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uniformTexelBufferOffsetAlignmentBytes" << std::endl;
    // uniformTexelBufferOffsetAlignmentBytes -> Field -> VkDeviceSize
    os << "value: " << t.uniformTexelBufferOffsetAlignmentBytes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uniformTexelBufferOffsetSingleTexelAlignment" << std::endl;
    // uniformTexelBufferOffsetSingleTexelAlignment -> Field -> VkBool32
    os << "value: " << t.uniformTexelBufferOffsetSingleTexelAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxBufferSize" << std::endl;
    // maxBufferSize -> Field -> VkDeviceSize
    os << "value: " << t.maxBufferSize << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineCreationFeedback &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineCreationFeedbackFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  duration" << std::endl;
    // duration -> Field -> uint64_t
    os << "value: " << t.duration << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineCreationFeedbackCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPipelineCreationFeedback" << std::endl;
    // pointer
    if (t.pPipelineCreationFeedback != nullptr) {
      os <<  "members:" << std::endl << *t.pPipelineCreationFeedback << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineStageCreationFeedbackCount" << std::endl;
    // pipelineStageCreationFeedbackCount -> Field -> uint32_t
    os << "value: " << t.pipelineStageCreationFeedbackCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPipelineStageCreationFeedbacks" << std::endl;
    // pPipelineStageCreationFeedbacks -> Field -> DynamicArray(VkPipelineCreationFeedback)
    if (t.pipelineStageCreationFeedbackCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkPipelineCreationFeedback" << std::endl;
        for (uint64_t i = 0; i < t.pipelineStageCreationFeedbackCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pPipelineStageCreationFeedbacks << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderTerminateInvocationFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderTerminateInvocation" << std::endl;
    // shaderTerminateInvocation -> Field -> VkBool32
    os << "value: " << t.shaderTerminateInvocation << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceToolProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  name" << std::endl;
    // name -> Field -> FixedArray(char)
    os << "value: " << t.name << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  version" << std::endl;
    // version -> Field -> FixedArray(char)
    os << "value: " << t.version << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  purposes" << std::endl;
    // purposes -> Field -> VkToolPurposeFlags
    os << "value: " << t.purposes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  description" << std::endl;
    // description -> Field -> FixedArray(char)
    os << "value: " << t.description << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layer" << std::endl;
    // layer -> Field -> FixedArray(char)
    os << "value: " << t.layer << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDemoteToHelperInvocation" << std::endl;
    // shaderDemoteToHelperInvocation -> Field -> VkBool32
    os << "value: " << t.shaderDemoteToHelperInvocation << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDevicePrivateDataFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  privateData" << std::endl;
    // privateData -> Field -> VkBool32
    os << "value: " << t.privateData << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDevicePrivateDataCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  privateDataSlotRequestCount" << std::endl;
    // privateDataSlotRequestCount -> Field -> uint32_t
    os << "value: " << t.privateDataSlotRequestCount << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPrivateDataSlotCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPrivateDataSlotCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDevicePipelineCreationCacheControlFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineCreationCacheControl" << std::endl;
    // pipelineCreationCacheControl -> Field -> VkBool32
    os << "value: " << t.pipelineCreationCacheControl << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMemoryBarrier2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcStageMask" << std::endl;
    // srcStageMask -> Field -> VkPipelineStageFlags2
    os << "value: " << t.srcStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcAccessMask" << std::endl;
    // srcAccessMask -> Field -> VkAccessFlags2
    os << "value: " << t.srcAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstStageMask" << std::endl;
    // dstStageMask -> Field -> VkPipelineStageFlags2
    os << "value: " << t.dstStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstAccessMask" << std::endl;
    // dstAccessMask -> Field -> VkAccessFlags2
    os << "value: " << t.dstAccessMask << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBufferMemoryBarrier2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcStageMask" << std::endl;
    // srcStageMask -> Field -> VkPipelineStageFlags2
    os << "value: " << t.srcStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcAccessMask" << std::endl;
    // srcAccessMask -> Field -> VkAccessFlags2
    os << "value: " << t.srcAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstStageMask" << std::endl;
    // dstStageMask -> Field -> VkPipelineStageFlags2
    os << "value: " << t.dstStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstAccessMask" << std::endl;
    // dstAccessMask -> Field -> VkAccessFlags2
    os << "value: " << t.dstAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcQueueFamilyIndex" << std::endl;
    // srcQueueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.srcQueueFamilyIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstQueueFamilyIndex" << std::endl;
    // dstQueueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.dstQueueFamilyIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageMemoryBarrier2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcStageMask" << std::endl;
    // srcStageMask -> Field -> VkPipelineStageFlags2
    os << "value: " << t.srcStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcAccessMask" << std::endl;
    // srcAccessMask -> Field -> VkAccessFlags2
    os << "value: " << t.srcAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstStageMask" << std::endl;
    // dstStageMask -> Field -> VkPipelineStageFlags2
    os << "value: " << t.dstStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstAccessMask" << std::endl;
    // dstAccessMask -> Field -> VkAccessFlags2
    os << "value: " << t.dstAccessMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  oldLayout" << std::endl;
    // oldLayout -> Field -> VkImageLayout
    os << "value: " << t.oldLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  newLayout" << std::endl;
    // newLayout -> Field -> VkImageLayout
    os << "value: " << t.newLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcQueueFamilyIndex" << std::endl;
    // srcQueueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.srcQueueFamilyIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstQueueFamilyIndex" << std::endl;
    // dstQueueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.dstQueueFamilyIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << t.image << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subresourceRange" << std::endl;
    // subresourceRange -> Field -> VkImageSubresourceRange
    os <<  "members:" << std::endl << t.subresourceRange << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDependencyInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dependencyFlags" << std::endl;
    // dependencyFlags -> Field -> VkDependencyFlags
    os << "value: " << t.dependencyFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryBarrierCount" << std::endl;
    // memoryBarrierCount -> Field -> uint32_t
    os << "value: " << t.memoryBarrierCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMemoryBarriers" << std::endl;
    // pMemoryBarriers -> Field -> ConstDynamicArray(VkMemoryBarrier2)
    if (t.memoryBarrierCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkMemoryBarrier2" << std::endl;
        for (uint64_t i = 0; i < t.memoryBarrierCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pMemoryBarriers << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferMemoryBarrierCount" << std::endl;
    // bufferMemoryBarrierCount -> Field -> uint32_t
    os << "value: " << t.bufferMemoryBarrierCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBufferMemoryBarriers" << std::endl;
    // pBufferMemoryBarriers -> Field -> ConstDynamicArray(VkBufferMemoryBarrier2)
    if (t.bufferMemoryBarrierCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkBufferMemoryBarrier2" << std::endl;
        for (uint64_t i = 0; i < t.bufferMemoryBarrierCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pBufferMemoryBarriers << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageMemoryBarrierCount" << std::endl;
    // imageMemoryBarrierCount -> Field -> uint32_t
    os << "value: " << t.imageMemoryBarrierCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pImageMemoryBarriers" << std::endl;
    // pImageMemoryBarriers -> Field -> ConstDynamicArray(VkImageMemoryBarrier2)
    if (t.imageMemoryBarrierCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkImageMemoryBarrier2" << std::endl;
        for (uint64_t i = 0; i < t.imageMemoryBarrierCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pImageMemoryBarriers << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSemaphoreSubmitInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  semaphore" << std::endl;
    // semaphore -> Field -> VkSemaphore
    os << "value: " << t.semaphore << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  value" << std::endl;
    // value -> Field -> uint64_t
    os << "value: " << t.value << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stageMask" << std::endl;
    // stageMask -> Field -> VkPipelineStageFlags2
    os << "value: " << t.stageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceIndex" << std::endl;
    // deviceIndex -> Field -> uint32_t
    os << "value: " << t.deviceIndex << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCommandBufferSubmitInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << t.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceMask" << std::endl;
    // deviceMask -> Field -> uint32_t
    os << "value: " << t.deviceMask << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSubmitInfo2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkSubmitFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  waitSemaphoreInfoCount" << std::endl;
    // waitSemaphoreInfoCount -> Field -> uint32_t
    os << "value: " << t.waitSemaphoreInfoCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pWaitSemaphoreInfos" << std::endl;
    // pWaitSemaphoreInfos -> Field -> ConstDynamicArray(VkSemaphoreSubmitInfo)
    if (t.waitSemaphoreInfoCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSemaphoreSubmitInfo" << std::endl;
        for (uint64_t i = 0; i < t.waitSemaphoreInfoCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pWaitSemaphoreInfos << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBufferInfoCount" << std::endl;
    // commandBufferInfoCount -> Field -> uint32_t
    os << "value: " << t.commandBufferInfoCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCommandBufferInfos" << std::endl;
    // pCommandBufferInfos -> Field -> ConstDynamicArray(VkCommandBufferSubmitInfo)
    if (t.commandBufferInfoCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkCommandBufferSubmitInfo" << std::endl;
        for (uint64_t i = 0; i < t.commandBufferInfoCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pCommandBufferInfos << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  signalSemaphoreInfoCount" << std::endl;
    // signalSemaphoreInfoCount -> Field -> uint32_t
    os << "value: " << t.signalSemaphoreInfoCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSignalSemaphoreInfos" << std::endl;
    // pSignalSemaphoreInfos -> Field -> ConstDynamicArray(VkSemaphoreSubmitInfo)
    if (t.signalSemaphoreInfoCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSemaphoreSubmitInfo" << std::endl;
        for (uint64_t i = 0; i < t.signalSemaphoreInfoCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pSignalSemaphoreInfos << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceSynchronization2Features &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  synchronization2" << std::endl;
    // synchronization2 -> Field -> VkBool32
    os << "value: " << t.synchronization2 << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderZeroInitializeWorkgroupMemory" << std::endl;
    // shaderZeroInitializeWorkgroupMemory -> Field -> VkBool32
    os << "value: " << t.shaderZeroInitializeWorkgroupMemory << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceImageRobustnessFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  robustImageAccess" << std::endl;
    // robustImageAccess -> Field -> VkBool32
    os << "value: " << t.robustImageAccess << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBufferCopy2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcOffset" << std::endl;
    // srcOffset -> Field -> VkDeviceSize
    os << "value: " << t.srcOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffset" << std::endl;
    // dstOffset -> Field -> VkDeviceSize
    os << "value: " << t.dstOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCopyBufferInfo2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcBuffer" << std::endl;
    // srcBuffer -> Field -> VkBuffer
    os << "value: " << t.srcBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBuffer" << std::endl;
    // dstBuffer -> Field -> VkBuffer
    os << "value: " << t.dstBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << t.regionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkBufferCopy2)
    if (t.regionCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkBufferCopy2" << std::endl;
        for (uint64_t i = 0; i < t.regionCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pRegions << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageCopy2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcSubresource" << std::endl;
    // srcSubresource -> Field -> VkImageSubresourceLayers
    os <<  "members:" << std::endl << t.srcSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcOffset" << std::endl;
    // srcOffset -> Field -> VkOffset3D
    os <<  "members:" << std::endl << t.srcOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstSubresource" << std::endl;
    // dstSubresource -> Field -> VkImageSubresourceLayers
    os <<  "members:" << std::endl << t.dstSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffset" << std::endl;
    // dstOffset -> Field -> VkOffset3D
    os <<  "members:" << std::endl << t.dstOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extent" << std::endl;
    // extent -> Field -> VkExtent3D
    os <<  "members:" << std::endl << t.extent << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCopyImageInfo2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImage" << std::endl;
    // srcImage -> Field -> VkImage
    os << "value: " << t.srcImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImageLayout" << std::endl;
    // srcImageLayout -> Field -> VkImageLayout
    os << "value: " << t.srcImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImage" << std::endl;
    // dstImage -> Field -> VkImage
    os << "value: " << t.dstImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImageLayout" << std::endl;
    // dstImageLayout -> Field -> VkImageLayout
    os << "value: " << t.dstImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << t.regionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkImageCopy2)
    if (t.regionCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkImageCopy2" << std::endl;
        for (uint64_t i = 0; i < t.regionCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pRegions << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBufferImageCopy2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferOffset" << std::endl;
    // bufferOffset -> Field -> VkDeviceSize
    os << "value: " << t.bufferOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferRowLength" << std::endl;
    // bufferRowLength -> Field -> uint32_t
    os << "value: " << t.bufferRowLength << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferImageHeight" << std::endl;
    // bufferImageHeight -> Field -> uint32_t
    os << "value: " << t.bufferImageHeight << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageSubresource" << std::endl;
    // imageSubresource -> Field -> VkImageSubresourceLayers
    os <<  "members:" << std::endl << t.imageSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageOffset" << std::endl;
    // imageOffset -> Field -> VkOffset3D
    os <<  "members:" << std::endl << t.imageOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageExtent" << std::endl;
    // imageExtent -> Field -> VkExtent3D
    os <<  "members:" << std::endl << t.imageExtent << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCopyBufferToImageInfo2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcBuffer" << std::endl;
    // srcBuffer -> Field -> VkBuffer
    os << "value: " << t.srcBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImage" << std::endl;
    // dstImage -> Field -> VkImage
    os << "value: " << t.dstImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImageLayout" << std::endl;
    // dstImageLayout -> Field -> VkImageLayout
    os << "value: " << t.dstImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << t.regionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkBufferImageCopy2)
    if (t.regionCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkBufferImageCopy2" << std::endl;
        for (uint64_t i = 0; i < t.regionCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pRegions << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCopyImageToBufferInfo2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImage" << std::endl;
    // srcImage -> Field -> VkImage
    os << "value: " << t.srcImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImageLayout" << std::endl;
    // srcImageLayout -> Field -> VkImageLayout
    os << "value: " << t.srcImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBuffer" << std::endl;
    // dstBuffer -> Field -> VkBuffer
    os << "value: " << t.dstBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << t.regionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkBufferImageCopy2)
    if (t.regionCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkBufferImageCopy2" << std::endl;
        for (uint64_t i = 0; i < t.regionCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pRegions << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageBlit2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcSubresource" << std::endl;
    // srcSubresource -> Field -> VkImageSubresourceLayers
    os <<  "members:" << std::endl << t.srcSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcOffsets" << std::endl;
    // srcOffsets -> Field -> FixedArray(VkOffset3D)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkOffset3D" << std::endl;
        for (uint64_t i = 0; i < 2; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.srcOffsets << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstSubresource" << std::endl;
    // dstSubresource -> Field -> VkImageSubresourceLayers
    os <<  "members:" << std::endl << t.dstSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffsets" << std::endl;
    // dstOffsets -> Field -> FixedArray(VkOffset3D)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkOffset3D" << std::endl;
        for (uint64_t i = 0; i < 2; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.dstOffsets << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBlitImageInfo2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImage" << std::endl;
    // srcImage -> Field -> VkImage
    os << "value: " << t.srcImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImageLayout" << std::endl;
    // srcImageLayout -> Field -> VkImageLayout
    os << "value: " << t.srcImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImage" << std::endl;
    // dstImage -> Field -> VkImage
    os << "value: " << t.dstImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImageLayout" << std::endl;
    // dstImageLayout -> Field -> VkImageLayout
    os << "value: " << t.dstImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << t.regionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkImageBlit2)
    if (t.regionCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkImageBlit2" << std::endl;
        for (uint64_t i = 0; i < t.regionCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pRegions << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  filter" << std::endl;
    // filter -> Field -> VkFilter
    os << "value: " << t.filter << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageResolve2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcSubresource" << std::endl;
    // srcSubresource -> Field -> VkImageSubresourceLayers
    os <<  "members:" << std::endl << t.srcSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcOffset" << std::endl;
    // srcOffset -> Field -> VkOffset3D
    os <<  "members:" << std::endl << t.srcOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstSubresource" << std::endl;
    // dstSubresource -> Field -> VkImageSubresourceLayers
    os <<  "members:" << std::endl << t.dstSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffset" << std::endl;
    // dstOffset -> Field -> VkOffset3D
    os <<  "members:" << std::endl << t.dstOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extent" << std::endl;
    // extent -> Field -> VkExtent3D
    os <<  "members:" << std::endl << t.extent << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkResolveImageInfo2 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImage" << std::endl;
    // srcImage -> Field -> VkImage
    os << "value: " << t.srcImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImageLayout" << std::endl;
    // srcImageLayout -> Field -> VkImageLayout
    os << "value: " << t.srcImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImage" << std::endl;
    // dstImage -> Field -> VkImage
    os << "value: " << t.dstImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImageLayout" << std::endl;
    // dstImageLayout -> Field -> VkImageLayout
    os << "value: " << t.dstImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << t.regionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkImageResolve2)
    if (t.regionCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkImageResolve2" << std::endl;
        for (uint64_t i = 0; i < t.regionCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pRegions << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceSubgroupSizeControlFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subgroupSizeControl" << std::endl;
    // subgroupSizeControl -> Field -> VkBool32
    os << "value: " << t.subgroupSizeControl << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  computeFullSubgroups" << std::endl;
    // computeFullSubgroups -> Field -> VkBool32
    os << "value: " << t.computeFullSubgroups << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceSubgroupSizeControlProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minSubgroupSize" << std::endl;
    // minSubgroupSize -> Field -> uint32_t
    os << "value: " << t.minSubgroupSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSubgroupSize" << std::endl;
    // maxSubgroupSize -> Field -> uint32_t
    os << "value: " << t.maxSubgroupSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxComputeWorkgroupSubgroups" << std::endl;
    // maxComputeWorkgroupSubgroups -> Field -> uint32_t
    os << "value: " << t.maxComputeWorkgroupSubgroups << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  requiredSubgroupSizeStages" << std::endl;
    // requiredSubgroupSizeStages -> Field -> VkShaderStageFlags
    os << "value: " << t.requiredSubgroupSizeStages << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineShaderStageRequiredSubgroupSizeCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  requiredSubgroupSize" << std::endl;
    // requiredSubgroupSize -> Field -> uint32_t
    os << "value: " << t.requiredSubgroupSize << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceInlineUniformBlockFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  inlineUniformBlock" << std::endl;
    // inlineUniformBlock -> Field -> VkBool32
    os << "value: " << t.inlineUniformBlock << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingInlineUniformBlockUpdateAfterBind" << std::endl;
    // descriptorBindingInlineUniformBlockUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingInlineUniformBlockUpdateAfterBind << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceInlineUniformBlockProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxInlineUniformBlockSize" << std::endl;
    // maxInlineUniformBlockSize -> Field -> uint32_t
    os << "value: " << t.maxInlineUniformBlockSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorInlineUniformBlocks" << std::endl;
    // maxPerStageDescriptorInlineUniformBlocks -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorInlineUniformBlocks << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks" << std::endl;
    // maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetInlineUniformBlocks" << std::endl;
    // maxDescriptorSetInlineUniformBlocks -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetInlineUniformBlocks << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindInlineUniformBlocks" << std::endl;
    // maxDescriptorSetUpdateAfterBindInlineUniformBlocks -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindInlineUniformBlocks << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkWriteDescriptorSetInlineUniformBlock &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dataSize" << std::endl;
    // dataSize -> Field -> uint32_t
    os << "value: " << t.dataSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pData" << std::endl;
    if (t.dataSize == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << std::hex;
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        const uint8_t *p = (const uint8_t *)t.pData;
        for (uint64_t i = 0; i < t.dataSize; ++i) {
          os << "- 0x" << p[i] << std::endl;
        }
      }
      os << std::dec;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDescriptorPoolInlineUniformBlockCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxInlineUniformBlockBindings" << std::endl;
    // maxInlineUniformBlockBindings -> Field -> uint32_t
    os << "value: " << t.maxInlineUniformBlockBindings << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceTextureCompressionASTCHDRFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  textureCompressionASTC_HDR" << std::endl;
    // textureCompressionASTC_HDR -> Field -> VkBool32
    os << "value: " << t.textureCompressionASTC_HDR << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRenderingAttachmentInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageView" << std::endl;
    // imageView -> Field -> VkImageView
    os << "value: " << t.imageView << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageLayout" << std::endl;
    // imageLayout -> Field -> VkImageLayout
    os << "value: " << t.imageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  resolveMode" << std::endl;
    // resolveMode -> Field -> VkResolveModeFlagBits
    os << "value: " << t.resolveMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  resolveImageView" << std::endl;
    // resolveImageView -> Field -> VkImageView
    os << "value: " << t.resolveImageView << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  resolveImageLayout" << std::endl;
    // resolveImageLayout -> Field -> VkImageLayout
    os << "value: " << t.resolveImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  loadOp" << std::endl;
    // loadOp -> Field -> VkAttachmentLoadOp
    os << "value: " << t.loadOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storeOp" << std::endl;
    // storeOp -> Field -> VkAttachmentStoreOp
    os << "value: " << t.storeOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  clearValue" << std::endl;
    // clearValue -> Field -> VkClearValue
    os <<  "members:" << std::endl << t.clearValue << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRenderingInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkRenderingFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  renderArea" << std::endl;
    // renderArea -> Field -> VkRect2D
    os <<  "members:" << std::endl << t.renderArea << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layerCount" << std::endl;
    // layerCount -> Field -> uint32_t
    os << "value: " << t.layerCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewMask" << std::endl;
    // viewMask -> Field -> uint32_t
    os << "value: " << t.viewMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  colorAttachmentCount" << std::endl;
    // colorAttachmentCount -> Field -> uint32_t
    os << "value: " << t.colorAttachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pColorAttachments" << std::endl;
    // pColorAttachments -> Field -> ConstDynamicArray(VkRenderingAttachmentInfo)
    if (t.colorAttachmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkRenderingAttachmentInfo" << std::endl;
        for (uint64_t i = 0; i < t.colorAttachmentCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pColorAttachments << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDepthAttachment" << std::endl;
    // pointer
    if (t.pDepthAttachment != nullptr) {
      os <<  "members:" << std::endl << *t.pDepthAttachment << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStencilAttachment" << std::endl;
    // pointer
    if (t.pStencilAttachment != nullptr) {
      os <<  "members:" << std::endl << *t.pStencilAttachment << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineRenderingCreateInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewMask" << std::endl;
    // viewMask -> Field -> uint32_t
    os << "value: " << t.viewMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  colorAttachmentCount" << std::endl;
    // colorAttachmentCount -> Field -> uint32_t
    os << "value: " << t.colorAttachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pColorAttachmentFormats" << std::endl;
    // pColorAttachmentFormats -> Field -> ConstDynamicArray(VkFormat)
    if (t.colorAttachmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkFormat" << std::endl;
        for (uint64_t i = 0; i < t.colorAttachmentCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pColorAttachmentFormats << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthAttachmentFormat" << std::endl;
    // depthAttachmentFormat -> Field -> VkFormat
    os << "value: " << t.depthAttachmentFormat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilAttachmentFormat" << std::endl;
    // stencilAttachmentFormat -> Field -> VkFormat
    os << "value: " << t.stencilAttachmentFormat << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceDynamicRenderingFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dynamicRendering" << std::endl;
    // dynamicRendering -> Field -> VkBool32
    os << "value: " << t.dynamicRendering << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCommandBufferInheritanceRenderingInfo &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkRenderingFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewMask" << std::endl;
    // viewMask -> Field -> uint32_t
    os << "value: " << t.viewMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  colorAttachmentCount" << std::endl;
    // colorAttachmentCount -> Field -> uint32_t
    os << "value: " << t.colorAttachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pColorAttachmentFormats" << std::endl;
    // pColorAttachmentFormats -> Field -> ConstDynamicArray(VkFormat)
    if (t.colorAttachmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkFormat" << std::endl;
        for (uint64_t i = 0; i < t.colorAttachmentCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pColorAttachmentFormats << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthAttachmentFormat" << std::endl;
    // depthAttachmentFormat -> Field -> VkFormat
    os << "value: " << t.depthAttachmentFormat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilAttachmentFormat" << std::endl;
    // stencilAttachmentFormat -> Field -> VkFormat
    os << "value: " << t.stencilAttachmentFormat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rasterizationSamples" << std::endl;
    // rasterizationSamples -> Field -> VkSampleCountFlagBits
    os << "value: " << t.rasterizationSamples << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderIntegerDotProductFeatures &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderIntegerDotProduct" << std::endl;
    // shaderIntegerDotProduct -> Field -> VkBool32
    os << "value: " << t.shaderIntegerDotProduct << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderIntegerDotProductProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct8BitUnsignedAccelerated" << std::endl;
    // integerDotProduct8BitUnsignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct8BitUnsignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct8BitSignedAccelerated" << std::endl;
    // integerDotProduct8BitSignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct8BitSignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct8BitMixedSignednessAccelerated" << std::endl;
    // integerDotProduct8BitMixedSignednessAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct8BitMixedSignednessAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct4x8BitPackedUnsignedAccelerated" << std::endl;
    // integerDotProduct4x8BitPackedUnsignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct4x8BitPackedUnsignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct4x8BitPackedSignedAccelerated" << std::endl;
    // integerDotProduct4x8BitPackedSignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct4x8BitPackedSignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct4x8BitPackedMixedSignednessAccelerated" << std::endl;
    // integerDotProduct4x8BitPackedMixedSignednessAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct4x8BitPackedMixedSignednessAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct16BitUnsignedAccelerated" << std::endl;
    // integerDotProduct16BitUnsignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct16BitUnsignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct16BitSignedAccelerated" << std::endl;
    // integerDotProduct16BitSignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct16BitSignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct16BitMixedSignednessAccelerated" << std::endl;
    // integerDotProduct16BitMixedSignednessAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct16BitMixedSignednessAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct32BitUnsignedAccelerated" << std::endl;
    // integerDotProduct32BitUnsignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct32BitUnsignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct32BitSignedAccelerated" << std::endl;
    // integerDotProduct32BitSignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct32BitSignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct32BitMixedSignednessAccelerated" << std::endl;
    // integerDotProduct32BitMixedSignednessAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct32BitMixedSignednessAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct64BitUnsignedAccelerated" << std::endl;
    // integerDotProduct64BitUnsignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct64BitUnsignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct64BitSignedAccelerated" << std::endl;
    // integerDotProduct64BitSignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct64BitSignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProduct64BitMixedSignednessAccelerated" << std::endl;
    // integerDotProduct64BitMixedSignednessAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProduct64BitMixedSignednessAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating8BitUnsignedAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating8BitUnsignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating8BitSignedAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating8BitSignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating8BitSignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating16BitUnsignedAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating16BitUnsignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating16BitSignedAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating16BitSignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating16BitSignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating32BitUnsignedAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating32BitUnsignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating32BitSignedAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating32BitSignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating32BitSignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating64BitUnsignedAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating64BitUnsignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating64BitSignedAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating64BitSignedAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating64BitSignedAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated" << std::endl;
    // integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated -> Field -> VkBool32
    os << "value: " << t.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceTexelBufferAlignmentProperties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storageTexelBufferOffsetAlignmentBytes" << std::endl;
    // storageTexelBufferOffsetAlignmentBytes -> Field -> VkDeviceSize
    os << "value: " << t.storageTexelBufferOffsetAlignmentBytes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storageTexelBufferOffsetSingleTexelAlignment" << std::endl;
    // storageTexelBufferOffsetSingleTexelAlignment -> Field -> VkBool32
    os << "value: " << t.storageTexelBufferOffsetSingleTexelAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uniformTexelBufferOffsetAlignmentBytes" << std::endl;
    // uniformTexelBufferOffsetAlignmentBytes -> Field -> VkDeviceSize
    os << "value: " << t.uniformTexelBufferOffsetAlignmentBytes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uniformTexelBufferOffsetSingleTexelAlignment" << std::endl;
    // uniformTexelBufferOffsetSingleTexelAlignment -> Field -> VkBool32
    os << "value: " << t.uniformTexelBufferOffsetSingleTexelAlignment << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkFormatProperties3 &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  linearTilingFeatures" << std::endl;
    // linearTilingFeatures -> Field -> VkFormatFeatureFlags2
    os << "value: " << t.linearTilingFeatures << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  optimalTilingFeatures" << std::endl;
    // optimalTilingFeatures -> Field -> VkFormatFeatureFlags2
    os << "value: " << t.optimalTilingFeatures << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferFeatures" << std::endl;
    // bufferFeatures -> Field -> VkFormatFeatureFlags2
    os << "value: " << t.bufferFeatures << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceMaintenance4Features &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maintenance4" << std::endl;
    // maintenance4 -> Field -> VkBool32
    os << "value: " << t.maintenance4 << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceMaintenance4Properties &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxBufferSize" << std::endl;
    // maxBufferSize -> Field -> VkDeviceSize
    os << "value: " << t.maxBufferSize << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceBufferMemoryRequirements &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCreateInfo" << std::endl;
    // pointer
    if (t.pCreateInfo != nullptr) {
      os <<  "members:" << std::endl << *t.pCreateInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceImageMemoryRequirements &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCreateInfo" << std::endl;
    // pointer
    if (t.pCreateInfo != nullptr) {
      os <<  "members:" << std::endl << *t.pCreateInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  planeAspect" << std::endl;
    // planeAspect -> Field -> VkImageAspectFlagBits
    os << "value: " << t.planeAspect << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSurfaceCapabilitiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minImageCount" << std::endl;
    // minImageCount -> Field -> uint32_t
    os << "value: " << t.minImageCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxImageCount" << std::endl;
    // maxImageCount -> Field -> uint32_t
    os << "value: " << t.maxImageCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  currentExtent" << std::endl;
    // currentExtent -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.currentExtent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minImageExtent" << std::endl;
    // minImageExtent -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.minImageExtent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxImageExtent" << std::endl;
    // maxImageExtent -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.maxImageExtent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxImageArrayLayers" << std::endl;
    // maxImageArrayLayers -> Field -> uint32_t
    os << "value: " << t.maxImageArrayLayers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedTransforms" << std::endl;
    // supportedTransforms -> Field -> VkSurfaceTransformFlagsKHR
    os << "value: " << t.supportedTransforms << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  currentTransform" << std::endl;
    // currentTransform -> Field -> VkSurfaceTransformFlagBitsKHR
    os << "value: " << t.currentTransform << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedCompositeAlpha" << std::endl;
    // supportedCompositeAlpha -> Field -> VkCompositeAlphaFlagsKHR
    os << "value: " << t.supportedCompositeAlpha << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedUsageFlags" << std::endl;
    // supportedUsageFlags -> Field -> VkImageUsageFlags
    os << "value: " << t.supportedUsageFlags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSurfaceFormatKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  colorSpace" << std::endl;
    // colorSpace -> Field -> VkColorSpaceKHR
    os << "value: " << t.colorSpace << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSwapchainCreateInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkSwapchainCreateFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  surface" << std::endl;
    // surface -> Field -> VkSurfaceKHR
    os << "value: " << t.surface << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minImageCount" << std::endl;
    // minImageCount -> Field -> uint32_t
    os << "value: " << t.minImageCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageFormat" << std::endl;
    // imageFormat -> Field -> VkFormat
    os << "value: " << t.imageFormat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageColorSpace" << std::endl;
    // imageColorSpace -> Field -> VkColorSpaceKHR
    os << "value: " << t.imageColorSpace << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageExtent" << std::endl;
    // imageExtent -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.imageExtent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageArrayLayers" << std::endl;
    // imageArrayLayers -> Field -> uint32_t
    os << "value: " << t.imageArrayLayers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageUsage" << std::endl;
    // imageUsage -> Field -> VkImageUsageFlags
    os << "value: " << t.imageUsage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageSharingMode" << std::endl;
    // imageSharingMode -> Field -> VkSharingMode
    os << "value: " << t.imageSharingMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueFamilyIndexCount" << std::endl;
    // queueFamilyIndexCount -> Field -> uint32_t
    os << "value: " << t.queueFamilyIndexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pQueueFamilyIndices" << std::endl;
    // pQueueFamilyIndices -> Field -> ConstDynamicArray(uint32_t)
    if (t.queueFamilyIndexCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.queueFamilyIndexCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pQueueFamilyIndices << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preTransform" << std::endl;
    // preTransform -> Field -> VkSurfaceTransformFlagBitsKHR
    os << "value: " << t.preTransform << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compositeAlpha" << std::endl;
    // compositeAlpha -> Field -> VkCompositeAlphaFlagBitsKHR
    os << "value: " << t.compositeAlpha << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  presentMode" << std::endl;
    // presentMode -> Field -> VkPresentModeKHR
    os << "value: " << t.presentMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  clipped" << std::endl;
    // clipped -> Field -> VkBool32
    os << "value: " << t.clipped << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  oldSwapchain" << std::endl;
    // oldSwapchain -> Field -> VkSwapchainKHR
    os << "value: " << t.oldSwapchain << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPresentInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  waitSemaphoreCount" << std::endl;
    // waitSemaphoreCount -> Field -> uint32_t
    os << "value: " << t.waitSemaphoreCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pWaitSemaphores" << std::endl;
    // pWaitSemaphores -> Field -> ConstDynamicArray(VkSemaphore)
    if (t.waitSemaphoreCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSemaphore" << std::endl;
        for (uint64_t i = 0; i < t.waitSemaphoreCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pWaitSemaphores << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  swapchainCount" << std::endl;
    // swapchainCount -> Field -> uint32_t
    os << "value: " << t.swapchainCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSwapchains" << std::endl;
    // pSwapchains -> Field -> ConstDynamicArray(VkSwapchainKHR)
    if (t.swapchainCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSwapchainKHR" << std::endl;
        for (uint64_t i = 0; i < t.swapchainCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pSwapchains << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pImageIndices" << std::endl;
    // pImageIndices -> Field -> ConstDynamicArray(uint32_t)
    if (t.swapchainCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.swapchainCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pImageIndices << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pResults" << std::endl;
    // pResults -> Field -> DynamicArray(VkResult)
    if (t.swapchainCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkResult" << std::endl;
        for (uint64_t i = 0; i < t.swapchainCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pResults << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageSwapchainCreateInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  swapchain" << std::endl;
    // swapchain -> Field -> VkSwapchainKHR
    os << "value: " << t.swapchain << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBindImageMemorySwapchainInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  swapchain" << std::endl;
    // swapchain -> Field -> VkSwapchainKHR
    os << "value: " << t.swapchain << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageIndex" << std::endl;
    // imageIndex -> Field -> uint32_t
    os << "value: " << t.imageIndex << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAcquireNextImageInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  swapchain" << std::endl;
    // swapchain -> Field -> VkSwapchainKHR
    os << "value: " << t.swapchain << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  timeout" << std::endl;
    // timeout -> Field -> uint64_t
    os << "value: " << t.timeout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  semaphore" << std::endl;
    // semaphore -> Field -> VkSemaphore
    os << "value: " << t.semaphore << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fence" << std::endl;
    // fence -> Field -> VkFence
    os << "value: " << t.fence << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceMask" << std::endl;
    // deviceMask -> Field -> uint32_t
    os << "value: " << t.deviceMask << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceGroupPresentCapabilitiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  presentMask" << std::endl;
    // presentMask -> Field -> FixedArray(uint32_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < VK_MAX_DEVICE_GROUP_SIZE; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.presentMask << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  modes" << std::endl;
    // modes -> Field -> VkDeviceGroupPresentModeFlagsKHR
    os << "value: " << t.modes << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceGroupPresentInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  swapchainCount" << std::endl;
    // swapchainCount -> Field -> uint32_t
    os << "value: " << t.swapchainCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDeviceMasks" << std::endl;
    // pDeviceMasks -> Field -> ConstDynamicArray(uint32_t)
    if (t.swapchainCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.swapchainCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pDeviceMasks << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mode" << std::endl;
    // mode -> Field -> VkDeviceGroupPresentModeFlagBitsKHR
    os << "value: " << t.mode << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceGroupSwapchainCreateInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  modes" << std::endl;
    // modes -> Field -> VkDeviceGroupPresentModeFlagsKHR
    os << "value: " << t.modes << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDisplayModeParametersKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  visibleRegion" << std::endl;
    // visibleRegion -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.visibleRegion << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  refreshRate" << std::endl;
    // refreshRate -> Field -> uint32_t
    os << "value: " << t.refreshRate << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDisplayModeCreateInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDisplayModeCreateFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  parameters" << std::endl;
    // parameters -> Field -> VkDisplayModeParametersKHR
    os <<  "members:" << std::endl << t.parameters << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDisplayModePropertiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displayMode" << std::endl;
    // displayMode -> Field -> VkDisplayModeKHR
    os << "value: " << t.displayMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  parameters" << std::endl;
    // parameters -> Field -> VkDisplayModeParametersKHR
    os <<  "members:" << std::endl << t.parameters << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDisplayPlaneCapabilitiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedAlpha" << std::endl;
    // supportedAlpha -> Field -> VkDisplayPlaneAlphaFlagsKHR
    os << "value: " << t.supportedAlpha << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minSrcPosition" << std::endl;
    // minSrcPosition -> Field -> VkOffset2D
    os <<  "members:" << std::endl << t.minSrcPosition << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSrcPosition" << std::endl;
    // maxSrcPosition -> Field -> VkOffset2D
    os <<  "members:" << std::endl << t.maxSrcPosition << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minSrcExtent" << std::endl;
    // minSrcExtent -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.minSrcExtent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSrcExtent" << std::endl;
    // maxSrcExtent -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.maxSrcExtent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minDstPosition" << std::endl;
    // minDstPosition -> Field -> VkOffset2D
    os <<  "members:" << std::endl << t.minDstPosition << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDstPosition" << std::endl;
    // maxDstPosition -> Field -> VkOffset2D
    os <<  "members:" << std::endl << t.maxDstPosition << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minDstExtent" << std::endl;
    // minDstExtent -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.minDstExtent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDstExtent" << std::endl;
    // maxDstExtent -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.maxDstExtent << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDisplayPlanePropertiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  currentDisplay" << std::endl;
    // currentDisplay -> Field -> VkDisplayKHR
    os << "value: " << t.currentDisplay << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  currentStackIndex" << std::endl;
    // currentStackIndex -> Field -> uint32_t
    os << "value: " << t.currentStackIndex << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDisplayPropertiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  display" << std::endl;
    // display -> Field -> VkDisplayKHR
    os << "value: " << t.display << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displayName" << std::endl;
    // displayName -> Field -> string
    os << "value: " << t.displayName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  physicalDimensions" << std::endl;
    // physicalDimensions -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.physicalDimensions << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  physicalResolution" << std::endl;
    // physicalResolution -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.physicalResolution << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedTransforms" << std::endl;
    // supportedTransforms -> Field -> VkSurfaceTransformFlagsKHR
    os << "value: " << t.supportedTransforms << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  planeReorderPossible" << std::endl;
    // planeReorderPossible -> Field -> VkBool32
    os << "value: " << t.planeReorderPossible << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  persistentContent" << std::endl;
    // persistentContent -> Field -> VkBool32
    os << "value: " << t.persistentContent << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDisplaySurfaceCreateInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDisplaySurfaceCreateFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displayMode" << std::endl;
    // displayMode -> Field -> VkDisplayModeKHR
    os << "value: " << t.displayMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  planeIndex" << std::endl;
    // planeIndex -> Field -> uint32_t
    os << "value: " << t.planeIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  planeStackIndex" << std::endl;
    // planeStackIndex -> Field -> uint32_t
    os << "value: " << t.planeStackIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transform" << std::endl;
    // transform -> Field -> VkSurfaceTransformFlagBitsKHR
    os << "value: " << t.transform << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  globalAlpha" << std::endl;
    // globalAlpha -> Field -> float
    os << "value: " << t.globalAlpha << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  alphaMode" << std::endl;
    // alphaMode -> Field -> VkDisplayPlaneAlphaFlagBitsKHR
    os << "value: " << t.alphaMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageExtent" << std::endl;
    // imageExtent -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.imageExtent << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDisplayPresentInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcRect" << std::endl;
    // srcRect -> Field -> VkRect2D
    os <<  "members:" << std::endl << t.srcRect << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstRect" << std::endl;
    // dstRect -> Field -> VkRect2D
    os <<  "members:" << std::endl << t.dstRect << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  persistent" << std::endl;
    // persistent -> Field -> VkBool32
    os << "value: " << t.persistent << std::endl;
  }
  return os;
}

#ifdef VK_USE_PLATFORM_XLIB_KHR
std::ostream &operator<<(std::ostream & os, const VkXlibSurfaceCreateInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkXlibSurfaceCreateFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dpy" << std::endl;
    // pointer
    if (t.dpy != nullptr) {
      os << "value: *t.dpy" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  window" << std::endl;
    // window -> Field -> Window
    os << "value: " << t.window << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_XLIB_KHR

#ifdef VK_USE_PLATFORM_XCB_KHR
std::ostream &operator<<(std::ostream & os, const VkXcbSurfaceCreateInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkXcbSurfaceCreateFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  connection" << std::endl;
    // pointer
    if (t.connection != nullptr) {
      os << "value: *t.connection" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  window" << std::endl;
    // window -> Field -> xcb_window_t
    os << "value: " << t.window << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_XCB_KHR

#ifdef VK_USE_PLATFORM_WAYLAND_KHR
std::ostream &operator<<(std::ostream & os, const VkWaylandSurfaceCreateInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkWaylandSurfaceCreateFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  display" << std::endl;
    // pointer
    if (t.display != nullptr) {
      os << "value: *t.display" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  surface" << std::endl;
    // pointer
    if (t.surface != nullptr) {
      os << "value: *t.surface" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}
#endif //VK_USE_PLATFORM_WAYLAND_KHR

#ifdef VK_USE_PLATFORM_ANDROID_KHR
std::ostream &operator<<(std::ostream & os, const VkAndroidSurfaceCreateInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkAndroidSurfaceCreateFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  window" << std::endl;
    // pointer
    if (t.window != nullptr) {
      os << "value: *t.window" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}
#endif //VK_USE_PLATFORM_ANDROID_KHR

#ifdef VK_USE_PLATFORM_WIN32_KHR
std::ostream &operator<<(std::ostream & os, const VkWin32SurfaceCreateInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkWin32SurfaceCreateFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hinstance" << std::endl;
    // hinstance -> Field -> HINSTANCE
    os << "value: " << t.hinstance << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hwnd" << std::endl;
    // hwnd -> Field -> HWND
    os << "value: " << t.hwnd << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_WIN32_KHR

std::ostream &operator<<(std::ostream & os, const VkQueueFamilyQueryResultStatusPropertiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryResultStatusSupport" << std::endl;
    // queryResultStatusSupport -> Field -> VkBool32
    os << "value: " << t.queryResultStatusSupport << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkQueueFamilyVideoPropertiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  videoCodecOperations" << std::endl;
    // videoCodecOperations -> Field -> VkVideoCodecOperationFlagsKHR
    os << "value: " << t.videoCodecOperations << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoProfileInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  videoCodecOperation" << std::endl;
    // videoCodecOperation -> Field -> VkVideoCodecOperationFlagBitsKHR
    os << "value: " << t.videoCodecOperation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  chromaSubsampling" << std::endl;
    // chromaSubsampling -> Field -> VkVideoChromaSubsamplingFlagsKHR
    os << "value: " << t.chromaSubsampling << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  lumaBitDepth" << std::endl;
    // lumaBitDepth -> Field -> VkVideoComponentBitDepthFlagsKHR
    os << "value: " << t.lumaBitDepth << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  chromaBitDepth" << std::endl;
    // chromaBitDepth -> Field -> VkVideoComponentBitDepthFlagsKHR
    os << "value: " << t.chromaBitDepth << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoProfileListInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  profileCount" << std::endl;
    // profileCount -> Field -> uint32_t
    os << "value: " << t.profileCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pProfiles" << std::endl;
    // pProfiles -> Field -> ConstDynamicArray(VkVideoProfileInfoKHR)
    if (t.profileCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkVideoProfileInfoKHR" << std::endl;
        for (uint64_t i = 0; i < t.profileCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pProfiles << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoCapabilitiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkVideoCapabilityFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minBitstreamBufferOffsetAlignment" << std::endl;
    // minBitstreamBufferOffsetAlignment -> Field -> VkDeviceSize
    os << "value: " << t.minBitstreamBufferOffsetAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minBitstreamBufferSizeAlignment" << std::endl;
    // minBitstreamBufferSizeAlignment -> Field -> VkDeviceSize
    os << "value: " << t.minBitstreamBufferSizeAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pictureAccessGranularity" << std::endl;
    // pictureAccessGranularity -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.pictureAccessGranularity << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minCodedExtent" << std::endl;
    // minCodedExtent -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.minCodedExtent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxCodedExtent" << std::endl;
    // maxCodedExtent -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.maxCodedExtent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDpbSlots" << std::endl;
    // maxDpbSlots -> Field -> uint32_t
    os << "value: " << t.maxDpbSlots << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxActiveReferencePictures" << std::endl;
    // maxActiveReferencePictures -> Field -> uint32_t
    os << "value: " << t.maxActiveReferencePictures << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stdHeaderVersion" << std::endl;
    // stdHeaderVersion -> Field -> VkExtensionProperties
    os <<  "members:" << std::endl << t.stdHeaderVersion << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceVideoFormatInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageUsage" << std::endl;
    // imageUsage -> Field -> VkImageUsageFlags
    os << "value: " << t.imageUsage << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoFormatPropertiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  componentMapping" << std::endl;
    // componentMapping -> Field -> VkComponentMapping
    os <<  "members:" << std::endl << t.componentMapping << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageCreateFlags" << std::endl;
    // imageCreateFlags -> Field -> VkImageCreateFlags
    os << "value: " << t.imageCreateFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageType" << std::endl;
    // imageType -> Field -> VkImageType
    os << "value: " << t.imageType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageTiling" << std::endl;
    // imageTiling -> Field -> VkImageTiling
    os << "value: " << t.imageTiling << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageUsageFlags" << std::endl;
    // imageUsageFlags -> Field -> VkImageUsageFlags
    os << "value: " << t.imageUsageFlags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoPictureResourceInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  codedOffset" << std::endl;
    // codedOffset -> Field -> VkOffset2D
    os <<  "members:" << std::endl << t.codedOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  codedExtent" << std::endl;
    // codedExtent -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.codedExtent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  baseArrayLayer" << std::endl;
    // baseArrayLayer -> Field -> uint32_t
    os << "value: " << t.baseArrayLayer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageViewBinding" << std::endl;
    // imageViewBinding -> Field -> VkImageView
    os << "value: " << t.imageViewBinding << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoReferenceSlotInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  slotIndex" << std::endl;
    // slotIndex -> Field -> int32_t
    os << "value: " << t.slotIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPictureResource" << std::endl;
    // pointer
    if (t.pPictureResource != nullptr) {
      os <<  "members:" << std::endl << *t.pPictureResource << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoSessionMemoryRequirementsKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryBindIndex" << std::endl;
    // memoryBindIndex -> Field -> uint32_t
    os << "value: " << t.memoryBindIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryRequirements" << std::endl;
    // memoryRequirements -> Field -> VkMemoryRequirements
    os <<  "members:" << std::endl << t.memoryRequirements << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBindVideoSessionMemoryInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryBindIndex" << std::endl;
    // memoryBindIndex -> Field -> uint32_t
    os << "value: " << t.memoryBindIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memory" << std::endl;
    // memory -> Field -> VkDeviceMemory
    os << "value: " << t.memory << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryOffset" << std::endl;
    // memoryOffset -> Field -> VkDeviceSize
    os << "value: " << t.memoryOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memorySize" << std::endl;
    // memorySize -> Field -> VkDeviceSize
    os << "value: " << t.memorySize << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoSessionCreateInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueFamilyIndex" << std::endl;
    // queueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.queueFamilyIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkVideoSessionCreateFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pVideoProfile" << std::endl;
    // pointer
    if (t.pVideoProfile != nullptr) {
      os <<  "members:" << std::endl << *t.pVideoProfile << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pictureFormat" << std::endl;
    // pictureFormat -> Field -> VkFormat
    os << "value: " << t.pictureFormat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxCodedExtent" << std::endl;
    // maxCodedExtent -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.maxCodedExtent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  referencePictureFormat" << std::endl;
    // referencePictureFormat -> Field -> VkFormat
    os << "value: " << t.referencePictureFormat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDpbSlots" << std::endl;
    // maxDpbSlots -> Field -> uint32_t
    os << "value: " << t.maxDpbSlots << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxActiveReferencePictures" << std::endl;
    // maxActiveReferencePictures -> Field -> uint32_t
    os << "value: " << t.maxActiveReferencePictures << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStdHeaderVersion" << std::endl;
    // pointer
    if (t.pStdHeaderVersion != nullptr) {
      os <<  "members:" << std::endl << *t.pStdHeaderVersion << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoSessionParametersCreateInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkVideoSessionParametersCreateFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  videoSessionParametersTemplate" << std::endl;
    // videoSessionParametersTemplate -> Field -> VkVideoSessionParametersKHR
    os << "value: " << t.videoSessionParametersTemplate << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  videoSession" << std::endl;
    // videoSession -> Field -> VkVideoSessionKHR
    os << "value: " << t.videoSession << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoSessionParametersUpdateInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  updateSequenceCount" << std::endl;
    // updateSequenceCount -> Field -> uint32_t
    os << "value: " << t.updateSequenceCount << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoBeginCodingInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkVideoBeginCodingFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  videoSession" << std::endl;
    // videoSession -> Field -> VkVideoSessionKHR
    os << "value: " << t.videoSession << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  videoSessionParameters" << std::endl;
    // videoSessionParameters -> Field -> VkVideoSessionParametersKHR
    os << "value: " << t.videoSessionParameters << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  referenceSlotCount" << std::endl;
    // referenceSlotCount -> Field -> uint32_t
    os << "value: " << t.referenceSlotCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pReferenceSlots" << std::endl;
    // pReferenceSlots -> Field -> ConstDynamicArray(VkVideoReferenceSlotInfoKHR)
    if (t.referenceSlotCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkVideoReferenceSlotInfoKHR" << std::endl;
        for (uint64_t i = 0; i < t.referenceSlotCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pReferenceSlots << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoEndCodingInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkVideoEndCodingFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoCodingControlInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkVideoCodingControlFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoDecodeCapabilitiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkVideoDecodeCapabilityFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoDecodeUsageInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  videoUsageHints" << std::endl;
    // videoUsageHints -> Field -> VkVideoDecodeUsageFlagsKHR
    os << "value: " << t.videoUsageHints << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoDecodeInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkVideoDecodeFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcBuffer" << std::endl;
    // srcBuffer -> Field -> VkBuffer
    os << "value: " << t.srcBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcBufferOffset" << std::endl;
    // srcBufferOffset -> Field -> VkDeviceSize
    os << "value: " << t.srcBufferOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcBufferRange" << std::endl;
    // srcBufferRange -> Field -> VkDeviceSize
    os << "value: " << t.srcBufferRange << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstPictureResource" << std::endl;
    // dstPictureResource -> Field -> VkVideoPictureResourceInfoKHR
    os <<  "members:" << std::endl << t.dstPictureResource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSetupReferenceSlot" << std::endl;
    // pointer
    if (t.pSetupReferenceSlot != nullptr) {
      os <<  "members:" << std::endl << *t.pSetupReferenceSlot << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  referenceSlotCount" << std::endl;
    // referenceSlotCount -> Field -> uint32_t
    os << "value: " << t.referenceSlotCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pReferenceSlots" << std::endl;
    // pReferenceSlots -> Field -> ConstDynamicArray(VkVideoReferenceSlotInfoKHR)
    if (t.referenceSlotCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkVideoReferenceSlotInfoKHR" << std::endl;
        for (uint64_t i = 0; i < t.referenceSlotCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pReferenceSlots << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoDecodeH264ProfileInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stdProfileIdc" << std::endl;
    // stdProfileIdc -> Field -> StdVideoH264ProfileIdc
    os << "value: " << t.stdProfileIdc << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pictureLayout" << std::endl;
    // pictureLayout -> Field -> VkVideoDecodeH264PictureLayoutFlagBitsKHR
    os << "value: " << t.pictureLayout << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoDecodeH264CapabilitiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxLevelIdc" << std::endl;
    // maxLevelIdc -> Field -> StdVideoH264LevelIdc
    os << "value: " << t.maxLevelIdc << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fieldOffsetGranularity" << std::endl;
    // fieldOffsetGranularity -> Field -> VkOffset2D
    os <<  "members:" << std::endl << t.fieldOffsetGranularity << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoDecodeH264SessionParametersAddInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stdSPSCount" << std::endl;
    // stdSPSCount -> Field -> uint32_t
    os << "value: " << t.stdSPSCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStdSPSs" << std::endl;
    // pStdSPSs -> Field -> ConstDynamicArray(StdVideoH264SequenceParameterSet)
    if (t.stdSPSCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # StdVideoH264SequenceParameterSet" << std::endl;
        for (uint64_t i = 0; i < t.stdSPSCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pStdSPSs << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stdPPSCount" << std::endl;
    // stdPPSCount -> Field -> uint32_t
    os << "value: " << t.stdPPSCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStdPPSs" << std::endl;
    // pStdPPSs -> Field -> ConstDynamicArray(StdVideoH264PictureParameterSet)
    if (t.stdPPSCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # StdVideoH264PictureParameterSet" << std::endl;
        for (uint64_t i = 0; i < t.stdPPSCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pStdPPSs << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoDecodeH264SessionParametersCreateInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxStdSPSCount" << std::endl;
    // maxStdSPSCount -> Field -> uint32_t
    os << "value: " << t.maxStdSPSCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxStdPPSCount" << std::endl;
    // maxStdPPSCount -> Field -> uint32_t
    os << "value: " << t.maxStdPPSCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pParametersAddInfo" << std::endl;
    // pointer
    if (t.pParametersAddInfo != nullptr) {
      os <<  "members:" << std::endl << *t.pParametersAddInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoDecodeH264PictureInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStdPictureInfo" << std::endl;
    // pointer
    if (t.pStdPictureInfo != nullptr) {
      os << "value: *t.pStdPictureInfo" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sliceCount" << std::endl;
    // sliceCount -> Field -> uint32_t
    os << "value: " << t.sliceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSliceOffsets" << std::endl;
    // pSliceOffsets -> Field -> ConstDynamicArray(uint32_t)
    if (t.sliceCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.sliceCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pSliceOffsets << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoDecodeH264DpbSlotInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStdReferenceInfo" << std::endl;
    // pointer
    if (t.pStdReferenceInfo != nullptr) {
      os << "value: *t.pStdReferenceInfo" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRenderingFragmentShadingRateAttachmentInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageView" << std::endl;
    // imageView -> Field -> VkImageView
    os << "value: " << t.imageView << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageLayout" << std::endl;
    // imageLayout -> Field -> VkImageLayout
    os << "value: " << t.imageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shadingRateAttachmentTexelSize" << std::endl;
    // shadingRateAttachmentTexelSize -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.shadingRateAttachmentTexelSize << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRenderingFragmentDensityMapAttachmentInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageView" << std::endl;
    // imageView -> Field -> VkImageView
    os << "value: " << t.imageView << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageLayout" << std::endl;
    // imageLayout -> Field -> VkImageLayout
    os << "value: " << t.imageLayout << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAttachmentSampleCountInfoAMD &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  colorAttachmentCount" << std::endl;
    // colorAttachmentCount -> Field -> uint32_t
    os << "value: " << t.colorAttachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pColorAttachmentSamples" << std::endl;
    // pColorAttachmentSamples -> Field -> ConstDynamicArray(VkSampleCountFlagBits)
    if (t.colorAttachmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSampleCountFlagBits" << std::endl;
        for (uint64_t i = 0; i < t.colorAttachmentCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pColorAttachmentSamples << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthStencilAttachmentSamples" << std::endl;
    // depthStencilAttachmentSamples -> Field -> VkSampleCountFlagBits
    os << "value: " << t.depthStencilAttachmentSamples << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMultiviewPerViewAttributesInfoNVX &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  perViewAttributes" << std::endl;
    // perViewAttributes -> Field -> VkBool32
    os << "value: " << t.perViewAttributes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  perViewAttributesPositionXOnly" << std::endl;
    // perViewAttributesPositionXOnly -> Field -> VkBool32
    os << "value: " << t.perViewAttributesPositionXOnly << std::endl;
  }
  return os;
}

#ifdef VK_USE_PLATFORM_WIN32_KHR
std::ostream &operator<<(std::ostream & os, const VkImportMemoryWin32HandleInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalMemoryHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handle" << std::endl;
    // handle -> Field -> HANDLE
    os << "value: " << t.handle << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  name" << std::endl;
    // name -> Field -> LPCWSTR
    os << "value: " << t.name << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_WIN32_KHR

#ifdef VK_USE_PLATFORM_WIN32_KHR
std::ostream &operator<<(std::ostream & os, const VkExportMemoryWin32HandleInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAttributes" << std::endl;
    // pointer
    if (t.pAttributes != nullptr) {
      os << "value: *t.pAttributes" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dwAccess" << std::endl;
    // dwAccess -> Field -> DWORD
    os << "value: " << t.dwAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  name" << std::endl;
    // name -> Field -> LPCWSTR
    os << "value: " << t.name << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_WIN32_KHR

#ifdef VK_USE_PLATFORM_WIN32_KHR
std::ostream &operator<<(std::ostream & os, const VkMemoryWin32HandlePropertiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryTypeBits" << std::endl;
    // memoryTypeBits -> Field -> uint32_t
    os << "value: " << t.memoryTypeBits << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_WIN32_KHR

#ifdef VK_USE_PLATFORM_WIN32_KHR
std::ostream &operator<<(std::ostream & os, const VkMemoryGetWin32HandleInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memory" << std::endl;
    // memory -> Field -> VkDeviceMemory
    os << "value: " << t.memory << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalMemoryHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_WIN32_KHR

std::ostream &operator<<(std::ostream & os, const VkImportMemoryFdInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalMemoryHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fd" << std::endl;
    // fd -> Field -> int
    os << "value: " << t.fd << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMemoryFdPropertiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryTypeBits" << std::endl;
    // memoryTypeBits -> Field -> uint32_t
    os << "value: " << t.memoryTypeBits << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMemoryGetFdInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memory" << std::endl;
    // memory -> Field -> VkDeviceMemory
    os << "value: " << t.memory << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalMemoryHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  return os;
}

#ifdef VK_USE_PLATFORM_WIN32_KHR
std::ostream &operator<<(std::ostream & os, const VkWin32KeyedMutexAcquireReleaseInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  acquireCount" << std::endl;
    // acquireCount -> Field -> uint32_t
    os << "value: " << t.acquireCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAcquireSyncs" << std::endl;
    // pAcquireSyncs -> Field -> ConstDynamicArray(VkDeviceMemory)
    if (t.acquireCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDeviceMemory" << std::endl;
        for (uint64_t i = 0; i < t.acquireCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pAcquireSyncs << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAcquireKeys" << std::endl;
    // pAcquireKeys -> Field -> ConstDynamicArray(uint64_t)
    if (t.acquireCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint64_t" << std::endl;
        for (uint64_t i = 0; i < t.acquireCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pAcquireKeys << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAcquireTimeouts" << std::endl;
    // pAcquireTimeouts -> Field -> ConstDynamicArray(uint32_t)
    if (t.acquireCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.acquireCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pAcquireTimeouts << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  releaseCount" << std::endl;
    // releaseCount -> Field -> uint32_t
    os << "value: " << t.releaseCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pReleaseSyncs" << std::endl;
    // pReleaseSyncs -> Field -> ConstDynamicArray(VkDeviceMemory)
    if (t.releaseCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDeviceMemory" << std::endl;
        for (uint64_t i = 0; i < t.releaseCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pReleaseSyncs << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pReleaseKeys" << std::endl;
    // pReleaseKeys -> Field -> ConstDynamicArray(uint64_t)
    if (t.releaseCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint64_t" << std::endl;
        for (uint64_t i = 0; i < t.releaseCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pReleaseKeys << std::endl;
        } // for i
      }
    }
  }
  return os;
}
#endif //VK_USE_PLATFORM_WIN32_KHR

#ifdef VK_USE_PLATFORM_WIN32_KHR
std::ostream &operator<<(std::ostream & os, const VkImportSemaphoreWin32HandleInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  semaphore" << std::endl;
    // semaphore -> Field -> VkSemaphore
    os << "value: " << t.semaphore << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkSemaphoreImportFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalSemaphoreHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handle" << std::endl;
    // handle -> Field -> HANDLE
    os << "value: " << t.handle << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  name" << std::endl;
    // name -> Field -> LPCWSTR
    os << "value: " << t.name << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_WIN32_KHR

#ifdef VK_USE_PLATFORM_WIN32_KHR
std::ostream &operator<<(std::ostream & os, const VkExportSemaphoreWin32HandleInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAttributes" << std::endl;
    // pointer
    if (t.pAttributes != nullptr) {
      os << "value: *t.pAttributes" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dwAccess" << std::endl;
    // dwAccess -> Field -> DWORD
    os << "value: " << t.dwAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  name" << std::endl;
    // name -> Field -> LPCWSTR
    os << "value: " << t.name << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_WIN32_KHR

#ifdef VK_USE_PLATFORM_WIN32_KHR
std::ostream &operator<<(std::ostream & os, const VkD3D12FenceSubmitInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  waitSemaphoreValuesCount" << std::endl;
    // waitSemaphoreValuesCount -> Field -> uint32_t
    os << "value: " << t.waitSemaphoreValuesCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pWaitSemaphoreValues" << std::endl;
    // pWaitSemaphoreValues -> Field -> ConstDynamicArray(uint64_t)
    if (t.waitSemaphoreValuesCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint64_t" << std::endl;
        for (uint64_t i = 0; i < t.waitSemaphoreValuesCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pWaitSemaphoreValues << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  signalSemaphoreValuesCount" << std::endl;
    // signalSemaphoreValuesCount -> Field -> uint32_t
    os << "value: " << t.signalSemaphoreValuesCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSignalSemaphoreValues" << std::endl;
    // pSignalSemaphoreValues -> Field -> ConstDynamicArray(uint64_t)
    if (t.signalSemaphoreValuesCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint64_t" << std::endl;
        for (uint64_t i = 0; i < t.signalSemaphoreValuesCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pSignalSemaphoreValues << std::endl;
        } // for i
      }
    }
  }
  return os;
}
#endif //VK_USE_PLATFORM_WIN32_KHR

#ifdef VK_USE_PLATFORM_WIN32_KHR
std::ostream &operator<<(std::ostream & os, const VkSemaphoreGetWin32HandleInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  semaphore" << std::endl;
    // semaphore -> Field -> VkSemaphore
    os << "value: " << t.semaphore << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalSemaphoreHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_WIN32_KHR

std::ostream &operator<<(std::ostream & os, const VkImportSemaphoreFdInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  semaphore" << std::endl;
    // semaphore -> Field -> VkSemaphore
    os << "value: " << t.semaphore << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkSemaphoreImportFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalSemaphoreHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fd" << std::endl;
    // fd -> Field -> int
    os << "value: " << t.fd << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSemaphoreGetFdInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  semaphore" << std::endl;
    // semaphore -> Field -> VkSemaphore
    os << "value: " << t.semaphore << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalSemaphoreHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDevicePushDescriptorPropertiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPushDescriptors" << std::endl;
    // maxPushDescriptors -> Field -> uint32_t
    os << "value: " << t.maxPushDescriptors << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRectLayerKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkOffset2D
    os <<  "members:" << std::endl << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extent" << std::endl;
    // extent -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.extent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layer" << std::endl;
    // layer -> Field -> uint32_t
    os << "value: " << t.layer << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPresentRegionKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rectangleCount" << std::endl;
    // rectangleCount -> Field -> uint32_t
    os << "value: " << t.rectangleCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRectangles" << std::endl;
    // pRectangles -> Field -> ConstDynamicArray(VkRectLayerKHR)
    if (t.rectangleCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkRectLayerKHR" << std::endl;
        for (uint64_t i = 0; i < t.rectangleCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pRectangles << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPresentRegionsKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  swapchainCount" << std::endl;
    // swapchainCount -> Field -> uint32_t
    os << "value: " << t.swapchainCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkPresentRegionKHR)
    if (t.swapchainCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkPresentRegionKHR" << std::endl;
        for (uint64_t i = 0; i < t.swapchainCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pRegions << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSharedPresentSurfaceCapabilitiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sharedPresentSupportedUsageFlags" << std::endl;
    // sharedPresentSupportedUsageFlags -> Field -> VkImageUsageFlags
    os << "value: " << t.sharedPresentSupportedUsageFlags << std::endl;
  }
  return os;
}

#ifdef VK_USE_PLATFORM_WIN32_KHR
std::ostream &operator<<(std::ostream & os, const VkImportFenceWin32HandleInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fence" << std::endl;
    // fence -> Field -> VkFence
    os << "value: " << t.fence << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkFenceImportFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalFenceHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handle" << std::endl;
    // handle -> Field -> HANDLE
    os << "value: " << t.handle << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  name" << std::endl;
    // name -> Field -> LPCWSTR
    os << "value: " << t.name << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_WIN32_KHR

#ifdef VK_USE_PLATFORM_WIN32_KHR
std::ostream &operator<<(std::ostream & os, const VkExportFenceWin32HandleInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAttributes" << std::endl;
    // pointer
    if (t.pAttributes != nullptr) {
      os << "value: *t.pAttributes" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dwAccess" << std::endl;
    // dwAccess -> Field -> DWORD
    os << "value: " << t.dwAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  name" << std::endl;
    // name -> Field -> LPCWSTR
    os << "value: " << t.name << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_WIN32_KHR

#ifdef VK_USE_PLATFORM_WIN32_KHR
std::ostream &operator<<(std::ostream & os, const VkFenceGetWin32HandleInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fence" << std::endl;
    // fence -> Field -> VkFence
    os << "value: " << t.fence << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalFenceHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_WIN32_KHR

std::ostream &operator<<(std::ostream & os, const VkImportFenceFdInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fence" << std::endl;
    // fence -> Field -> VkFence
    os << "value: " << t.fence << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkFenceImportFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalFenceHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fd" << std::endl;
    // fd -> Field -> int
    os << "value: " << t.fd << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkFenceGetFdInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fence" << std::endl;
    // fence -> Field -> VkFence
    os << "value: " << t.fence << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalFenceHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDevicePerformanceQueryFeaturesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  performanceCounterQueryPools" << std::endl;
    // performanceCounterQueryPools -> Field -> VkBool32
    os << "value: " << t.performanceCounterQueryPools << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  performanceCounterMultipleQueryPools" << std::endl;
    // performanceCounterMultipleQueryPools -> Field -> VkBool32
    os << "value: " << t.performanceCounterMultipleQueryPools << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDevicePerformanceQueryPropertiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  allowCommandBufferQueryCopies" << std::endl;
    // allowCommandBufferQueryCopies -> Field -> VkBool32
    os << "value: " << t.allowCommandBufferQueryCopies << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPerformanceCounterKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  unit" << std::endl;
    // unit -> Field -> VkPerformanceCounterUnitKHR
    os << "value: " << t.unit << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  scope" << std::endl;
    // scope -> Field -> VkPerformanceCounterScopeKHR
    os << "value: " << t.scope << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storage" << std::endl;
    // storage -> Field -> VkPerformanceCounterStorageKHR
    os << "value: " << t.storage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uuid" << std::endl;
    // uuid -> Field -> FixedArray(uint8_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint8_t" << std::endl;
        for (uint64_t i = 0; i < VK_UUID_SIZE; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.uuid << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPerformanceCounterDescriptionKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPerformanceCounterDescriptionFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  name" << std::endl;
    // name -> Field -> FixedArray(char)
    os << "value: " << t.name << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  category" << std::endl;
    // category -> Field -> FixedArray(char)
    os << "value: " << t.category << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  description" << std::endl;
    // description -> Field -> FixedArray(char)
    os << "value: " << t.description << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkQueryPoolPerformanceCreateInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueFamilyIndex" << std::endl;
    // queueFamilyIndex -> Field -> uint32_t
    os << "value: " << t.queueFamilyIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  counterIndexCount" << std::endl;
    // counterIndexCount -> Field -> uint32_t
    os << "value: " << t.counterIndexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCounterIndices" << std::endl;
    // pCounterIndices -> Field -> ConstDynamicArray(uint32_t)
    if (t.counterIndexCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.counterIndexCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pCounterIndices << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPerformanceCounterResultKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  int32" << std::endl;
    // int32 -> Field -> int32_t
    os << "value: " << t.int32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  int64" << std::endl;
    // int64 -> Field -> int64_t
    os << "value: " << t.int64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uint32" << std::endl;
    // uint32 -> Field -> uint32_t
    os << "value: " << t.uint32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uint64" << std::endl;
    // uint64 -> Field -> uint64_t
    os << "value: " << t.uint64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  float32" << std::endl;
    // float32 -> Field -> float
    os << "value: " << t.float32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  float64" << std::endl;
    // float64 -> Field -> double
    os << "value: " << t.float64 << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAcquireProfilingLockInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkAcquireProfilingLockFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  timeout" << std::endl;
    // timeout -> Field -> uint64_t
    os << "value: " << t.timeout << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPerformanceQuerySubmitInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  counterPassIndex" << std::endl;
    // counterPassIndex -> Field -> uint32_t
    os << "value: " << t.counterPassIndex << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceSurfaceInfo2KHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  surface" << std::endl;
    // surface -> Field -> VkSurfaceKHR
    os << "value: " << t.surface << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSurfaceCapabilities2KHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  surfaceCapabilities" << std::endl;
    // surfaceCapabilities -> Field -> VkSurfaceCapabilitiesKHR
    os <<  "members:" << std::endl << t.surfaceCapabilities << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSurfaceFormat2KHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  surfaceFormat" << std::endl;
    // surfaceFormat -> Field -> VkSurfaceFormatKHR
    os <<  "members:" << std::endl << t.surfaceFormat << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDisplayProperties2KHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displayProperties" << std::endl;
    // displayProperties -> Field -> VkDisplayPropertiesKHR
    os <<  "members:" << std::endl << t.displayProperties << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDisplayPlaneProperties2KHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displayPlaneProperties" << std::endl;
    // displayPlaneProperties -> Field -> VkDisplayPlanePropertiesKHR
    os <<  "members:" << std::endl << t.displayPlaneProperties << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDisplayModeProperties2KHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displayModeProperties" << std::endl;
    // displayModeProperties -> Field -> VkDisplayModePropertiesKHR
    os <<  "members:" << std::endl << t.displayModeProperties << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDisplayPlaneInfo2KHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mode" << std::endl;
    // mode -> Field -> VkDisplayModeKHR
    os << "value: " << t.mode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  planeIndex" << std::endl;
    // planeIndex -> Field -> uint32_t
    os << "value: " << t.planeIndex << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDisplayPlaneCapabilities2KHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  capabilities" << std::endl;
    // capabilities -> Field -> VkDisplayPlaneCapabilitiesKHR
    os <<  "members:" << std::endl << t.capabilities << std::endl;
  }
  return os;
}

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkPhysicalDevicePortabilitySubsetFeaturesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  constantAlphaColorBlendFactors" << std::endl;
    // constantAlphaColorBlendFactors -> Field -> VkBool32
    os << "value: " << t.constantAlphaColorBlendFactors << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  events" << std::endl;
    // events -> Field -> VkBool32
    os << "value: " << t.events << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageViewFormatReinterpretation" << std::endl;
    // imageViewFormatReinterpretation -> Field -> VkBool32
    os << "value: " << t.imageViewFormatReinterpretation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageViewFormatSwizzle" << std::endl;
    // imageViewFormatSwizzle -> Field -> VkBool32
    os << "value: " << t.imageViewFormatSwizzle << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageView2DOn3DImage" << std::endl;
    // imageView2DOn3DImage -> Field -> VkBool32
    os << "value: " << t.imageView2DOn3DImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multisampleArrayImage" << std::endl;
    // multisampleArrayImage -> Field -> VkBool32
    os << "value: " << t.multisampleArrayImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mutableComparisonSamplers" << std::endl;
    // mutableComparisonSamplers -> Field -> VkBool32
    os << "value: " << t.mutableComparisonSamplers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pointPolygons" << std::endl;
    // pointPolygons -> Field -> VkBool32
    os << "value: " << t.pointPolygons << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samplerMipLodBias" << std::endl;
    // samplerMipLodBias -> Field -> VkBool32
    os << "value: " << t.samplerMipLodBias << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  separateStencilMaskRef" << std::endl;
    // separateStencilMaskRef -> Field -> VkBool32
    os << "value: " << t.separateStencilMaskRef << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSampleRateInterpolationFunctions" << std::endl;
    // shaderSampleRateInterpolationFunctions -> Field -> VkBool32
    os << "value: " << t.shaderSampleRateInterpolationFunctions << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tessellationIsolines" << std::endl;
    // tessellationIsolines -> Field -> VkBool32
    os << "value: " << t.tessellationIsolines << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tessellationPointMode" << std::endl;
    // tessellationPointMode -> Field -> VkBool32
    os << "value: " << t.tessellationPointMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  triangleFans" << std::endl;
    // triangleFans -> Field -> VkBool32
    os << "value: " << t.triangleFans << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexAttributeAccessBeyondStride" << std::endl;
    // vertexAttributeAccessBeyondStride -> Field -> VkBool32
    os << "value: " << t.vertexAttributeAccessBeyondStride << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkPhysicalDevicePortabilitySubsetPropertiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minVertexInputBindingStrideAlignment" << std::endl;
    // minVertexInputBindingStrideAlignment -> Field -> uint32_t
    os << "value: " << t.minVertexInputBindingStrideAlignment << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderClockFeaturesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSubgroupClock" << std::endl;
    // shaderSubgroupClock -> Field -> VkBool32
    os << "value: " << t.shaderSubgroupClock << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderDeviceClock" << std::endl;
    // shaderDeviceClock -> Field -> VkBool32
    os << "value: " << t.shaderDeviceClock << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoDecodeH265ProfileInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stdProfileIdc" << std::endl;
    // stdProfileIdc -> Field -> StdVideoH265ProfileIdc
    os << "value: " << t.stdProfileIdc << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoDecodeH265CapabilitiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxLevelIdc" << std::endl;
    // maxLevelIdc -> Field -> StdVideoH265LevelIdc
    os << "value: " << t.maxLevelIdc << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoDecodeH265SessionParametersAddInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stdVPSCount" << std::endl;
    // stdVPSCount -> Field -> uint32_t
    os << "value: " << t.stdVPSCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStdVPSs" << std::endl;
    // pStdVPSs -> Field -> ConstDynamicArray(StdVideoH265VideoParameterSet)
    if (t.stdVPSCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # StdVideoH265VideoParameterSet" << std::endl;
        for (uint64_t i = 0; i < t.stdVPSCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pStdVPSs << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stdSPSCount" << std::endl;
    // stdSPSCount -> Field -> uint32_t
    os << "value: " << t.stdSPSCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStdSPSs" << std::endl;
    // pStdSPSs -> Field -> ConstDynamicArray(StdVideoH265SequenceParameterSet)
    if (t.stdSPSCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # StdVideoH265SequenceParameterSet" << std::endl;
        for (uint64_t i = 0; i < t.stdSPSCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pStdSPSs << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stdPPSCount" << std::endl;
    // stdPPSCount -> Field -> uint32_t
    os << "value: " << t.stdPPSCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStdPPSs" << std::endl;
    // pStdPPSs -> Field -> ConstDynamicArray(StdVideoH265PictureParameterSet)
    if (t.stdPPSCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # StdVideoH265PictureParameterSet" << std::endl;
        for (uint64_t i = 0; i < t.stdPPSCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pStdPPSs << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoDecodeH265SessionParametersCreateInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxStdVPSCount" << std::endl;
    // maxStdVPSCount -> Field -> uint32_t
    os << "value: " << t.maxStdVPSCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxStdSPSCount" << std::endl;
    // maxStdSPSCount -> Field -> uint32_t
    os << "value: " << t.maxStdSPSCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxStdPPSCount" << std::endl;
    // maxStdPPSCount -> Field -> uint32_t
    os << "value: " << t.maxStdPPSCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pParametersAddInfo" << std::endl;
    // pointer
    if (t.pParametersAddInfo != nullptr) {
      os <<  "members:" << std::endl << *t.pParametersAddInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoDecodeH265PictureInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStdPictureInfo" << std::endl;
    // pointer
    if (t.pStdPictureInfo != nullptr) {
      os << "value: *t.pStdPictureInfo" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sliceSegmentCount" << std::endl;
    // sliceSegmentCount -> Field -> uint32_t
    os << "value: " << t.sliceSegmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSliceSegmentOffsets" << std::endl;
    // pSliceSegmentOffsets -> Field -> ConstDynamicArray(uint32_t)
    if (t.sliceSegmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.sliceSegmentCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pSliceSegmentOffsets << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVideoDecodeH265DpbSlotInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStdReferenceInfo" << std::endl;
    // pointer
    if (t.pStdReferenceInfo != nullptr) {
      os << "value: *t.pStdReferenceInfo" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceQueueGlobalPriorityCreateInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  globalPriority" << std::endl;
    // globalPriority -> Field -> VkQueueGlobalPriorityKHR
    os << "value: " << t.globalPriority << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  globalPriorityQuery" << std::endl;
    // globalPriorityQuery -> Field -> VkBool32
    os << "value: " << t.globalPriorityQuery << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkQueueFamilyGlobalPriorityPropertiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  priorityCount" << std::endl;
    // priorityCount -> Field -> uint32_t
    os << "value: " << t.priorityCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  priorities" << std::endl;
    // priorities -> Field -> FixedArray(VkQueueGlobalPriorityKHR)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkQueueGlobalPriorityKHR" << std::endl;
        for (uint64_t i = 0; i < VK_MAX_GLOBAL_PRIORITY_SIZE_KHR; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.priorities << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkFragmentShadingRateAttachmentInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pFragmentShadingRateAttachment" << std::endl;
    // pointer
    if (t.pFragmentShadingRateAttachment != nullptr) {
      os <<  "members:" << std::endl << *t.pFragmentShadingRateAttachment << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shadingRateAttachmentTexelSize" << std::endl;
    // shadingRateAttachmentTexelSize -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.shadingRateAttachmentTexelSize << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineFragmentShadingRateStateCreateInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentSize" << std::endl;
    // fragmentSize -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.fragmentSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  combinerOps" << std::endl;
    // combinerOps -> Field -> FixedArray(VkFragmentShadingRateCombinerOpKHR)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkFragmentShadingRateCombinerOpKHR" << std::endl;
        for (uint64_t i = 0; i < 2; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.combinerOps << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceFragmentShadingRateFeaturesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineFragmentShadingRate" << std::endl;
    // pipelineFragmentShadingRate -> Field -> VkBool32
    os << "value: " << t.pipelineFragmentShadingRate << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primitiveFragmentShadingRate" << std::endl;
    // primitiveFragmentShadingRate -> Field -> VkBool32
    os << "value: " << t.primitiveFragmentShadingRate << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentFragmentShadingRate" << std::endl;
    // attachmentFragmentShadingRate -> Field -> VkBool32
    os << "value: " << t.attachmentFragmentShadingRate << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceFragmentShadingRatePropertiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minFragmentShadingRateAttachmentTexelSize" << std::endl;
    // minFragmentShadingRateAttachmentTexelSize -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.minFragmentShadingRateAttachmentTexelSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFragmentShadingRateAttachmentTexelSize" << std::endl;
    // maxFragmentShadingRateAttachmentTexelSize -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.maxFragmentShadingRateAttachmentTexelSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFragmentShadingRateAttachmentTexelSizeAspectRatio" << std::endl;
    // maxFragmentShadingRateAttachmentTexelSizeAspectRatio -> Field -> uint32_t
    os << "value: " << t.maxFragmentShadingRateAttachmentTexelSizeAspectRatio << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primitiveFragmentShadingRateWithMultipleViewports" << std::endl;
    // primitiveFragmentShadingRateWithMultipleViewports -> Field -> VkBool32
    os << "value: " << t.primitiveFragmentShadingRateWithMultipleViewports << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layeredShadingRateAttachments" << std::endl;
    // layeredShadingRateAttachments -> Field -> VkBool32
    os << "value: " << t.layeredShadingRateAttachments << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentShadingRateNonTrivialCombinerOps" << std::endl;
    // fragmentShadingRateNonTrivialCombinerOps -> Field -> VkBool32
    os << "value: " << t.fragmentShadingRateNonTrivialCombinerOps << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFragmentSize" << std::endl;
    // maxFragmentSize -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.maxFragmentSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFragmentSizeAspectRatio" << std::endl;
    // maxFragmentSizeAspectRatio -> Field -> uint32_t
    os << "value: " << t.maxFragmentSizeAspectRatio << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFragmentShadingRateCoverageSamples" << std::endl;
    // maxFragmentShadingRateCoverageSamples -> Field -> uint32_t
    os << "value: " << t.maxFragmentShadingRateCoverageSamples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFragmentShadingRateRasterizationSamples" << std::endl;
    // maxFragmentShadingRateRasterizationSamples -> Field -> VkSampleCountFlagBits
    os << "value: " << t.maxFragmentShadingRateRasterizationSamples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentShadingRateWithShaderDepthStencilWrites" << std::endl;
    // fragmentShadingRateWithShaderDepthStencilWrites -> Field -> VkBool32
    os << "value: " << t.fragmentShadingRateWithShaderDepthStencilWrites << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentShadingRateWithSampleMask" << std::endl;
    // fragmentShadingRateWithSampleMask -> Field -> VkBool32
    os << "value: " << t.fragmentShadingRateWithSampleMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentShadingRateWithShaderSampleMask" << std::endl;
    // fragmentShadingRateWithShaderSampleMask -> Field -> VkBool32
    os << "value: " << t.fragmentShadingRateWithShaderSampleMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentShadingRateWithConservativeRasterization" << std::endl;
    // fragmentShadingRateWithConservativeRasterization -> Field -> VkBool32
    os << "value: " << t.fragmentShadingRateWithConservativeRasterization << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentShadingRateWithFragmentShaderInterlock" << std::endl;
    // fragmentShadingRateWithFragmentShaderInterlock -> Field -> VkBool32
    os << "value: " << t.fragmentShadingRateWithFragmentShaderInterlock << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentShadingRateWithCustomSampleLocations" << std::endl;
    // fragmentShadingRateWithCustomSampleLocations -> Field -> VkBool32
    os << "value: " << t.fragmentShadingRateWithCustomSampleLocations << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentShadingRateStrictMultiplyCombiner" << std::endl;
    // fragmentShadingRateStrictMultiplyCombiner -> Field -> VkBool32
    os << "value: " << t.fragmentShadingRateStrictMultiplyCombiner << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceFragmentShadingRateKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleCounts" << std::endl;
    // sampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.sampleCounts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentSize" << std::endl;
    // fragmentSize -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.fragmentSize << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSurfaceProtectedCapabilitiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportsProtected" << std::endl;
    // supportsProtected -> Field -> VkBool32
    os << "value: " << t.supportsProtected << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDevicePresentWaitFeaturesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  presentWait" << std::endl;
    // presentWait -> Field -> VkBool32
    os << "value: " << t.presentWait << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineExecutableInfo" << std::endl;
    // pipelineExecutableInfo -> Field -> VkBool32
    os << "value: " << t.pipelineExecutableInfo << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipeline" << std::endl;
    // pipeline -> Field -> VkPipeline
    os << "value: " << t.pipeline << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineExecutablePropertiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stages" << std::endl;
    // stages -> Field -> VkShaderStageFlags
    os << "value: " << t.stages << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  name" << std::endl;
    // name -> Field -> FixedArray(char)
    os << "value: " << t.name << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  description" << std::endl;
    // description -> Field -> FixedArray(char)
    os << "value: " << t.description << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subgroupSize" << std::endl;
    // subgroupSize -> Field -> uint32_t
    os << "value: " << t.subgroupSize << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineExecutableInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipeline" << std::endl;
    // pipeline -> Field -> VkPipeline
    os << "value: " << t.pipeline << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  executableIndex" << std::endl;
    // executableIndex -> Field -> uint32_t
    os << "value: " << t.executableIndex << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineExecutableStatisticValueKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  b32" << std::endl;
    // b32 -> Field -> VkBool32
    os << "value: " << t.b32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  i64" << std::endl;
    // i64 -> Field -> int64_t
    os << "value: " << t.i64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  u64" << std::endl;
    // u64 -> Field -> uint64_t
    os << "value: " << t.u64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  f64" << std::endl;
    // f64 -> Field -> double
    os << "value: " << t.f64 << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineExecutableStatisticKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  name" << std::endl;
    // name -> Field -> FixedArray(char)
    os << "value: " << t.name << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  description" << std::endl;
    // description -> Field -> FixedArray(char)
    os << "value: " << t.description << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkPipelineExecutableStatisticFormatKHR
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  value" << std::endl;
    // value -> Field -> VkPipelineExecutableStatisticValueKHR
    os <<  "members:" << std::endl << t.value << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineExecutableInternalRepresentationKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  name" << std::endl;
    // name -> Field -> FixedArray(char)
    os << "value: " << t.name << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  description" << std::endl;
    // description -> Field -> FixedArray(char)
    os << "value: " << t.description << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  isText" << std::endl;
    // isText -> Field -> VkBool32
    os << "value: " << t.isText << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dataSize" << std::endl;
    // dataSize -> Field -> size_t
    os << "value: " << t.dataSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pData" << std::endl;
    if (t.dataSize == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << std::hex;
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        const uint8_t *p = (const uint8_t *)t.pData;
        for (uint64_t i = 0; i < t.dataSize; ++i) {
          os << "- 0x" << p[i] << std::endl;
        }
      }
      os << std::dec;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMemoryMapInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkMemoryMapFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memory" << std::endl;
    // memory -> Field -> VkDeviceMemory
    os << "value: " << t.memory << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMemoryUnmapInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkMemoryUnmapFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memory" << std::endl;
    // memory -> Field -> VkDeviceMemory
    os << "value: " << t.memory << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineLibraryCreateInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  libraryCount" << std::endl;
    // libraryCount -> Field -> uint32_t
    os << "value: " << t.libraryCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pLibraries" << std::endl;
    // pLibraries -> Field -> ConstDynamicArray(VkPipeline)
    if (t.libraryCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkPipeline" << std::endl;
        for (uint64_t i = 0; i < t.libraryCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pLibraries << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPresentIdKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  swapchainCount" << std::endl;
    // swapchainCount -> Field -> uint32_t
    os << "value: " << t.swapchainCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPresentIds" << std::endl;
    // pPresentIds -> Field -> ConstDynamicArray(uint64_t)
    if (t.swapchainCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint64_t" << std::endl;
        for (uint64_t i = 0; i < t.swapchainCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pPresentIds << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDevicePresentIdFeaturesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  presentId" << std::endl;
    // presentId -> Field -> VkBool32
    os << "value: " << t.presentId << std::endl;
  }
  return os;
}

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkVideoEncodeFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBuffer" << std::endl;
    // dstBuffer -> Field -> VkBuffer
    os << "value: " << t.dstBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBufferOffset" << std::endl;
    // dstBufferOffset -> Field -> VkDeviceSize
    os << "value: " << t.dstBufferOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBufferRange" << std::endl;
    // dstBufferRange -> Field -> VkDeviceSize
    os << "value: " << t.dstBufferRange << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcPictureResource" << std::endl;
    // srcPictureResource -> Field -> VkVideoPictureResourceInfoKHR
    os <<  "members:" << std::endl << t.srcPictureResource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSetupReferenceSlot" << std::endl;
    // pointer
    if (t.pSetupReferenceSlot != nullptr) {
      os <<  "members:" << std::endl << *t.pSetupReferenceSlot << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  referenceSlotCount" << std::endl;
    // referenceSlotCount -> Field -> uint32_t
    os << "value: " << t.referenceSlotCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pReferenceSlots" << std::endl;
    // pReferenceSlots -> Field -> ConstDynamicArray(VkVideoReferenceSlotInfoKHR)
    if (t.referenceSlotCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkVideoReferenceSlotInfoKHR" << std::endl;
        for (uint64_t i = 0; i < t.referenceSlotCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pReferenceSlots << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  precedingExternallyEncodedBytes" << std::endl;
    // precedingExternallyEncodedBytes -> Field -> uint32_t
    os << "value: " << t.precedingExternallyEncodedBytes << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeCapabilitiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkVideoEncodeCapabilityFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rateControlModes" << std::endl;
    // rateControlModes -> Field -> VkVideoEncodeRateControlModeFlagsKHR
    os << "value: " << t.rateControlModes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxRateControlLayers" << std::endl;
    // maxRateControlLayers -> Field -> uint32_t
    os << "value: " << t.maxRateControlLayers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxBitrate" << std::endl;
    // maxBitrate -> Field -> uint64_t
    os << "value: " << t.maxBitrate << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxQualityLevels" << std::endl;
    // maxQualityLevels -> Field -> uint32_t
    os << "value: " << t.maxQualityLevels << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  encodeInputPictureGranularity" << std::endl;
    // encodeInputPictureGranularity -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.encodeInputPictureGranularity << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedEncodeFeedbackFlags" << std::endl;
    // supportedEncodeFeedbackFlags -> Field -> VkVideoEncodeFeedbackFlagsKHR
    os << "value: " << t.supportedEncodeFeedbackFlags << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkQueryPoolVideoEncodeFeedbackCreateInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  encodeFeedbackFlags" << std::endl;
    // encodeFeedbackFlags -> Field -> VkVideoEncodeFeedbackFlagsKHR
    os << "value: " << t.encodeFeedbackFlags << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeUsageInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  videoUsageHints" << std::endl;
    // videoUsageHints -> Field -> VkVideoEncodeUsageFlagsKHR
    os << "value: " << t.videoUsageHints << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  videoContentHints" << std::endl;
    // videoContentHints -> Field -> VkVideoEncodeContentFlagsKHR
    os << "value: " << t.videoContentHints << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tuningMode" << std::endl;
    // tuningMode -> Field -> VkVideoEncodeTuningModeKHR
    os << "value: " << t.tuningMode << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeRateControlLayerInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  averageBitrate" << std::endl;
    // averageBitrate -> Field -> uint64_t
    os << "value: " << t.averageBitrate << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxBitrate" << std::endl;
    // maxBitrate -> Field -> uint64_t
    os << "value: " << t.maxBitrate << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  frameRateNumerator" << std::endl;
    // frameRateNumerator -> Field -> uint32_t
    os << "value: " << t.frameRateNumerator << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  frameRateDenominator" << std::endl;
    // frameRateDenominator -> Field -> uint32_t
    os << "value: " << t.frameRateDenominator << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeRateControlInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkVideoEncodeRateControlFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rateControlMode" << std::endl;
    // rateControlMode -> Field -> VkVideoEncodeRateControlModeFlagBitsKHR
    os << "value: " << t.rateControlMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layerCount" << std::endl;
    // layerCount -> Field -> uint32_t
    os << "value: " << t.layerCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pLayers" << std::endl;
    // pLayers -> Field -> ConstDynamicArray(VkVideoEncodeRateControlLayerInfoKHR)
    if (t.layerCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkVideoEncodeRateControlLayerInfoKHR" << std::endl;
        for (uint64_t i = 0; i < t.layerCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pLayers << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  virtualBufferSizeInMs" << std::endl;
    // virtualBufferSizeInMs -> Field -> uint32_t
    os << "value: " << t.virtualBufferSizeInMs << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  initialVirtualBufferSizeInMs" << std::endl;
    // initialVirtualBufferSizeInMs -> Field -> uint32_t
    os << "value: " << t.initialVirtualBufferSizeInMs << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pVideoProfile" << std::endl;
    // pointer
    if (t.pVideoProfile != nullptr) {
      os <<  "members:" << std::endl << *t.pVideoProfile << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  qualityLevel" << std::endl;
    // qualityLevel -> Field -> uint32_t
    os << "value: " << t.qualityLevel << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeQualityLevelPropertiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preferredRateControlMode" << std::endl;
    // preferredRateControlMode -> Field -> VkVideoEncodeRateControlModeFlagBitsKHR
    os << "value: " << t.preferredRateControlMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preferredRateControlLayerCount" << std::endl;
    // preferredRateControlLayerCount -> Field -> uint32_t
    os << "value: " << t.preferredRateControlLayerCount << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeQualityLevelInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  qualityLevel" << std::endl;
    // qualityLevel -> Field -> uint32_t
    os << "value: " << t.qualityLevel << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeSessionParametersGetInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  videoSessionParameters" << std::endl;
    // videoSessionParameters -> Field -> VkVideoSessionParametersKHR
    os << "value: " << t.videoSessionParameters << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeSessionParametersFeedbackInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hasOverrides" << std::endl;
    // hasOverrides -> Field -> VkBool32
    os << "value: " << t.hasOverrides << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

std::ostream &operator<<(std::ostream & os, const VkQueueFamilyCheckpointProperties2NV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  checkpointExecutionStageMask" << std::endl;
    // checkpointExecutionStageMask -> Field -> VkPipelineStageFlags2
    os << "value: " << t.checkpointExecutionStageMask << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCheckpointData2NV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stage" << std::endl;
    // stage -> Field -> VkPipelineStageFlags2
    os << "value: " << t.stage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCheckpointMarker" << std::endl;
    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentShaderBarycentric" << std::endl;
    // fragmentShaderBarycentric -> Field -> VkBool32
    os << "value: " << t.fragmentShaderBarycentric << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  triStripVertexOrderIndependentOfProvokingVertex" << std::endl;
    // triStripVertexOrderIndependentOfProvokingVertex -> Field -> VkBool32
    os << "value: " << t.triStripVertexOrderIndependentOfProvokingVertex << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSubgroupUniformControlFlow" << std::endl;
    // shaderSubgroupUniformControlFlow -> Field -> VkBool32
    os << "value: " << t.shaderSubgroupUniformControlFlow << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  workgroupMemoryExplicitLayout" << std::endl;
    // workgroupMemoryExplicitLayout -> Field -> VkBool32
    os << "value: " << t.workgroupMemoryExplicitLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  workgroupMemoryExplicitLayoutScalarBlockLayout" << std::endl;
    // workgroupMemoryExplicitLayoutScalarBlockLayout -> Field -> VkBool32
    os << "value: " << t.workgroupMemoryExplicitLayoutScalarBlockLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  workgroupMemoryExplicitLayout8BitAccess" << std::endl;
    // workgroupMemoryExplicitLayout8BitAccess -> Field -> VkBool32
    os << "value: " << t.workgroupMemoryExplicitLayout8BitAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  workgroupMemoryExplicitLayout16BitAccess" << std::endl;
    // workgroupMemoryExplicitLayout16BitAccess -> Field -> VkBool32
    os << "value: " << t.workgroupMemoryExplicitLayout16BitAccess << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rayTracingMaintenance1" << std::endl;
    // rayTracingMaintenance1 -> Field -> VkBool32
    os << "value: " << t.rayTracingMaintenance1 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rayTracingPipelineTraceRaysIndirect2" << std::endl;
    // rayTracingPipelineTraceRaysIndirect2 -> Field -> VkBool32
    os << "value: " << t.rayTracingPipelineTraceRaysIndirect2 << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkTraceRaysIndirectCommand2KHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  raygenShaderRecordAddress" << std::endl;
    // raygenShaderRecordAddress -> Field -> VkDeviceAddress
    os << "value: " << t.raygenShaderRecordAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  raygenShaderRecordSize" << std::endl;
    // raygenShaderRecordSize -> Field -> VkDeviceSize
    os << "value: " << t.raygenShaderRecordSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  missShaderBindingTableAddress" << std::endl;
    // missShaderBindingTableAddress -> Field -> VkDeviceAddress
    os << "value: " << t.missShaderBindingTableAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  missShaderBindingTableSize" << std::endl;
    // missShaderBindingTableSize -> Field -> VkDeviceSize
    os << "value: " << t.missShaderBindingTableSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  missShaderBindingTableStride" << std::endl;
    // missShaderBindingTableStride -> Field -> VkDeviceSize
    os << "value: " << t.missShaderBindingTableStride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hitShaderBindingTableAddress" << std::endl;
    // hitShaderBindingTableAddress -> Field -> VkDeviceAddress
    os << "value: " << t.hitShaderBindingTableAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hitShaderBindingTableSize" << std::endl;
    // hitShaderBindingTableSize -> Field -> VkDeviceSize
    os << "value: " << t.hitShaderBindingTableSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hitShaderBindingTableStride" << std::endl;
    // hitShaderBindingTableStride -> Field -> VkDeviceSize
    os << "value: " << t.hitShaderBindingTableStride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  callableShaderBindingTableAddress" << std::endl;
    // callableShaderBindingTableAddress -> Field -> VkDeviceAddress
    os << "value: " << t.callableShaderBindingTableAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  callableShaderBindingTableSize" << std::endl;
    // callableShaderBindingTableSize -> Field -> VkDeviceSize
    os << "value: " << t.callableShaderBindingTableSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  callableShaderBindingTableStride" << std::endl;
    // callableShaderBindingTableStride -> Field -> VkDeviceSize
    os << "value: " << t.callableShaderBindingTableStride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  width" << std::endl;
    // width -> Field -> uint32_t
    os << "value: " << t.width << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  height" << std::endl;
    // height -> Field -> uint32_t
    os << "value: " << t.height << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depth" << std::endl;
    // depth -> Field -> uint32_t
    os << "value: " << t.depth << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rayTracingPositionFetch" << std::endl;
    // rayTracingPositionFetch -> Field -> VkBool32
    os << "value: " << t.rayTracingPositionFetch << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCooperativeMatrixPropertiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  MSize" << std::endl;
    // MSize -> Field -> uint32_t
    os << "value: " << t.MSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  NSize" << std::endl;
    // NSize -> Field -> uint32_t
    os << "value: " << t.NSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  KSize" << std::endl;
    // KSize -> Field -> uint32_t
    os << "value: " << t.KSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  AType" << std::endl;
    // AType -> Field -> VkComponentTypeKHR
    os << "value: " << t.AType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  BType" << std::endl;
    // BType -> Field -> VkComponentTypeKHR
    os << "value: " << t.BType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  CType" << std::endl;
    // CType -> Field -> VkComponentTypeKHR
    os << "value: " << t.CType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ResultType" << std::endl;
    // ResultType -> Field -> VkComponentTypeKHR
    os << "value: " << t.ResultType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  saturatingAccumulation" << std::endl;
    // saturatingAccumulation -> Field -> VkBool32
    os << "value: " << t.saturatingAccumulation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  scope" << std::endl;
    // scope -> Field -> VkScopeKHR
    os << "value: " << t.scope << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceCooperativeMatrixFeaturesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  cooperativeMatrix" << std::endl;
    // cooperativeMatrix -> Field -> VkBool32
    os << "value: " << t.cooperativeMatrix << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  cooperativeMatrixRobustBufferAccess" << std::endl;
    // cooperativeMatrixRobustBufferAccess -> Field -> VkBool32
    os << "value: " << t.cooperativeMatrixRobustBufferAccess << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceCooperativeMatrixPropertiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  cooperativeMatrixSupportedStages" << std::endl;
    // cooperativeMatrixSupportedStages -> Field -> VkShaderStageFlags
    os << "value: " << t.cooperativeMatrixSupportedStages << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDebugReportCallbackCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDebugReportFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pfnCallback" << std::endl;
    // pointer
    if (t.pfnCallback != nullptr) {
      os << "value: *t.pfnCallback" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pUserData" << std::endl;
    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineRasterizationStateRasterizationOrderAMD &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rasterizationOrder" << std::endl;
    // rasterizationOrder -> Field -> VkRasterizationOrderAMD
    os << "value: " << t.rasterizationOrder << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDebugMarkerObjectNameInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  objectType" << std::endl;
    // objectType -> Field -> VkDebugReportObjectTypeEXT
    os << "value: " << t.objectType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  object" << std::endl;
    // object -> Field -> uint64_t
    os << "value: " << t.object << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pObjectName" << std::endl;
    // pObjectName -> Field -> string
    os << "value: " << t.pObjectName << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDebugMarkerObjectTagInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  objectType" << std::endl;
    // objectType -> Field -> VkDebugReportObjectTypeEXT
    os << "value: " << t.objectType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  object" << std::endl;
    // object -> Field -> uint64_t
    os << "value: " << t.object << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tagName" << std::endl;
    // tagName -> Field -> uint64_t
    os << "value: " << t.tagName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tagSize" << std::endl;
    // tagSize -> Field -> size_t
    os << "value: " << t.tagSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pTag" << std::endl;
    if (t.tagSize == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << std::hex;
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        const uint8_t *p = (const uint8_t *)t.pTag;
        for (uint64_t i = 0; i < t.tagSize; ++i) {
          os << "- 0x" << p[i] << std::endl;
        }
      }
      os << std::dec;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDebugMarkerMarkerInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMarkerName" << std::endl;
    // pMarkerName -> Field -> string
    os << "value: " << t.pMarkerName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  color" << std::endl;
    // color -> Field -> FixedArray(float)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # float" << std::endl;
        for (uint64_t i = 0; i < 4; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.color << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDedicatedAllocationImageCreateInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dedicatedAllocation" << std::endl;
    // dedicatedAllocation -> Field -> VkBool32
    os << "value: " << t.dedicatedAllocation << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDedicatedAllocationBufferCreateInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dedicatedAllocation" << std::endl;
    // dedicatedAllocation -> Field -> VkBool32
    os << "value: " << t.dedicatedAllocation << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDedicatedAllocationMemoryAllocateInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << t.image << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceTransformFeedbackFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transformFeedback" << std::endl;
    // transformFeedback -> Field -> VkBool32
    os << "value: " << t.transformFeedback << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  geometryStreams" << std::endl;
    // geometryStreams -> Field -> VkBool32
    os << "value: " << t.geometryStreams << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceTransformFeedbackPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTransformFeedbackStreams" << std::endl;
    // maxTransformFeedbackStreams -> Field -> uint32_t
    os << "value: " << t.maxTransformFeedbackStreams << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTransformFeedbackBuffers" << std::endl;
    // maxTransformFeedbackBuffers -> Field -> uint32_t
    os << "value: " << t.maxTransformFeedbackBuffers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTransformFeedbackBufferSize" << std::endl;
    // maxTransformFeedbackBufferSize -> Field -> VkDeviceSize
    os << "value: " << t.maxTransformFeedbackBufferSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTransformFeedbackStreamDataSize" << std::endl;
    // maxTransformFeedbackStreamDataSize -> Field -> uint32_t
    os << "value: " << t.maxTransformFeedbackStreamDataSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTransformFeedbackBufferDataSize" << std::endl;
    // maxTransformFeedbackBufferDataSize -> Field -> uint32_t
    os << "value: " << t.maxTransformFeedbackBufferDataSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTransformFeedbackBufferDataStride" << std::endl;
    // maxTransformFeedbackBufferDataStride -> Field -> uint32_t
    os << "value: " << t.maxTransformFeedbackBufferDataStride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transformFeedbackQueries" << std::endl;
    // transformFeedbackQueries -> Field -> VkBool32
    os << "value: " << t.transformFeedbackQueries << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transformFeedbackStreamsLinesTriangles" << std::endl;
    // transformFeedbackStreamsLinesTriangles -> Field -> VkBool32
    os << "value: " << t.transformFeedbackStreamsLinesTriangles << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transformFeedbackRasterizationStreamSelect" << std::endl;
    // transformFeedbackRasterizationStreamSelect -> Field -> VkBool32
    os << "value: " << t.transformFeedbackRasterizationStreamSelect << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transformFeedbackDraw" << std::endl;
    // transformFeedbackDraw -> Field -> VkBool32
    os << "value: " << t.transformFeedbackDraw << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineRasterizationStateStreamCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineRasterizationStateStreamCreateFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rasterizationStream" << std::endl;
    // rasterizationStream -> Field -> uint32_t
    os << "value: " << t.rasterizationStream << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCuModuleCreateInfoNVX &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dataSize" << std::endl;
    // dataSize -> Field -> size_t
    os << "value: " << t.dataSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pData" << std::endl;
    if (t.dataSize == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << std::hex;
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        const uint8_t *p = (const uint8_t *)t.pData;
        for (uint64_t i = 0; i < t.dataSize; ++i) {
          os << "- 0x" << p[i] << std::endl;
        }
      }
      os << std::dec;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCuFunctionCreateInfoNVX &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  module" << std::endl;
    // module -> Field -> VkCuModuleNVX
    os << "value: " << t.module << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pName" << std::endl;
    // pName -> Field -> string
    os << "value: " << t.pName << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCuLaunchInfoNVX &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  function" << std::endl;
    // function -> Field -> VkCuFunctionNVX
    os << "value: " << t.function << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  gridDimX" << std::endl;
    // gridDimX -> Field -> uint32_t
    os << "value: " << t.gridDimX << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  gridDimY" << std::endl;
    // gridDimY -> Field -> uint32_t
    os << "value: " << t.gridDimY << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  gridDimZ" << std::endl;
    // gridDimZ -> Field -> uint32_t
    os << "value: " << t.gridDimZ << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  blockDimX" << std::endl;
    // blockDimX -> Field -> uint32_t
    os << "value: " << t.blockDimX << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  blockDimY" << std::endl;
    // blockDimY -> Field -> uint32_t
    os << "value: " << t.blockDimY << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  blockDimZ" << std::endl;
    // blockDimZ -> Field -> uint32_t
    os << "value: " << t.blockDimZ << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sharedMemBytes" << std::endl;
    // sharedMemBytes -> Field -> uint32_t
    os << "value: " << t.sharedMemBytes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  paramCount" << std::endl;
    // paramCount -> Field -> size_t
    os << "value: " << t.paramCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pParams" << std::endl;
    if (t.paramCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << std::hex;
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        const uint8_t *p = (const uint8_t *)t.pParams;
        for (uint64_t i = 0; i < t.paramCount; ++i) {
          os << "- 0x" << p[i] << std::endl;
        }
      }
      os << std::dec;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extraCount" << std::endl;
    // extraCount -> Field -> size_t
    os << "value: " << t.extraCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pExtras" << std::endl;
    if (t.extraCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << std::hex;
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        const uint8_t *p = (const uint8_t *)t.pExtras;
        for (uint64_t i = 0; i < t.extraCount; ++i) {
          os << "- 0x" << p[i] << std::endl;
        }
      }
      os << std::dec;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageViewHandleInfoNVX &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageView" << std::endl;
    // imageView -> Field -> VkImageView
    os << "value: " << t.imageView << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorType" << std::endl;
    // descriptorType -> Field -> VkDescriptorType
    os << "value: " << t.descriptorType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampler" << std::endl;
    // sampler -> Field -> VkSampler
    os << "value: " << t.sampler << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageViewAddressPropertiesNVX &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceAddress" << std::endl;
    // deviceAddress -> Field -> VkDeviceAddress
    os << "value: " << t.deviceAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  return os;
}

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH264CapabilitiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkVideoEncodeH264CapabilityFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxLevelIdc" << std::endl;
    // maxLevelIdc -> Field -> StdVideoH264LevelIdc
    os << "value: " << t.maxLevelIdc << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSliceCount" << std::endl;
    // maxSliceCount -> Field -> uint32_t
    os << "value: " << t.maxSliceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPPictureL0ReferenceCount" << std::endl;
    // maxPPictureL0ReferenceCount -> Field -> uint32_t
    os << "value: " << t.maxPPictureL0ReferenceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxBPictureL0ReferenceCount" << std::endl;
    // maxBPictureL0ReferenceCount -> Field -> uint32_t
    os << "value: " << t.maxBPictureL0ReferenceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxL1ReferenceCount" << std::endl;
    // maxL1ReferenceCount -> Field -> uint32_t
    os << "value: " << t.maxL1ReferenceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTemporalLayerCount" << std::endl;
    // maxTemporalLayerCount -> Field -> uint32_t
    os << "value: " << t.maxTemporalLayerCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  expectDyadicTemporalLayerPattern" << std::endl;
    // expectDyadicTemporalLayerPattern -> Field -> VkBool32
    os << "value: " << t.expectDyadicTemporalLayerPattern << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minQp" << std::endl;
    // minQp -> Field -> int32_t
    os << "value: " << t.minQp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxQp" << std::endl;
    // maxQp -> Field -> int32_t
    os << "value: " << t.maxQp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  prefersGopRemainingFrames" << std::endl;
    // prefersGopRemainingFrames -> Field -> VkBool32
    os << "value: " << t.prefersGopRemainingFrames << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  requiresGopRemainingFrames" << std::endl;
    // requiresGopRemainingFrames -> Field -> VkBool32
    os << "value: " << t.requiresGopRemainingFrames << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stdSyntaxFlags" << std::endl;
    // stdSyntaxFlags -> Field -> VkVideoEncodeH264StdFlagsEXT
    os << "value: " << t.stdSyntaxFlags << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH264QpEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  qpI" << std::endl;
    // qpI -> Field -> int32_t
    os << "value: " << t.qpI << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  qpP" << std::endl;
    // qpP -> Field -> int32_t
    os << "value: " << t.qpP << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  qpB" << std::endl;
    // qpB -> Field -> int32_t
    os << "value: " << t.qpB << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH264QualityLevelPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preferredRateControlFlags" << std::endl;
    // preferredRateControlFlags -> Field -> VkVideoEncodeH264RateControlFlagsEXT
    os << "value: " << t.preferredRateControlFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preferredGopFrameCount" << std::endl;
    // preferredGopFrameCount -> Field -> uint32_t
    os << "value: " << t.preferredGopFrameCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preferredIdrPeriod" << std::endl;
    // preferredIdrPeriod -> Field -> uint32_t
    os << "value: " << t.preferredIdrPeriod << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preferredConsecutiveBFrameCount" << std::endl;
    // preferredConsecutiveBFrameCount -> Field -> uint32_t
    os << "value: " << t.preferredConsecutiveBFrameCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preferredTemporalLayerCount" << std::endl;
    // preferredTemporalLayerCount -> Field -> uint32_t
    os << "value: " << t.preferredTemporalLayerCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preferredConstantQp" << std::endl;
    // preferredConstantQp -> Field -> VkVideoEncodeH264QpEXT
    os <<  "members:" << std::endl << t.preferredConstantQp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preferredMaxL0ReferenceCount" << std::endl;
    // preferredMaxL0ReferenceCount -> Field -> uint32_t
    os << "value: " << t.preferredMaxL0ReferenceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preferredMaxL1ReferenceCount" << std::endl;
    // preferredMaxL1ReferenceCount -> Field -> uint32_t
    os << "value: " << t.preferredMaxL1ReferenceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preferredStdEntropyCodingModeFlag" << std::endl;
    // preferredStdEntropyCodingModeFlag -> Field -> VkBool32
    os << "value: " << t.preferredStdEntropyCodingModeFlag << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH264SessionCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  useMaxLevelIdc" << std::endl;
    // useMaxLevelIdc -> Field -> VkBool32
    os << "value: " << t.useMaxLevelIdc << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxLevelIdc" << std::endl;
    // maxLevelIdc -> Field -> StdVideoH264LevelIdc
    os << "value: " << t.maxLevelIdc << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH264SessionParametersAddInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stdSPSCount" << std::endl;
    // stdSPSCount -> Field -> uint32_t
    os << "value: " << t.stdSPSCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStdSPSs" << std::endl;
    // pStdSPSs -> Field -> ConstDynamicArray(StdVideoH264SequenceParameterSet)
    if (t.stdSPSCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # StdVideoH264SequenceParameterSet" << std::endl;
        for (uint64_t i = 0; i < t.stdSPSCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pStdSPSs << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stdPPSCount" << std::endl;
    // stdPPSCount -> Field -> uint32_t
    os << "value: " << t.stdPPSCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStdPPSs" << std::endl;
    // pStdPPSs -> Field -> ConstDynamicArray(StdVideoH264PictureParameterSet)
    if (t.stdPPSCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # StdVideoH264PictureParameterSet" << std::endl;
        for (uint64_t i = 0; i < t.stdPPSCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pStdPPSs << std::endl;
        } // for i
      }
    }
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH264SessionParametersCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxStdSPSCount" << std::endl;
    // maxStdSPSCount -> Field -> uint32_t
    os << "value: " << t.maxStdSPSCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxStdPPSCount" << std::endl;
    // maxStdPPSCount -> Field -> uint32_t
    os << "value: " << t.maxStdPPSCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pParametersAddInfo" << std::endl;
    // pointer
    if (t.pParametersAddInfo != nullptr) {
      os <<  "members:" << std::endl << *t.pParametersAddInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH264SessionParametersGetInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  writeStdSPS" << std::endl;
    // writeStdSPS -> Field -> VkBool32
    os << "value: " << t.writeStdSPS << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  writeStdPPS" << std::endl;
    // writeStdPPS -> Field -> VkBool32
    os << "value: " << t.writeStdPPS << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stdSPSId" << std::endl;
    // stdSPSId -> Field -> uint32_t
    os << "value: " << t.stdSPSId << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stdPPSId" << std::endl;
    // stdPPSId -> Field -> uint32_t
    os << "value: " << t.stdPPSId << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH264SessionParametersFeedbackInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hasStdSPSOverrides" << std::endl;
    // hasStdSPSOverrides -> Field -> VkBool32
    os << "value: " << t.hasStdSPSOverrides << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hasStdPPSOverrides" << std::endl;
    // hasStdPPSOverrides -> Field -> VkBool32
    os << "value: " << t.hasStdPPSOverrides << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH264NaluSliceInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  constantQp" << std::endl;
    // constantQp -> Field -> int32_t
    os << "value: " << t.constantQp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStdSliceHeader" << std::endl;
    // pointer
    if (t.pStdSliceHeader != nullptr) {
      os << "value: *t.pStdSliceHeader" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH264PictureInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  naluSliceEntryCount" << std::endl;
    // naluSliceEntryCount -> Field -> uint32_t
    os << "value: " << t.naluSliceEntryCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNaluSliceEntries" << std::endl;
    // pNaluSliceEntries -> Field -> ConstDynamicArray(VkVideoEncodeH264NaluSliceInfoEXT)
    if (t.naluSliceEntryCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkVideoEncodeH264NaluSliceInfoEXT" << std::endl;
        for (uint64_t i = 0; i < t.naluSliceEntryCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pNaluSliceEntries << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStdPictureInfo" << std::endl;
    // pointer
    if (t.pStdPictureInfo != nullptr) {
      os << "value: *t.pStdPictureInfo" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  generatePrefixNalu" << std::endl;
    // generatePrefixNalu -> Field -> VkBool32
    os << "value: " << t.generatePrefixNalu << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH264DpbSlotInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStdReferenceInfo" << std::endl;
    // pointer
    if (t.pStdReferenceInfo != nullptr) {
      os << "value: *t.pStdReferenceInfo" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH264ProfileInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stdProfileIdc" << std::endl;
    // stdProfileIdc -> Field -> StdVideoH264ProfileIdc
    os << "value: " << t.stdProfileIdc << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH264RateControlInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkVideoEncodeH264RateControlFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  gopFrameCount" << std::endl;
    // gopFrameCount -> Field -> uint32_t
    os << "value: " << t.gopFrameCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  idrPeriod" << std::endl;
    // idrPeriod -> Field -> uint32_t
    os << "value: " << t.idrPeriod << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  consecutiveBFrameCount" << std::endl;
    // consecutiveBFrameCount -> Field -> uint32_t
    os << "value: " << t.consecutiveBFrameCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  temporalLayerCount" << std::endl;
    // temporalLayerCount -> Field -> uint32_t
    os << "value: " << t.temporalLayerCount << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH264FrameSizeEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  frameISize" << std::endl;
    // frameISize -> Field -> uint32_t
    os << "value: " << t.frameISize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  framePSize" << std::endl;
    // framePSize -> Field -> uint32_t
    os << "value: " << t.framePSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  frameBSize" << std::endl;
    // frameBSize -> Field -> uint32_t
    os << "value: " << t.frameBSize << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH264RateControlLayerInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  useMinQp" << std::endl;
    // useMinQp -> Field -> VkBool32
    os << "value: " << t.useMinQp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minQp" << std::endl;
    // minQp -> Field -> VkVideoEncodeH264QpEXT
    os <<  "members:" << std::endl << t.minQp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  useMaxQp" << std::endl;
    // useMaxQp -> Field -> VkBool32
    os << "value: " << t.useMaxQp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxQp" << std::endl;
    // maxQp -> Field -> VkVideoEncodeH264QpEXT
    os <<  "members:" << std::endl << t.maxQp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  useMaxFrameSize" << std::endl;
    // useMaxFrameSize -> Field -> VkBool32
    os << "value: " << t.useMaxFrameSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFrameSize" << std::endl;
    // maxFrameSize -> Field -> VkVideoEncodeH264FrameSizeEXT
    os <<  "members:" << std::endl << t.maxFrameSize << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH264GopRemainingFrameInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  useGopRemainingFrames" << std::endl;
    // useGopRemainingFrames -> Field -> VkBool32
    os << "value: " << t.useGopRemainingFrames << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  gopRemainingI" << std::endl;
    // gopRemainingI -> Field -> uint32_t
    os << "value: " << t.gopRemainingI << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  gopRemainingP" << std::endl;
    // gopRemainingP -> Field -> uint32_t
    os << "value: " << t.gopRemainingP << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  gopRemainingB" << std::endl;
    // gopRemainingB -> Field -> uint32_t
    os << "value: " << t.gopRemainingB << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH265CapabilitiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkVideoEncodeH265CapabilityFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxLevelIdc" << std::endl;
    // maxLevelIdc -> Field -> StdVideoH265LevelIdc
    os << "value: " << t.maxLevelIdc << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSliceSegmentCount" << std::endl;
    // maxSliceSegmentCount -> Field -> uint32_t
    os << "value: " << t.maxSliceSegmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTiles" << std::endl;
    // maxTiles -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.maxTiles << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ctbSizes" << std::endl;
    // ctbSizes -> Field -> VkVideoEncodeH265CtbSizeFlagsEXT
    os << "value: " << t.ctbSizes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transformBlockSizes" << std::endl;
    // transformBlockSizes -> Field -> VkVideoEncodeH265TransformBlockSizeFlagsEXT
    os << "value: " << t.transformBlockSizes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPPictureL0ReferenceCount" << std::endl;
    // maxPPictureL0ReferenceCount -> Field -> uint32_t
    os << "value: " << t.maxPPictureL0ReferenceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxBPictureL0ReferenceCount" << std::endl;
    // maxBPictureL0ReferenceCount -> Field -> uint32_t
    os << "value: " << t.maxBPictureL0ReferenceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxL1ReferenceCount" << std::endl;
    // maxL1ReferenceCount -> Field -> uint32_t
    os << "value: " << t.maxL1ReferenceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSubLayerCount" << std::endl;
    // maxSubLayerCount -> Field -> uint32_t
    os << "value: " << t.maxSubLayerCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  expectDyadicTemporalSubLayerPattern" << std::endl;
    // expectDyadicTemporalSubLayerPattern -> Field -> VkBool32
    os << "value: " << t.expectDyadicTemporalSubLayerPattern << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minQp" << std::endl;
    // minQp -> Field -> int32_t
    os << "value: " << t.minQp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxQp" << std::endl;
    // maxQp -> Field -> int32_t
    os << "value: " << t.maxQp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  prefersGopRemainingFrames" << std::endl;
    // prefersGopRemainingFrames -> Field -> VkBool32
    os << "value: " << t.prefersGopRemainingFrames << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  requiresGopRemainingFrames" << std::endl;
    // requiresGopRemainingFrames -> Field -> VkBool32
    os << "value: " << t.requiresGopRemainingFrames << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stdSyntaxFlags" << std::endl;
    // stdSyntaxFlags -> Field -> VkVideoEncodeH265StdFlagsEXT
    os << "value: " << t.stdSyntaxFlags << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH265SessionCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  useMaxLevelIdc" << std::endl;
    // useMaxLevelIdc -> Field -> VkBool32
    os << "value: " << t.useMaxLevelIdc << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxLevelIdc" << std::endl;
    // maxLevelIdc -> Field -> StdVideoH265LevelIdc
    os << "value: " << t.maxLevelIdc << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH265QpEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  qpI" << std::endl;
    // qpI -> Field -> int32_t
    os << "value: " << t.qpI << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  qpP" << std::endl;
    // qpP -> Field -> int32_t
    os << "value: " << t.qpP << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  qpB" << std::endl;
    // qpB -> Field -> int32_t
    os << "value: " << t.qpB << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH265QualityLevelPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preferredRateControlFlags" << std::endl;
    // preferredRateControlFlags -> Field -> VkVideoEncodeH265RateControlFlagsEXT
    os << "value: " << t.preferredRateControlFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preferredGopFrameCount" << std::endl;
    // preferredGopFrameCount -> Field -> uint32_t
    os << "value: " << t.preferredGopFrameCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preferredIdrPeriod" << std::endl;
    // preferredIdrPeriod -> Field -> uint32_t
    os << "value: " << t.preferredIdrPeriod << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preferredConsecutiveBFrameCount" << std::endl;
    // preferredConsecutiveBFrameCount -> Field -> uint32_t
    os << "value: " << t.preferredConsecutiveBFrameCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preferredSubLayerCount" << std::endl;
    // preferredSubLayerCount -> Field -> uint32_t
    os << "value: " << t.preferredSubLayerCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preferredConstantQp" << std::endl;
    // preferredConstantQp -> Field -> VkVideoEncodeH265QpEXT
    os <<  "members:" << std::endl << t.preferredConstantQp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preferredMaxL0ReferenceCount" << std::endl;
    // preferredMaxL0ReferenceCount -> Field -> uint32_t
    os << "value: " << t.preferredMaxL0ReferenceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preferredMaxL1ReferenceCount" << std::endl;
    // preferredMaxL1ReferenceCount -> Field -> uint32_t
    os << "value: " << t.preferredMaxL1ReferenceCount << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH265SessionParametersAddInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stdVPSCount" << std::endl;
    // stdVPSCount -> Field -> uint32_t
    os << "value: " << t.stdVPSCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStdVPSs" << std::endl;
    // pStdVPSs -> Field -> ConstDynamicArray(StdVideoH265VideoParameterSet)
    if (t.stdVPSCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # StdVideoH265VideoParameterSet" << std::endl;
        for (uint64_t i = 0; i < t.stdVPSCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pStdVPSs << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stdSPSCount" << std::endl;
    // stdSPSCount -> Field -> uint32_t
    os << "value: " << t.stdSPSCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStdSPSs" << std::endl;
    // pStdSPSs -> Field -> ConstDynamicArray(StdVideoH265SequenceParameterSet)
    if (t.stdSPSCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # StdVideoH265SequenceParameterSet" << std::endl;
        for (uint64_t i = 0; i < t.stdSPSCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pStdSPSs << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stdPPSCount" << std::endl;
    // stdPPSCount -> Field -> uint32_t
    os << "value: " << t.stdPPSCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStdPPSs" << std::endl;
    // pStdPPSs -> Field -> ConstDynamicArray(StdVideoH265PictureParameterSet)
    if (t.stdPPSCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # StdVideoH265PictureParameterSet" << std::endl;
        for (uint64_t i = 0; i < t.stdPPSCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pStdPPSs << std::endl;
        } // for i
      }
    }
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH265SessionParametersCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxStdVPSCount" << std::endl;
    // maxStdVPSCount -> Field -> uint32_t
    os << "value: " << t.maxStdVPSCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxStdSPSCount" << std::endl;
    // maxStdSPSCount -> Field -> uint32_t
    os << "value: " << t.maxStdSPSCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxStdPPSCount" << std::endl;
    // maxStdPPSCount -> Field -> uint32_t
    os << "value: " << t.maxStdPPSCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pParametersAddInfo" << std::endl;
    // pointer
    if (t.pParametersAddInfo != nullptr) {
      os <<  "members:" << std::endl << *t.pParametersAddInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH265SessionParametersGetInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  writeStdVPS" << std::endl;
    // writeStdVPS -> Field -> VkBool32
    os << "value: " << t.writeStdVPS << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  writeStdSPS" << std::endl;
    // writeStdSPS -> Field -> VkBool32
    os << "value: " << t.writeStdSPS << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  writeStdPPS" << std::endl;
    // writeStdPPS -> Field -> VkBool32
    os << "value: " << t.writeStdPPS << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stdVPSId" << std::endl;
    // stdVPSId -> Field -> uint32_t
    os << "value: " << t.stdVPSId << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stdSPSId" << std::endl;
    // stdSPSId -> Field -> uint32_t
    os << "value: " << t.stdSPSId << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stdPPSId" << std::endl;
    // stdPPSId -> Field -> uint32_t
    os << "value: " << t.stdPPSId << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH265SessionParametersFeedbackInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hasStdVPSOverrides" << std::endl;
    // hasStdVPSOverrides -> Field -> VkBool32
    os << "value: " << t.hasStdVPSOverrides << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hasStdSPSOverrides" << std::endl;
    // hasStdSPSOverrides -> Field -> VkBool32
    os << "value: " << t.hasStdSPSOverrides << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hasStdPPSOverrides" << std::endl;
    // hasStdPPSOverrides -> Field -> VkBool32
    os << "value: " << t.hasStdPPSOverrides << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH265NaluSliceSegmentInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  constantQp" << std::endl;
    // constantQp -> Field -> int32_t
    os << "value: " << t.constantQp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStdSliceSegmentHeader" << std::endl;
    // pointer
    if (t.pStdSliceSegmentHeader != nullptr) {
      os << "value: *t.pStdSliceSegmentHeader" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH265PictureInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  naluSliceSegmentEntryCount" << std::endl;
    // naluSliceSegmentEntryCount -> Field -> uint32_t
    os << "value: " << t.naluSliceSegmentEntryCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNaluSliceSegmentEntries" << std::endl;
    // pNaluSliceSegmentEntries -> Field -> ConstDynamicArray(VkVideoEncodeH265NaluSliceSegmentInfoEXT)
    if (t.naluSliceSegmentEntryCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkVideoEncodeH265NaluSliceSegmentInfoEXT" << std::endl;
        for (uint64_t i = 0; i < t.naluSliceSegmentEntryCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pNaluSliceSegmentEntries << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStdPictureInfo" << std::endl;
    // pointer
    if (t.pStdPictureInfo != nullptr) {
      os << "value: *t.pStdPictureInfo" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH265DpbSlotInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStdReferenceInfo" << std::endl;
    // pointer
    if (t.pStdReferenceInfo != nullptr) {
      os << "value: *t.pStdReferenceInfo" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH265ProfileInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stdProfileIdc" << std::endl;
    // stdProfileIdc -> Field -> StdVideoH265ProfileIdc
    os << "value: " << t.stdProfileIdc << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH265RateControlInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkVideoEncodeH265RateControlFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  gopFrameCount" << std::endl;
    // gopFrameCount -> Field -> uint32_t
    os << "value: " << t.gopFrameCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  idrPeriod" << std::endl;
    // idrPeriod -> Field -> uint32_t
    os << "value: " << t.idrPeriod << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  consecutiveBFrameCount" << std::endl;
    // consecutiveBFrameCount -> Field -> uint32_t
    os << "value: " << t.consecutiveBFrameCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subLayerCount" << std::endl;
    // subLayerCount -> Field -> uint32_t
    os << "value: " << t.subLayerCount << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH265FrameSizeEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  frameISize" << std::endl;
    // frameISize -> Field -> uint32_t
    os << "value: " << t.frameISize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  framePSize" << std::endl;
    // framePSize -> Field -> uint32_t
    os << "value: " << t.framePSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  frameBSize" << std::endl;
    // frameBSize -> Field -> uint32_t
    os << "value: " << t.frameBSize << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH265RateControlLayerInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  useMinQp" << std::endl;
    // useMinQp -> Field -> VkBool32
    os << "value: " << t.useMinQp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minQp" << std::endl;
    // minQp -> Field -> VkVideoEncodeH265QpEXT
    os <<  "members:" << std::endl << t.minQp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  useMaxQp" << std::endl;
    // useMaxQp -> Field -> VkBool32
    os << "value: " << t.useMaxQp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxQp" << std::endl;
    // maxQp -> Field -> VkVideoEncodeH265QpEXT
    os <<  "members:" << std::endl << t.maxQp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  useMaxFrameSize" << std::endl;
    // useMaxFrameSize -> Field -> VkBool32
    os << "value: " << t.useMaxFrameSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFrameSize" << std::endl;
    // maxFrameSize -> Field -> VkVideoEncodeH265FrameSizeEXT
    os <<  "members:" << std::endl << t.maxFrameSize << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkVideoEncodeH265GopRemainingFrameInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  useGopRemainingFrames" << std::endl;
    // useGopRemainingFrames -> Field -> VkBool32
    os << "value: " << t.useGopRemainingFrames << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  gopRemainingI" << std::endl;
    // gopRemainingI -> Field -> uint32_t
    os << "value: " << t.gopRemainingI << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  gopRemainingP" << std::endl;
    // gopRemainingP -> Field -> uint32_t
    os << "value: " << t.gopRemainingP << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  gopRemainingB" << std::endl;
    // gopRemainingB -> Field -> uint32_t
    os << "value: " << t.gopRemainingB << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

std::ostream &operator<<(std::ostream & os, const VkTextureLODGatherFormatPropertiesAMD &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportsTextureGatherLODBiasAMD" << std::endl;
    // supportsTextureGatherLODBiasAMD -> Field -> VkBool32
    os << "value: " << t.supportsTextureGatherLODBiasAMD << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkShaderResourceUsageAMD &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  numUsedVgprs" << std::endl;
    // numUsedVgprs -> Field -> uint32_t
    os << "value: " << t.numUsedVgprs << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  numUsedSgprs" << std::endl;
    // numUsedSgprs -> Field -> uint32_t
    os << "value: " << t.numUsedSgprs << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ldsSizePerLocalWorkGroup" << std::endl;
    // ldsSizePerLocalWorkGroup -> Field -> uint32_t
    os << "value: " << t.ldsSizePerLocalWorkGroup << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ldsUsageSizeInBytes" << std::endl;
    // ldsUsageSizeInBytes -> Field -> size_t
    os << "value: " << t.ldsUsageSizeInBytes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  scratchMemUsageInBytes" << std::endl;
    // scratchMemUsageInBytes -> Field -> size_t
    os << "value: " << t.scratchMemUsageInBytes << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkShaderStatisticsInfoAMD &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderStageMask" << std::endl;
    // shaderStageMask -> Field -> VkShaderStageFlags
    os << "value: " << t.shaderStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  resourceUsage" << std::endl;
    // resourceUsage -> Field -> VkShaderResourceUsageAMD
    os <<  "members:" << std::endl << t.resourceUsage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  numPhysicalVgprs" << std::endl;
    // numPhysicalVgprs -> Field -> uint32_t
    os << "value: " << t.numPhysicalVgprs << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  numPhysicalSgprs" << std::endl;
    // numPhysicalSgprs -> Field -> uint32_t
    os << "value: " << t.numPhysicalSgprs << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  numAvailableVgprs" << std::endl;
    // numAvailableVgprs -> Field -> uint32_t
    os << "value: " << t.numAvailableVgprs << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  numAvailableSgprs" << std::endl;
    // numAvailableSgprs -> Field -> uint32_t
    os << "value: " << t.numAvailableSgprs << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  computeWorkGroupSize" << std::endl;
    // computeWorkGroupSize -> Field -> FixedArray(uint32_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < 3; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.computeWorkGroupSize << std::endl;
        } // for i
      }
    }
  }
  return os;
}

#ifdef VK_USE_PLATFORM_GGP
std::ostream &operator<<(std::ostream & os, const VkStreamDescriptorSurfaceCreateInfoGGP &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkStreamDescriptorSurfaceCreateFlagsGGP
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  streamDescriptor" << std::endl;
    // streamDescriptor -> Field -> GgpStreamDescriptor
    os << "value: " << t.streamDescriptor << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_GGP

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceCornerSampledImageFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  cornerSampledImage" << std::endl;
    // cornerSampledImage -> Field -> VkBool32
    os << "value: " << t.cornerSampledImage << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkExternalImageFormatPropertiesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageFormatProperties" << std::endl;
    // imageFormatProperties -> Field -> VkImageFormatProperties
    os <<  "members:" << std::endl << t.imageFormatProperties << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  externalMemoryFeatures" << std::endl;
    // externalMemoryFeatures -> Field -> VkExternalMemoryFeatureFlagsNV
    os << "value: " << t.externalMemoryFeatures << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  exportFromImportedHandleTypes" << std::endl;
    // exportFromImportedHandleTypes -> Field -> VkExternalMemoryHandleTypeFlagsNV
    os << "value: " << t.exportFromImportedHandleTypes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compatibleHandleTypes" << std::endl;
    // compatibleHandleTypes -> Field -> VkExternalMemoryHandleTypeFlagsNV
    os << "value: " << t.compatibleHandleTypes << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkExternalMemoryImageCreateInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleTypes" << std::endl;
    // handleTypes -> Field -> VkExternalMemoryHandleTypeFlagsNV
    os << "value: " << t.handleTypes << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkExportMemoryAllocateInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleTypes" << std::endl;
    // handleTypes -> Field -> VkExternalMemoryHandleTypeFlagsNV
    os << "value: " << t.handleTypes << std::endl;
  }
  return os;
}

#ifdef VK_USE_PLATFORM_WIN32_KHR
std::ostream &operator<<(std::ostream & os, const VkImportMemoryWin32HandleInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalMemoryHandleTypeFlagsNV
    os << "value: " << t.handleType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handle" << std::endl;
    // handle -> Field -> HANDLE
    os << "value: " << t.handle << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_WIN32_KHR

#ifdef VK_USE_PLATFORM_WIN32_KHR
std::ostream &operator<<(std::ostream & os, const VkExportMemoryWin32HandleInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAttributes" << std::endl;
    // pointer
    if (t.pAttributes != nullptr) {
      os << "value: *t.pAttributes" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dwAccess" << std::endl;
    // dwAccess -> Field -> DWORD
    os << "value: " << t.dwAccess << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_WIN32_KHR

#ifdef VK_USE_PLATFORM_WIN32_KHR
std::ostream &operator<<(std::ostream & os, const VkWin32KeyedMutexAcquireReleaseInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  acquireCount" << std::endl;
    // acquireCount -> Field -> uint32_t
    os << "value: " << t.acquireCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAcquireSyncs" << std::endl;
    // pAcquireSyncs -> Field -> ConstDynamicArray(VkDeviceMemory)
    if (t.acquireCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDeviceMemory" << std::endl;
        for (uint64_t i = 0; i < t.acquireCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pAcquireSyncs << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAcquireKeys" << std::endl;
    // pAcquireKeys -> Field -> ConstDynamicArray(uint64_t)
    if (t.acquireCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint64_t" << std::endl;
        for (uint64_t i = 0; i < t.acquireCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pAcquireKeys << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAcquireTimeoutMilliseconds" << std::endl;
    // pAcquireTimeoutMilliseconds -> Field -> ConstDynamicArray(uint32_t)
    if (t.acquireCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.acquireCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pAcquireTimeoutMilliseconds << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  releaseCount" << std::endl;
    // releaseCount -> Field -> uint32_t
    os << "value: " << t.releaseCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pReleaseSyncs" << std::endl;
    // pReleaseSyncs -> Field -> ConstDynamicArray(VkDeviceMemory)
    if (t.releaseCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDeviceMemory" << std::endl;
        for (uint64_t i = 0; i < t.releaseCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pReleaseSyncs << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pReleaseKeys" << std::endl;
    // pReleaseKeys -> Field -> ConstDynamicArray(uint64_t)
    if (t.releaseCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint64_t" << std::endl;
        for (uint64_t i = 0; i < t.releaseCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pReleaseKeys << std::endl;
        } // for i
      }
    }
  }
  return os;
}
#endif //VK_USE_PLATFORM_WIN32_KHR

std::ostream &operator<<(std::ostream & os, const VkValidationFlagsEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  disabledValidationCheckCount" << std::endl;
    // disabledValidationCheckCount -> Field -> uint32_t
    os << "value: " << t.disabledValidationCheckCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDisabledValidationChecks" << std::endl;
    // pDisabledValidationChecks -> Field -> ConstDynamicArray(VkValidationCheckEXT)
    if (t.disabledValidationCheckCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkValidationCheckEXT" << std::endl;
        for (uint64_t i = 0; i < t.disabledValidationCheckCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pDisabledValidationChecks << std::endl;
        } // for i
      }
    }
  }
  return os;
}

#ifdef VK_USE_PLATFORM_VI_NN
std::ostream &operator<<(std::ostream & os, const VkViSurfaceCreateInfoNN &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkViSurfaceCreateFlagsNN
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  window" << std::endl;
    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_VI_NN

std::ostream &operator<<(std::ostream & os, const VkImageViewASTCDecodeModeEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  decodeMode" << std::endl;
    // decodeMode -> Field -> VkFormat
    os << "value: " << t.decodeMode << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceASTCDecodeFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  decodeModeSharedExponent" << std::endl;
    // decodeModeSharedExponent -> Field -> VkBool32
    os << "value: " << t.decodeModeSharedExponent << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDevicePipelineRobustnessFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineRobustness" << std::endl;
    // pipelineRobustness -> Field -> VkBool32
    os << "value: " << t.pipelineRobustness << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDevicePipelineRobustnessPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  defaultRobustnessStorageBuffers" << std::endl;
    // defaultRobustnessStorageBuffers -> Field -> VkPipelineRobustnessBufferBehaviorEXT
    os << "value: " << t.defaultRobustnessStorageBuffers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  defaultRobustnessUniformBuffers" << std::endl;
    // defaultRobustnessUniformBuffers -> Field -> VkPipelineRobustnessBufferBehaviorEXT
    os << "value: " << t.defaultRobustnessUniformBuffers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  defaultRobustnessVertexInputs" << std::endl;
    // defaultRobustnessVertexInputs -> Field -> VkPipelineRobustnessBufferBehaviorEXT
    os << "value: " << t.defaultRobustnessVertexInputs << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  defaultRobustnessImages" << std::endl;
    // defaultRobustnessImages -> Field -> VkPipelineRobustnessImageBehaviorEXT
    os << "value: " << t.defaultRobustnessImages << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineRobustnessCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storageBuffers" << std::endl;
    // storageBuffers -> Field -> VkPipelineRobustnessBufferBehaviorEXT
    os << "value: " << t.storageBuffers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uniformBuffers" << std::endl;
    // uniformBuffers -> Field -> VkPipelineRobustnessBufferBehaviorEXT
    os << "value: " << t.uniformBuffers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexInputs" << std::endl;
    // vertexInputs -> Field -> VkPipelineRobustnessBufferBehaviorEXT
    os << "value: " << t.vertexInputs << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  images" << std::endl;
    // images -> Field -> VkPipelineRobustnessImageBehaviorEXT
    os << "value: " << t.images << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkConditionalRenderingBeginInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkConditionalRenderingFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceConditionalRenderingFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  conditionalRendering" << std::endl;
    // conditionalRendering -> Field -> VkBool32
    os << "value: " << t.conditionalRendering << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  inheritedConditionalRendering" << std::endl;
    // inheritedConditionalRendering -> Field -> VkBool32
    os << "value: " << t.inheritedConditionalRendering << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCommandBufferInheritanceConditionalRenderingInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  conditionalRenderingEnable" << std::endl;
    // conditionalRenderingEnable -> Field -> VkBool32
    os << "value: " << t.conditionalRenderingEnable << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkViewportWScalingNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  xcoeff" << std::endl;
    // xcoeff -> Field -> float
    os << "value: " << t.xcoeff << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ycoeff" << std::endl;
    // ycoeff -> Field -> float
    os << "value: " << t.ycoeff << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineViewportWScalingStateCreateInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewportWScalingEnable" << std::endl;
    // viewportWScalingEnable -> Field -> VkBool32
    os << "value: " << t.viewportWScalingEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewportCount" << std::endl;
    // viewportCount -> Field -> uint32_t
    os << "value: " << t.viewportCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pViewportWScalings" << std::endl;
    // pViewportWScalings -> Field -> ConstDynamicArray(VkViewportWScalingNV)
    if (t.viewportCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkViewportWScalingNV" << std::endl;
        for (uint64_t i = 0; i < t.viewportCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pViewportWScalings << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSurfaceCapabilities2EXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minImageCount" << std::endl;
    // minImageCount -> Field -> uint32_t
    os << "value: " << t.minImageCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxImageCount" << std::endl;
    // maxImageCount -> Field -> uint32_t
    os << "value: " << t.maxImageCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  currentExtent" << std::endl;
    // currentExtent -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.currentExtent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minImageExtent" << std::endl;
    // minImageExtent -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.minImageExtent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxImageExtent" << std::endl;
    // maxImageExtent -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.maxImageExtent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxImageArrayLayers" << std::endl;
    // maxImageArrayLayers -> Field -> uint32_t
    os << "value: " << t.maxImageArrayLayers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedTransforms" << std::endl;
    // supportedTransforms -> Field -> VkSurfaceTransformFlagsKHR
    os << "value: " << t.supportedTransforms << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  currentTransform" << std::endl;
    // currentTransform -> Field -> VkSurfaceTransformFlagBitsKHR
    os << "value: " << t.currentTransform << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedCompositeAlpha" << std::endl;
    // supportedCompositeAlpha -> Field -> VkCompositeAlphaFlagsKHR
    os << "value: " << t.supportedCompositeAlpha << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedUsageFlags" << std::endl;
    // supportedUsageFlags -> Field -> VkImageUsageFlags
    os << "value: " << t.supportedUsageFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedSurfaceCounters" << std::endl;
    // supportedSurfaceCounters -> Field -> VkSurfaceCounterFlagsEXT
    os << "value: " << t.supportedSurfaceCounters << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDisplayPowerInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  powerState" << std::endl;
    // powerState -> Field -> VkDisplayPowerStateEXT
    os << "value: " << t.powerState << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceEventInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceEvent" << std::endl;
    // deviceEvent -> Field -> VkDeviceEventTypeEXT
    os << "value: " << t.deviceEvent << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDisplayEventInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displayEvent" << std::endl;
    // displayEvent -> Field -> VkDisplayEventTypeEXT
    os << "value: " << t.displayEvent << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSwapchainCounterCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  surfaceCounters" << std::endl;
    // surfaceCounters -> Field -> VkSurfaceCounterFlagsEXT
    os << "value: " << t.surfaceCounters << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRefreshCycleDurationGOOGLE &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  refreshDuration" << std::endl;
    // refreshDuration -> Field -> uint64_t
    os << "value: " << t.refreshDuration << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPastPresentationTimingGOOGLE &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  presentID" << std::endl;
    // presentID -> Field -> uint32_t
    os << "value: " << t.presentID << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  desiredPresentTime" << std::endl;
    // desiredPresentTime -> Field -> uint64_t
    os << "value: " << t.desiredPresentTime << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  actualPresentTime" << std::endl;
    // actualPresentTime -> Field -> uint64_t
    os << "value: " << t.actualPresentTime << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  earliestPresentTime" << std::endl;
    // earliestPresentTime -> Field -> uint64_t
    os << "value: " << t.earliestPresentTime << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  presentMargin" << std::endl;
    // presentMargin -> Field -> uint64_t
    os << "value: " << t.presentMargin << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPresentTimeGOOGLE &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  presentID" << std::endl;
    // presentID -> Field -> uint32_t
    os << "value: " << t.presentID << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  desiredPresentTime" << std::endl;
    // desiredPresentTime -> Field -> uint64_t
    os << "value: " << t.desiredPresentTime << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPresentTimesInfoGOOGLE &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  swapchainCount" << std::endl;
    // swapchainCount -> Field -> uint32_t
    os << "value: " << t.swapchainCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pTimes" << std::endl;
    // pTimes -> Field -> ConstDynamicArray(VkPresentTimeGOOGLE)
    if (t.swapchainCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkPresentTimeGOOGLE" << std::endl;
        for (uint64_t i = 0; i < t.swapchainCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pTimes << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  perViewPositionAllComponents" << std::endl;
    // perViewPositionAllComponents -> Field -> VkBool32
    os << "value: " << t.perViewPositionAllComponents << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkViewportSwizzleNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  x" << std::endl;
    // x -> Field -> VkViewportCoordinateSwizzleNV
    os << "value: " << t.x << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  y" << std::endl;
    // y -> Field -> VkViewportCoordinateSwizzleNV
    os << "value: " << t.y << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  z" << std::endl;
    // z -> Field -> VkViewportCoordinateSwizzleNV
    os << "value: " << t.z << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  w" << std::endl;
    // w -> Field -> VkViewportCoordinateSwizzleNV
    os << "value: " << t.w << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineViewportSwizzleStateCreateInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineViewportSwizzleStateCreateFlagsNV
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewportCount" << std::endl;
    // viewportCount -> Field -> uint32_t
    os << "value: " << t.viewportCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pViewportSwizzles" << std::endl;
    // pViewportSwizzles -> Field -> ConstDynamicArray(VkViewportSwizzleNV)
    if (t.viewportCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkViewportSwizzleNV" << std::endl;
        for (uint64_t i = 0; i < t.viewportCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pViewportSwizzles << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceDiscardRectanglePropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDiscardRectangles" << std::endl;
    // maxDiscardRectangles -> Field -> uint32_t
    os << "value: " << t.maxDiscardRectangles << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineDiscardRectangleStateCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineDiscardRectangleStateCreateFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  discardRectangleMode" << std::endl;
    // discardRectangleMode -> Field -> VkDiscardRectangleModeEXT
    os << "value: " << t.discardRectangleMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  discardRectangleCount" << std::endl;
    // discardRectangleCount -> Field -> uint32_t
    os << "value: " << t.discardRectangleCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDiscardRectangles" << std::endl;
    // pDiscardRectangles -> Field -> ConstDynamicArray(VkRect2D)
    if (t.discardRectangleCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkRect2D" << std::endl;
        for (uint64_t i = 0; i < t.discardRectangleCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pDiscardRectangles << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceConservativeRasterizationPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primitiveOverestimationSize" << std::endl;
    // primitiveOverestimationSize -> Field -> float
    os << "value: " << t.primitiveOverestimationSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxExtraPrimitiveOverestimationSize" << std::endl;
    // maxExtraPrimitiveOverestimationSize -> Field -> float
    os << "value: " << t.maxExtraPrimitiveOverestimationSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extraPrimitiveOverestimationSizeGranularity" << std::endl;
    // extraPrimitiveOverestimationSizeGranularity -> Field -> float
    os << "value: " << t.extraPrimitiveOverestimationSizeGranularity << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primitiveUnderestimation" << std::endl;
    // primitiveUnderestimation -> Field -> VkBool32
    os << "value: " << t.primitiveUnderestimation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  conservativePointAndLineRasterization" << std::endl;
    // conservativePointAndLineRasterization -> Field -> VkBool32
    os << "value: " << t.conservativePointAndLineRasterization << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  degenerateTrianglesRasterized" << std::endl;
    // degenerateTrianglesRasterized -> Field -> VkBool32
    os << "value: " << t.degenerateTrianglesRasterized << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  degenerateLinesRasterized" << std::endl;
    // degenerateLinesRasterized -> Field -> VkBool32
    os << "value: " << t.degenerateLinesRasterized << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fullyCoveredFragmentShaderInputVariable" << std::endl;
    // fullyCoveredFragmentShaderInputVariable -> Field -> VkBool32
    os << "value: " << t.fullyCoveredFragmentShaderInputVariable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  conservativeRasterizationPostDepthCoverage" << std::endl;
    // conservativeRasterizationPostDepthCoverage -> Field -> VkBool32
    os << "value: " << t.conservativeRasterizationPostDepthCoverage << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineRasterizationConservativeStateCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineRasterizationConservativeStateCreateFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  conservativeRasterizationMode" << std::endl;
    // conservativeRasterizationMode -> Field -> VkConservativeRasterizationModeEXT
    os << "value: " << t.conservativeRasterizationMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extraPrimitiveOverestimationSize" << std::endl;
    // extraPrimitiveOverestimationSize -> Field -> float
    os << "value: " << t.extraPrimitiveOverestimationSize << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceDepthClipEnableFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthClipEnable" << std::endl;
    // depthClipEnable -> Field -> VkBool32
    os << "value: " << t.depthClipEnable << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineRasterizationDepthClipStateCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineRasterizationDepthClipStateCreateFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthClipEnable" << std::endl;
    // depthClipEnable -> Field -> VkBool32
    os << "value: " << t.depthClipEnable << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkXYColorEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  x" << std::endl;
    // x -> Field -> float
    os << "value: " << t.x << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  y" << std::endl;
    // y -> Field -> float
    os << "value: " << t.y << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkHdrMetadataEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displayPrimaryRed" << std::endl;
    // displayPrimaryRed -> Field -> VkXYColorEXT
    os <<  "members:" << std::endl << t.displayPrimaryRed << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displayPrimaryGreen" << std::endl;
    // displayPrimaryGreen -> Field -> VkXYColorEXT
    os <<  "members:" << std::endl << t.displayPrimaryGreen << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displayPrimaryBlue" << std::endl;
    // displayPrimaryBlue -> Field -> VkXYColorEXT
    os <<  "members:" << std::endl << t.displayPrimaryBlue << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  whitePoint" << std::endl;
    // whitePoint -> Field -> VkXYColorEXT
    os <<  "members:" << std::endl << t.whitePoint << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxLuminance" << std::endl;
    // maxLuminance -> Field -> float
    os << "value: " << t.maxLuminance << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minLuminance" << std::endl;
    // minLuminance -> Field -> float
    os << "value: " << t.minLuminance << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxContentLightLevel" << std::endl;
    // maxContentLightLevel -> Field -> float
    os << "value: " << t.maxContentLightLevel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFrameAverageLightLevel" << std::endl;
    // maxFrameAverageLightLevel -> Field -> float
    os << "value: " << t.maxFrameAverageLightLevel << std::endl;
  }
  return os;
}

#ifdef VK_USE_PLATFORM_IOS_MVK
std::ostream &operator<<(std::ostream & os, const VkIOSSurfaceCreateInfoMVK &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkIOSSurfaceCreateFlagsMVK
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pView" << std::endl;
    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_IOS_MVK

#ifdef VK_USE_PLATFORM_MACOS_MVK
std::ostream &operator<<(std::ostream & os, const VkMacOSSurfaceCreateInfoMVK &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkMacOSSurfaceCreateFlagsMVK
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pView" << std::endl;
    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_MACOS_MVK

std::ostream &operator<<(std::ostream & os, const VkDebugUtilsLabelEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pLabelName" << std::endl;
    // pLabelName -> Field -> string
    os << "value: " << t.pLabelName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  color" << std::endl;
    // color -> Field -> FixedArray(float)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # float" << std::endl;
        for (uint64_t i = 0; i < 4; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.color << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDebugUtilsObjectNameInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  objectType" << std::endl;
    // objectType -> Field -> VkObjectType
    os << "value: " << t.objectType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  objectHandle" << std::endl;
    // objectHandle -> Field -> uint64_t
    os << "value: " << t.objectHandle << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pObjectName" << std::endl;
    // pObjectName -> Field -> string
    os << "value: " << t.pObjectName << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDebugUtilsMessengerCallbackDataEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDebugUtilsMessengerCallbackDataFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMessageIdName" << std::endl;
    // pMessageIdName -> Field -> string
    os << "value: " << t.pMessageIdName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  messageIdNumber" << std::endl;
    // messageIdNumber -> Field -> int32_t
    os << "value: " << t.messageIdNumber << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMessage" << std::endl;
    // pMessage -> Field -> string
    os << "value: " << t.pMessage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueLabelCount" << std::endl;
    // queueLabelCount -> Field -> uint32_t
    os << "value: " << t.queueLabelCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pQueueLabels" << std::endl;
    // pQueueLabels -> Field -> ConstDynamicArray(VkDebugUtilsLabelEXT)
    if (t.queueLabelCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDebugUtilsLabelEXT" << std::endl;
        for (uint64_t i = 0; i < t.queueLabelCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pQueueLabels << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  cmdBufLabelCount" << std::endl;
    // cmdBufLabelCount -> Field -> uint32_t
    os << "value: " << t.cmdBufLabelCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCmdBufLabels" << std::endl;
    // pCmdBufLabels -> Field -> ConstDynamicArray(VkDebugUtilsLabelEXT)
    if (t.cmdBufLabelCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDebugUtilsLabelEXT" << std::endl;
        for (uint64_t i = 0; i < t.cmdBufLabelCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pCmdBufLabels << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  objectCount" << std::endl;
    // objectCount -> Field -> uint32_t
    os << "value: " << t.objectCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pObjects" << std::endl;
    // pObjects -> Field -> ConstDynamicArray(VkDebugUtilsObjectNameInfoEXT)
    if (t.objectCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDebugUtilsObjectNameInfoEXT" << std::endl;
        for (uint64_t i = 0; i < t.objectCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pObjects << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDebugUtilsMessengerCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDebugUtilsMessengerCreateFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  messageSeverity" << std::endl;
    // messageSeverity -> Field -> VkDebugUtilsMessageSeverityFlagsEXT
    os << "value: " << t.messageSeverity << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  messageType" << std::endl;
    // messageType -> Field -> VkDebugUtilsMessageTypeFlagsEXT
    os << "value: " << t.messageType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pfnUserCallback" << std::endl;
    // pointer
    if (t.pfnUserCallback != nullptr) {
      os << "value: *t.pfnUserCallback" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pUserData" << std::endl;
    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDebugUtilsObjectTagInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  objectType" << std::endl;
    // objectType -> Field -> VkObjectType
    os << "value: " << t.objectType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  objectHandle" << std::endl;
    // objectHandle -> Field -> uint64_t
    os << "value: " << t.objectHandle << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tagName" << std::endl;
    // tagName -> Field -> uint64_t
    os << "value: " << t.tagName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tagSize" << std::endl;
    // tagSize -> Field -> size_t
    os << "value: " << t.tagSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pTag" << std::endl;
    if (t.tagSize == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << std::hex;
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        const uint8_t *p = (const uint8_t *)t.pTag;
        for (uint64_t i = 0; i < t.tagSize; ++i) {
          os << "- 0x" << p[i] << std::endl;
        }
      }
      os << std::dec;
    }
  }
  return os;
}

#ifdef VK_USE_PLATFORM_ANDROID_KHR
std::ostream &operator<<(std::ostream & os, const VkAndroidHardwareBufferUsageANDROID &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  androidHardwareBufferUsage" << std::endl;
    // androidHardwareBufferUsage -> Field -> uint64_t
    os << "value: " << t.androidHardwareBufferUsage << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_ANDROID_KHR

#ifdef VK_USE_PLATFORM_ANDROID_KHR
std::ostream &operator<<(std::ostream & os, const VkAndroidHardwareBufferPropertiesANDROID &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  allocationSize" << std::endl;
    // allocationSize -> Field -> VkDeviceSize
    os << "value: " << t.allocationSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryTypeBits" << std::endl;
    // memoryTypeBits -> Field -> uint32_t
    os << "value: " << t.memoryTypeBits << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_ANDROID_KHR

#ifdef VK_USE_PLATFORM_ANDROID_KHR
std::ostream &operator<<(std::ostream & os, const VkAndroidHardwareBufferFormatPropertiesANDROID &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  externalFormat" << std::endl;
    // externalFormat -> Field -> uint64_t
    os << "value: " << t.externalFormat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  formatFeatures" << std::endl;
    // formatFeatures -> Field -> VkFormatFeatureFlags
    os << "value: " << t.formatFeatures << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samplerYcbcrConversionComponents" << std::endl;
    // samplerYcbcrConversionComponents -> Field -> VkComponentMapping
    os <<  "members:" << std::endl << t.samplerYcbcrConversionComponents << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  suggestedYcbcrModel" << std::endl;
    // suggestedYcbcrModel -> Field -> VkSamplerYcbcrModelConversion
    os << "value: " << t.suggestedYcbcrModel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  suggestedYcbcrRange" << std::endl;
    // suggestedYcbcrRange -> Field -> VkSamplerYcbcrRange
    os << "value: " << t.suggestedYcbcrRange << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  suggestedXChromaOffset" << std::endl;
    // suggestedXChromaOffset -> Field -> VkChromaLocation
    os << "value: " << t.suggestedXChromaOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  suggestedYChromaOffset" << std::endl;
    // suggestedYChromaOffset -> Field -> VkChromaLocation
    os << "value: " << t.suggestedYChromaOffset << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_ANDROID_KHR

#ifdef VK_USE_PLATFORM_ANDROID_KHR
std::ostream &operator<<(std::ostream & os, const VkImportAndroidHardwareBufferInfoANDROID &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // pointer
    if (t.buffer != nullptr) {
      os << "value: *t.buffer" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}
#endif //VK_USE_PLATFORM_ANDROID_KHR

#ifdef VK_USE_PLATFORM_ANDROID_KHR
std::ostream &operator<<(std::ostream & os, const VkMemoryGetAndroidHardwareBufferInfoANDROID &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memory" << std::endl;
    // memory -> Field -> VkDeviceMemory
    os << "value: " << t.memory << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_ANDROID_KHR

#ifdef VK_USE_PLATFORM_ANDROID_KHR
std::ostream &operator<<(std::ostream & os, const VkExternalFormatANDROID &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  externalFormat" << std::endl;
    // externalFormat -> Field -> uint64_t
    os << "value: " << t.externalFormat << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_ANDROID_KHR

#ifdef VK_USE_PLATFORM_ANDROID_KHR
std::ostream &operator<<(std::ostream & os, const VkAndroidHardwareBufferFormatProperties2ANDROID &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  externalFormat" << std::endl;
    // externalFormat -> Field -> uint64_t
    os << "value: " << t.externalFormat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  formatFeatures" << std::endl;
    // formatFeatures -> Field -> VkFormatFeatureFlags2
    os << "value: " << t.formatFeatures << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samplerYcbcrConversionComponents" << std::endl;
    // samplerYcbcrConversionComponents -> Field -> VkComponentMapping
    os <<  "members:" << std::endl << t.samplerYcbcrConversionComponents << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  suggestedYcbcrModel" << std::endl;
    // suggestedYcbcrModel -> Field -> VkSamplerYcbcrModelConversion
    os << "value: " << t.suggestedYcbcrModel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  suggestedYcbcrRange" << std::endl;
    // suggestedYcbcrRange -> Field -> VkSamplerYcbcrRange
    os << "value: " << t.suggestedYcbcrRange << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  suggestedXChromaOffset" << std::endl;
    // suggestedXChromaOffset -> Field -> VkChromaLocation
    os << "value: " << t.suggestedXChromaOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  suggestedYChromaOffset" << std::endl;
    // suggestedYChromaOffset -> Field -> VkChromaLocation
    os << "value: " << t.suggestedYChromaOffset << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_ANDROID_KHR

std::ostream &operator<<(std::ostream & os, const VkSampleLocationEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  x" << std::endl;
    // x -> Field -> float
    os << "value: " << t.x << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  y" << std::endl;
    // y -> Field -> float
    os << "value: " << t.y << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSampleLocationsInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleLocationsPerPixel" << std::endl;
    // sampleLocationsPerPixel -> Field -> VkSampleCountFlagBits
    os << "value: " << t.sampleLocationsPerPixel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleLocationGridSize" << std::endl;
    // sampleLocationGridSize -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.sampleLocationGridSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleLocationsCount" << std::endl;
    // sampleLocationsCount -> Field -> uint32_t
    os << "value: " << t.sampleLocationsCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSampleLocations" << std::endl;
    // pSampleLocations -> Field -> ConstDynamicArray(VkSampleLocationEXT)
    if (t.sampleLocationsCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSampleLocationEXT" << std::endl;
        for (uint64_t i = 0; i < t.sampleLocationsCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pSampleLocations << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAttachmentSampleLocationsEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentIndex" << std::endl;
    // attachmentIndex -> Field -> uint32_t
    os << "value: " << t.attachmentIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleLocationsInfo" << std::endl;
    // sampleLocationsInfo -> Field -> VkSampleLocationsInfoEXT
    os <<  "members:" << std::endl << t.sampleLocationsInfo << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSubpassSampleLocationsEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subpassIndex" << std::endl;
    // subpassIndex -> Field -> uint32_t
    os << "value: " << t.subpassIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleLocationsInfo" << std::endl;
    // sampleLocationsInfo -> Field -> VkSampleLocationsInfoEXT
    os <<  "members:" << std::endl << t.sampleLocationsInfo << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRenderPassSampleLocationsBeginInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentInitialSampleLocationsCount" << std::endl;
    // attachmentInitialSampleLocationsCount -> Field -> uint32_t
    os << "value: " << t.attachmentInitialSampleLocationsCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAttachmentInitialSampleLocations" << std::endl;
    // pAttachmentInitialSampleLocations -> Field -> ConstDynamicArray(VkAttachmentSampleLocationsEXT)
    if (t.attachmentInitialSampleLocationsCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkAttachmentSampleLocationsEXT" << std::endl;
        for (uint64_t i = 0; i < t.attachmentInitialSampleLocationsCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pAttachmentInitialSampleLocations << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  postSubpassSampleLocationsCount" << std::endl;
    // postSubpassSampleLocationsCount -> Field -> uint32_t
    os << "value: " << t.postSubpassSampleLocationsCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPostSubpassSampleLocations" << std::endl;
    // pPostSubpassSampleLocations -> Field -> ConstDynamicArray(VkSubpassSampleLocationsEXT)
    if (t.postSubpassSampleLocationsCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSubpassSampleLocationsEXT" << std::endl;
        for (uint64_t i = 0; i < t.postSubpassSampleLocationsCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pPostSubpassSampleLocations << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineSampleLocationsStateCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleLocationsEnable" << std::endl;
    // sampleLocationsEnable -> Field -> VkBool32
    os << "value: " << t.sampleLocationsEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleLocationsInfo" << std::endl;
    // sampleLocationsInfo -> Field -> VkSampleLocationsInfoEXT
    os <<  "members:" << std::endl << t.sampleLocationsInfo << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceSampleLocationsPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleLocationSampleCounts" << std::endl;
    // sampleLocationSampleCounts -> Field -> VkSampleCountFlags
    os << "value: " << t.sampleLocationSampleCounts << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSampleLocationGridSize" << std::endl;
    // maxSampleLocationGridSize -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.maxSampleLocationGridSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleLocationCoordinateRange" << std::endl;
    // sampleLocationCoordinateRange -> Field -> FixedArray(float)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # float" << std::endl;
        for (uint64_t i = 0; i < 2; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.sampleLocationCoordinateRange << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleLocationSubPixelBits" << std::endl;
    // sampleLocationSubPixelBits -> Field -> uint32_t
    os << "value: " << t.sampleLocationSubPixelBits << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  variableSampleLocations" << std::endl;
    // variableSampleLocations -> Field -> VkBool32
    os << "value: " << t.variableSampleLocations << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMultisamplePropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSampleLocationGridSize" << std::endl;
    // maxSampleLocationGridSize -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.maxSampleLocationGridSize << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  advancedBlendCoherentOperations" << std::endl;
    // advancedBlendCoherentOperations -> Field -> VkBool32
    os << "value: " << t.advancedBlendCoherentOperations << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  advancedBlendMaxColorAttachments" << std::endl;
    // advancedBlendMaxColorAttachments -> Field -> uint32_t
    os << "value: " << t.advancedBlendMaxColorAttachments << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  advancedBlendIndependentBlend" << std::endl;
    // advancedBlendIndependentBlend -> Field -> VkBool32
    os << "value: " << t.advancedBlendIndependentBlend << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  advancedBlendNonPremultipliedSrcColor" << std::endl;
    // advancedBlendNonPremultipliedSrcColor -> Field -> VkBool32
    os << "value: " << t.advancedBlendNonPremultipliedSrcColor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  advancedBlendNonPremultipliedDstColor" << std::endl;
    // advancedBlendNonPremultipliedDstColor -> Field -> VkBool32
    os << "value: " << t.advancedBlendNonPremultipliedDstColor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  advancedBlendCorrelatedOverlap" << std::endl;
    // advancedBlendCorrelatedOverlap -> Field -> VkBool32
    os << "value: " << t.advancedBlendCorrelatedOverlap << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  advancedBlendAllOperations" << std::endl;
    // advancedBlendAllOperations -> Field -> VkBool32
    os << "value: " << t.advancedBlendAllOperations << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineColorBlendAdvancedStateCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcPremultiplied" << std::endl;
    // srcPremultiplied -> Field -> VkBool32
    os << "value: " << t.srcPremultiplied << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstPremultiplied" << std::endl;
    // dstPremultiplied -> Field -> VkBool32
    os << "value: " << t.dstPremultiplied << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  blendOverlap" << std::endl;
    // blendOverlap -> Field -> VkBlendOverlapEXT
    os << "value: " << t.blendOverlap << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineCoverageToColorStateCreateInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineCoverageToColorStateCreateFlagsNV
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  coverageToColorEnable" << std::endl;
    // coverageToColorEnable -> Field -> VkBool32
    os << "value: " << t.coverageToColorEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  coverageToColorLocation" << std::endl;
    // coverageToColorLocation -> Field -> uint32_t
    os << "value: " << t.coverageToColorLocation << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineCoverageModulationStateCreateInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineCoverageModulationStateCreateFlagsNV
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  coverageModulationMode" << std::endl;
    // coverageModulationMode -> Field -> VkCoverageModulationModeNV
    os << "value: " << t.coverageModulationMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  coverageModulationTableEnable" << std::endl;
    // coverageModulationTableEnable -> Field -> VkBool32
    os << "value: " << t.coverageModulationTableEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  coverageModulationTableCount" << std::endl;
    // coverageModulationTableCount -> Field -> uint32_t
    os << "value: " << t.coverageModulationTableCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCoverageModulationTable" << std::endl;
    // pCoverageModulationTable -> Field -> ConstDynamicArray(float)
    if (t.coverageModulationTableCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # float" << std::endl;
        for (uint64_t i = 0; i < t.coverageModulationTableCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pCoverageModulationTable << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderSMBuiltinsPropertiesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSMCount" << std::endl;
    // shaderSMCount -> Field -> uint32_t
    os << "value: " << t.shaderSMCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderWarpsPerSM" << std::endl;
    // shaderWarpsPerSM -> Field -> uint32_t
    os << "value: " << t.shaderWarpsPerSM << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderSMBuiltinsFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSMBuiltins" << std::endl;
    // shaderSMBuiltins -> Field -> VkBool32
    os << "value: " << t.shaderSMBuiltins << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDrmFormatModifierPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drmFormatModifier" << std::endl;
    // drmFormatModifier -> Field -> uint64_t
    os << "value: " << t.drmFormatModifier << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drmFormatModifierPlaneCount" << std::endl;
    // drmFormatModifierPlaneCount -> Field -> uint32_t
    os << "value: " << t.drmFormatModifierPlaneCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drmFormatModifierTilingFeatures" << std::endl;
    // drmFormatModifierTilingFeatures -> Field -> VkFormatFeatureFlags
    os << "value: " << t.drmFormatModifierTilingFeatures << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDrmFormatModifierPropertiesListEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drmFormatModifierCount" << std::endl;
    // drmFormatModifierCount -> Field -> uint32_t
    os << "value: " << t.drmFormatModifierCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDrmFormatModifierProperties" << std::endl;
    // pDrmFormatModifierProperties -> Field -> DynamicArray(VkDrmFormatModifierPropertiesEXT)
    if (t.drmFormatModifierCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDrmFormatModifierPropertiesEXT" << std::endl;
        for (uint64_t i = 0; i < t.drmFormatModifierCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pDrmFormatModifierProperties << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceImageDrmFormatModifierInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drmFormatModifier" << std::endl;
    // drmFormatModifier -> Field -> uint64_t
    os << "value: " << t.drmFormatModifier << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sharingMode" << std::endl;
    // sharingMode -> Field -> VkSharingMode
    os << "value: " << t.sharingMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queueFamilyIndexCount" << std::endl;
    // queueFamilyIndexCount -> Field -> uint32_t
    os << "value: " << t.queueFamilyIndexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pQueueFamilyIndices" << std::endl;
    // pQueueFamilyIndices -> Field -> ConstDynamicArray(uint32_t)
    if (t.queueFamilyIndexCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.queueFamilyIndexCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pQueueFamilyIndices << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageDrmFormatModifierListCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drmFormatModifierCount" << std::endl;
    // drmFormatModifierCount -> Field -> uint32_t
    os << "value: " << t.drmFormatModifierCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDrmFormatModifiers" << std::endl;
    // pDrmFormatModifiers -> Field -> ConstDynamicArray(uint64_t)
    if (t.drmFormatModifierCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint64_t" << std::endl;
        for (uint64_t i = 0; i < t.drmFormatModifierCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pDrmFormatModifiers << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageDrmFormatModifierExplicitCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drmFormatModifier" << std::endl;
    // drmFormatModifier -> Field -> uint64_t
    os << "value: " << t.drmFormatModifier << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drmFormatModifierPlaneCount" << std::endl;
    // drmFormatModifierPlaneCount -> Field -> uint32_t
    os << "value: " << t.drmFormatModifierPlaneCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPlaneLayouts" << std::endl;
    // pPlaneLayouts -> Field -> ConstDynamicArray(VkSubresourceLayout)
    if (t.drmFormatModifierPlaneCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSubresourceLayout" << std::endl;
        for (uint64_t i = 0; i < t.drmFormatModifierPlaneCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pPlaneLayouts << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageDrmFormatModifierPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drmFormatModifier" << std::endl;
    // drmFormatModifier -> Field -> uint64_t
    os << "value: " << t.drmFormatModifier << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDrmFormatModifierProperties2EXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drmFormatModifier" << std::endl;
    // drmFormatModifier -> Field -> uint64_t
    os << "value: " << t.drmFormatModifier << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drmFormatModifierPlaneCount" << std::endl;
    // drmFormatModifierPlaneCount -> Field -> uint32_t
    os << "value: " << t.drmFormatModifierPlaneCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drmFormatModifierTilingFeatures" << std::endl;
    // drmFormatModifierTilingFeatures -> Field -> VkFormatFeatureFlags2
    os << "value: " << t.drmFormatModifierTilingFeatures << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDrmFormatModifierPropertiesList2EXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drmFormatModifierCount" << std::endl;
    // drmFormatModifierCount -> Field -> uint32_t
    os << "value: " << t.drmFormatModifierCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDrmFormatModifierProperties" << std::endl;
    // pDrmFormatModifierProperties -> Field -> DynamicArray(VkDrmFormatModifierProperties2EXT)
    if (t.drmFormatModifierCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDrmFormatModifierProperties2EXT" << std::endl;
        for (uint64_t i = 0; i < t.drmFormatModifierCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pDrmFormatModifierProperties << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkValidationCacheCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkValidationCacheCreateFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  initialDataSize" << std::endl;
    // initialDataSize -> Field -> size_t
    os << "value: " << t.initialDataSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInitialData" << std::endl;
    if (t.initialDataSize == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << std::hex;
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        const uint8_t *p = (const uint8_t *)t.pInitialData;
        for (uint64_t i = 0; i < t.initialDataSize; ++i) {
          os << "- 0x" << p[i] << std::endl;
        }
      }
      os << std::dec;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkShaderModuleValidationCacheCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  validationCache" << std::endl;
    // validationCache -> Field -> VkValidationCacheEXT
    os << "value: " << t.validationCache << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkShadingRatePaletteNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shadingRatePaletteEntryCount" << std::endl;
    // shadingRatePaletteEntryCount -> Field -> uint32_t
    os << "value: " << t.shadingRatePaletteEntryCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pShadingRatePaletteEntries" << std::endl;
    // pShadingRatePaletteEntries -> Field -> ConstDynamicArray(VkShadingRatePaletteEntryNV)
    if (t.shadingRatePaletteEntryCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkShadingRatePaletteEntryNV" << std::endl;
        for (uint64_t i = 0; i < t.shadingRatePaletteEntryCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pShadingRatePaletteEntries << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineViewportShadingRateImageStateCreateInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shadingRateImageEnable" << std::endl;
    // shadingRateImageEnable -> Field -> VkBool32
    os << "value: " << t.shadingRateImageEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewportCount" << std::endl;
    // viewportCount -> Field -> uint32_t
    os << "value: " << t.viewportCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pShadingRatePalettes" << std::endl;
    // pShadingRatePalettes -> Field -> ConstDynamicArray(VkShadingRatePaletteNV)
    if (t.viewportCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkShadingRatePaletteNV" << std::endl;
        for (uint64_t i = 0; i < t.viewportCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pShadingRatePalettes << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShadingRateImageFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shadingRateImage" << std::endl;
    // shadingRateImage -> Field -> VkBool32
    os << "value: " << t.shadingRateImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shadingRateCoarseSampleOrder" << std::endl;
    // shadingRateCoarseSampleOrder -> Field -> VkBool32
    os << "value: " << t.shadingRateCoarseSampleOrder << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShadingRateImagePropertiesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shadingRateTexelSize" << std::endl;
    // shadingRateTexelSize -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.shadingRateTexelSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shadingRatePaletteSize" << std::endl;
    // shadingRatePaletteSize -> Field -> uint32_t
    os << "value: " << t.shadingRatePaletteSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shadingRateMaxCoarseSamples" << std::endl;
    // shadingRateMaxCoarseSamples -> Field -> uint32_t
    os << "value: " << t.shadingRateMaxCoarseSamples << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCoarseSampleLocationNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pixelX" << std::endl;
    // pixelX -> Field -> uint32_t
    os << "value: " << t.pixelX << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pixelY" << std::endl;
    // pixelY -> Field -> uint32_t
    os << "value: " << t.pixelY << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sample" << std::endl;
    // sample -> Field -> uint32_t
    os << "value: " << t.sample << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCoarseSampleOrderCustomNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shadingRate" << std::endl;
    // shadingRate -> Field -> VkShadingRatePaletteEntryNV
    os << "value: " << t.shadingRate << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleCount" << std::endl;
    // sampleCount -> Field -> uint32_t
    os << "value: " << t.sampleCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleLocationCount" << std::endl;
    // sampleLocationCount -> Field -> uint32_t
    os << "value: " << t.sampleLocationCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSampleLocations" << std::endl;
    // pSampleLocations -> Field -> ConstDynamicArray(VkCoarseSampleLocationNV)
    if (t.sampleLocationCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkCoarseSampleLocationNV" << std::endl;
        for (uint64_t i = 0; i < t.sampleLocationCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pSampleLocations << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineViewportCoarseSampleOrderStateCreateInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleOrderType" << std::endl;
    // sampleOrderType -> Field -> VkCoarseSampleOrderTypeNV
    os << "value: " << t.sampleOrderType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  customSampleOrderCount" << std::endl;
    // customSampleOrderCount -> Field -> uint32_t
    os << "value: " << t.customSampleOrderCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCustomSampleOrders" << std::endl;
    // pCustomSampleOrders -> Field -> ConstDynamicArray(VkCoarseSampleOrderCustomNV)
    if (t.customSampleOrderCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkCoarseSampleOrderCustomNV" << std::endl;
        for (uint64_t i = 0; i < t.customSampleOrderCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pCustomSampleOrders << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRayTracingShaderGroupCreateInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  type" << std::endl;
    // type -> Field -> VkRayTracingShaderGroupTypeKHR
    os << "value: " << t.type << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  generalShader" << std::endl;
    // generalShader -> Field -> uint32_t
    os << "value: " << t.generalShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  closestHitShader" << std::endl;
    // closestHitShader -> Field -> uint32_t
    os << "value: " << t.closestHitShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  anyHitShader" << std::endl;
    // anyHitShader -> Field -> uint32_t
    os << "value: " << t.anyHitShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  intersectionShader" << std::endl;
    // intersectionShader -> Field -> uint32_t
    os << "value: " << t.intersectionShader << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRayTracingPipelineCreateInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stageCount" << std::endl;
    // stageCount -> Field -> uint32_t
    os << "value: " << t.stageCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStages" << std::endl;
    // pStages -> Field -> ConstDynamicArray(VkPipelineShaderStageCreateInfo)
    if (t.stageCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkPipelineShaderStageCreateInfo" << std::endl;
        for (uint64_t i = 0; i < t.stageCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pStages << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCount" << std::endl;
    // groupCount -> Field -> uint32_t
    os << "value: " << t.groupCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pGroups" << std::endl;
    // pGroups -> Field -> ConstDynamicArray(VkRayTracingShaderGroupCreateInfoNV)
    if (t.groupCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkRayTracingShaderGroupCreateInfoNV" << std::endl;
        for (uint64_t i = 0; i < t.groupCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pGroups << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxRecursionDepth" << std::endl;
    // maxRecursionDepth -> Field -> uint32_t
    os << "value: " << t.maxRecursionDepth << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layout" << std::endl;
    // layout -> Field -> VkPipelineLayout
    os << "value: " << t.layout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  basePipelineHandle" << std::endl;
    // basePipelineHandle -> Field -> VkPipeline
    os << "value: " << t.basePipelineHandle << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  basePipelineIndex" << std::endl;
    // basePipelineIndex -> Field -> int32_t
    os << "value: " << t.basePipelineIndex << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkGeometryTrianglesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexData" << std::endl;
    // vertexData -> Field -> VkBuffer
    os << "value: " << t.vertexData << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexOffset" << std::endl;
    // vertexOffset -> Field -> VkDeviceSize
    os << "value: " << t.vertexOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexCount" << std::endl;
    // vertexCount -> Field -> uint32_t
    os << "value: " << t.vertexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexStride" << std::endl;
    // vertexStride -> Field -> VkDeviceSize
    os << "value: " << t.vertexStride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexFormat" << std::endl;
    // vertexFormat -> Field -> VkFormat
    os << "value: " << t.vertexFormat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexData" << std::endl;
    // indexData -> Field -> VkBuffer
    os << "value: " << t.indexData << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexOffset" << std::endl;
    // indexOffset -> Field -> VkDeviceSize
    os << "value: " << t.indexOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexCount" << std::endl;
    // indexCount -> Field -> uint32_t
    os << "value: " << t.indexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexType" << std::endl;
    // indexType -> Field -> VkIndexType
    os << "value: " << t.indexType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transformData" << std::endl;
    // transformData -> Field -> VkBuffer
    os << "value: " << t.transformData << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transformOffset" << std::endl;
    // transformOffset -> Field -> VkDeviceSize
    os << "value: " << t.transformOffset << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkGeometryAABBNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  aabbData" << std::endl;
    // aabbData -> Field -> VkBuffer
    os << "value: " << t.aabbData << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  numAABBs" << std::endl;
    // numAABBs -> Field -> uint32_t
    os << "value: " << t.numAABBs << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << t.stride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << t.offset << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkGeometryDataNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  triangles" << std::endl;
    // triangles -> Field -> VkGeometryTrianglesNV
    os <<  "members:" << std::endl << t.triangles << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  aabbs" << std::endl;
    // aabbs -> Field -> VkGeometryAABBNV
    os <<  "members:" << std::endl << t.aabbs << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkGeometryNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  geometryType" << std::endl;
    // geometryType -> Field -> VkGeometryTypeKHR
    os << "value: " << t.geometryType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  geometry" << std::endl;
    // geometry -> Field -> VkGeometryDataNV
    os <<  "members:" << std::endl << t.geometry << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkGeometryFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  type" << std::endl;
    // type -> Field -> VkAccelerationStructureTypeNV
    os << "value: " << t.type << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkBuildAccelerationStructureFlagsNV
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instanceCount" << std::endl;
    // instanceCount -> Field -> uint32_t
    os << "value: " << t.instanceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  geometryCount" << std::endl;
    // geometryCount -> Field -> uint32_t
    os << "value: " << t.geometryCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pGeometries" << std::endl;
    // pGeometries -> Field -> ConstDynamicArray(VkGeometryNV)
    if (t.geometryCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkGeometryNV" << std::endl;
        for (uint64_t i = 0; i < t.geometryCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pGeometries << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureCreateInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compactedSize" << std::endl;
    // compactedSize -> Field -> VkDeviceSize
    os << "value: " << t.compactedSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  info" << std::endl;
    // info -> Field -> VkAccelerationStructureInfoNV
    os <<  "members:" << std::endl << t.info << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBindAccelerationStructureMemoryInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructure" << std::endl;
    // accelerationStructure -> Field -> VkAccelerationStructureNV
    os << "value: " << t.accelerationStructure << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memory" << std::endl;
    // memory -> Field -> VkDeviceMemory
    os << "value: " << t.memory << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryOffset" << std::endl;
    // memoryOffset -> Field -> VkDeviceSize
    os << "value: " << t.memoryOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceIndexCount" << std::endl;
    // deviceIndexCount -> Field -> uint32_t
    os << "value: " << t.deviceIndexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDeviceIndices" << std::endl;
    // pDeviceIndices -> Field -> ConstDynamicArray(uint32_t)
    if (t.deviceIndexCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.deviceIndexCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pDeviceIndices << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkWriteDescriptorSetAccelerationStructureNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructureCount" << std::endl;
    // accelerationStructureCount -> Field -> uint32_t
    os << "value: " << t.accelerationStructureCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAccelerationStructures" << std::endl;
    // pAccelerationStructures -> Field -> ConstDynamicArray(VkAccelerationStructureNV)
    if (t.accelerationStructureCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkAccelerationStructureNV" << std::endl;
        for (uint64_t i = 0; i < t.accelerationStructureCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pAccelerationStructures << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureMemoryRequirementsInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  type" << std::endl;
    // type -> Field -> VkAccelerationStructureMemoryRequirementsTypeNV
    os << "value: " << t.type << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructure" << std::endl;
    // accelerationStructure -> Field -> VkAccelerationStructureNV
    os << "value: " << t.accelerationStructure << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceRayTracingPropertiesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderGroupHandleSize" << std::endl;
    // shaderGroupHandleSize -> Field -> uint32_t
    os << "value: " << t.shaderGroupHandleSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxRecursionDepth" << std::endl;
    // maxRecursionDepth -> Field -> uint32_t
    os << "value: " << t.maxRecursionDepth << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxShaderGroupStride" << std::endl;
    // maxShaderGroupStride -> Field -> uint32_t
    os << "value: " << t.maxShaderGroupStride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderGroupBaseAlignment" << std::endl;
    // shaderGroupBaseAlignment -> Field -> uint32_t
    os << "value: " << t.shaderGroupBaseAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxGeometryCount" << std::endl;
    // maxGeometryCount -> Field -> uint64_t
    os << "value: " << t.maxGeometryCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxInstanceCount" << std::endl;
    // maxInstanceCount -> Field -> uint64_t
    os << "value: " << t.maxInstanceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTriangleCount" << std::endl;
    // maxTriangleCount -> Field -> uint64_t
    os << "value: " << t.maxTriangleCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetAccelerationStructures" << std::endl;
    // maxDescriptorSetAccelerationStructures -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetAccelerationStructures << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkTransformMatrixKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  matrix" << std::endl;
    // matrix -> Field -> FixedArray(FixedArray(float))
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # float" << std::endl;
        for (uint64_t i = 0; i < 3; ++i) {
          ScopedOstream somember(os);
          for (uint64_t j = 0; j < 4; ++j) {
            os << "value: :" << std::endl << t.matrix << std::endl;
          } // for j
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAabbPositionsKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minX" << std::endl;
    // minX -> Field -> float
    os << "value: " << t.minX << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minY" << std::endl;
    // minY -> Field -> float
    os << "value: " << t.minY << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minZ" << std::endl;
    // minZ -> Field -> float
    os << "value: " << t.minZ << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxX" << std::endl;
    // maxX -> Field -> float
    os << "value: " << t.maxX << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxY" << std::endl;
    // maxY -> Field -> float
    os << "value: " << t.maxY << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxZ" << std::endl;
    // maxZ -> Field -> float
    os << "value: " << t.maxZ << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureInstanceKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transform" << std::endl;
    // transform -> Field -> VkTransformMatrixKHR
    os <<  "members:" << std::endl << t.transform << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instanceCustomIndex" << std::endl;
    // instanceCustomIndex -> Field -> uint32_t
    os << "value: " << t.instanceCustomIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mask" << std::endl;
    // mask -> Field -> uint32_t
    os << "value: " << t.mask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instanceShaderBindingTableRecordOffset" << std::endl;
    // instanceShaderBindingTableRecordOffset -> Field -> uint32_t
    os << "value: " << t.instanceShaderBindingTableRecordOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkGeometryInstanceFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructureReference" << std::endl;
    // accelerationStructureReference -> Field -> uint64_t
    os << "value: " << t.accelerationStructureReference << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  representativeFragmentTest" << std::endl;
    // representativeFragmentTest -> Field -> VkBool32
    os << "value: " << t.representativeFragmentTest << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineRepresentativeFragmentTestStateCreateInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  representativeFragmentTestEnable" << std::endl;
    // representativeFragmentTestEnable -> Field -> VkBool32
    os << "value: " << t.representativeFragmentTestEnable << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceImageViewImageFormatInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageViewType" << std::endl;
    // imageViewType -> Field -> VkImageViewType
    os << "value: " << t.imageViewType << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkFilterCubicImageViewImageFormatPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  filterCubic" << std::endl;
    // filterCubic -> Field -> VkBool32
    os << "value: " << t.filterCubic << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  filterCubicMinmax" << std::endl;
    // filterCubicMinmax -> Field -> VkBool32
    os << "value: " << t.filterCubicMinmax << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImportMemoryHostPointerInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalMemoryHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pHostPointer" << std::endl;
    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMemoryHostPointerPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryTypeBits" << std::endl;
    // memoryTypeBits -> Field -> uint32_t
    os << "value: " << t.memoryTypeBits << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceExternalMemoryHostPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minImportedHostPointerAlignment" << std::endl;
    // minImportedHostPointerAlignment -> Field -> VkDeviceSize
    os << "value: " << t.minImportedHostPointerAlignment << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineCompilerControlCreateInfoAMD &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compilerControlFlags" << std::endl;
    // compilerControlFlags -> Field -> VkPipelineCompilerControlFlagsAMD
    os << "value: " << t.compilerControlFlags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCalibratedTimestampInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  timeDomain" << std::endl;
    // timeDomain -> Field -> VkTimeDomainEXT
    os << "value: " << t.timeDomain << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderCorePropertiesAMD &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderEngineCount" << std::endl;
    // shaderEngineCount -> Field -> uint32_t
    os << "value: " << t.shaderEngineCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderArraysPerEngineCount" << std::endl;
    // shaderArraysPerEngineCount -> Field -> uint32_t
    os << "value: " << t.shaderArraysPerEngineCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  computeUnitsPerShaderArray" << std::endl;
    // computeUnitsPerShaderArray -> Field -> uint32_t
    os << "value: " << t.computeUnitsPerShaderArray << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  simdPerComputeUnit" << std::endl;
    // simdPerComputeUnit -> Field -> uint32_t
    os << "value: " << t.simdPerComputeUnit << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  wavefrontsPerSimd" << std::endl;
    // wavefrontsPerSimd -> Field -> uint32_t
    os << "value: " << t.wavefrontsPerSimd << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  wavefrontSize" << std::endl;
    // wavefrontSize -> Field -> uint32_t
    os << "value: " << t.wavefrontSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sgprsPerSimd" << std::endl;
    // sgprsPerSimd -> Field -> uint32_t
    os << "value: " << t.sgprsPerSimd << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minSgprAllocation" << std::endl;
    // minSgprAllocation -> Field -> uint32_t
    os << "value: " << t.minSgprAllocation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSgprAllocation" << std::endl;
    // maxSgprAllocation -> Field -> uint32_t
    os << "value: " << t.maxSgprAllocation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sgprAllocationGranularity" << std::endl;
    // sgprAllocationGranularity -> Field -> uint32_t
    os << "value: " << t.sgprAllocationGranularity << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vgprsPerSimd" << std::endl;
    // vgprsPerSimd -> Field -> uint32_t
    os << "value: " << t.vgprsPerSimd << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minVgprAllocation" << std::endl;
    // minVgprAllocation -> Field -> uint32_t
    os << "value: " << t.minVgprAllocation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxVgprAllocation" << std::endl;
    // maxVgprAllocation -> Field -> uint32_t
    os << "value: " << t.maxVgprAllocation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vgprAllocationGranularity" << std::endl;
    // vgprAllocationGranularity -> Field -> uint32_t
    os << "value: " << t.vgprAllocationGranularity << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceMemoryOverallocationCreateInfoAMD &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  overallocationBehavior" << std::endl;
    // overallocationBehavior -> Field -> VkMemoryOverallocationBehaviorAMD
    os << "value: " << t.overallocationBehavior << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxVertexAttribDivisor" << std::endl;
    // maxVertexAttribDivisor -> Field -> uint32_t
    os << "value: " << t.maxVertexAttribDivisor << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVertexInputBindingDivisorDescriptionEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  binding" << std::endl;
    // binding -> Field -> uint32_t
    os << "value: " << t.binding << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  divisor" << std::endl;
    // divisor -> Field -> uint32_t
    os << "value: " << t.divisor << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineVertexInputDivisorStateCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexBindingDivisorCount" << std::endl;
    // vertexBindingDivisorCount -> Field -> uint32_t
    os << "value: " << t.vertexBindingDivisorCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pVertexBindingDivisors" << std::endl;
    // pVertexBindingDivisors -> Field -> ConstDynamicArray(VkVertexInputBindingDivisorDescriptionEXT)
    if (t.vertexBindingDivisorCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkVertexInputBindingDivisorDescriptionEXT" << std::endl;
        for (uint64_t i = 0; i < t.vertexBindingDivisorCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pVertexBindingDivisors << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexAttributeInstanceRateDivisor" << std::endl;
    // vertexAttributeInstanceRateDivisor -> Field -> VkBool32
    os << "value: " << t.vertexAttributeInstanceRateDivisor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexAttributeInstanceRateZeroDivisor" << std::endl;
    // vertexAttributeInstanceRateZeroDivisor -> Field -> VkBool32
    os << "value: " << t.vertexAttributeInstanceRateZeroDivisor << std::endl;
  }
  return os;
}

#ifdef VK_USE_PLATFORM_GGP
std::ostream &operator<<(std::ostream & os, const VkPresentFrameTokenGGP &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  frameToken" << std::endl;
    // frameToken -> Field -> GgpFrameToken
    os << "value: " << t.frameToken << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_GGP

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceComputeShaderDerivativesFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  computeDerivativeGroupQuads" << std::endl;
    // computeDerivativeGroupQuads -> Field -> VkBool32
    os << "value: " << t.computeDerivativeGroupQuads << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  computeDerivativeGroupLinear" << std::endl;
    // computeDerivativeGroupLinear -> Field -> VkBool32
    os << "value: " << t.computeDerivativeGroupLinear << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceMeshShaderFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  taskShader" << std::endl;
    // taskShader -> Field -> VkBool32
    os << "value: " << t.taskShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  meshShader" << std::endl;
    // meshShader -> Field -> VkBool32
    os << "value: " << t.meshShader << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceMeshShaderPropertiesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDrawMeshTasksCount" << std::endl;
    // maxDrawMeshTasksCount -> Field -> uint32_t
    os << "value: " << t.maxDrawMeshTasksCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTaskWorkGroupInvocations" << std::endl;
    // maxTaskWorkGroupInvocations -> Field -> uint32_t
    os << "value: " << t.maxTaskWorkGroupInvocations << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTaskWorkGroupSize" << std::endl;
    // maxTaskWorkGroupSize -> Field -> FixedArray(uint32_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < 3; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.maxTaskWorkGroupSize << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTaskTotalMemorySize" << std::endl;
    // maxTaskTotalMemorySize -> Field -> uint32_t
    os << "value: " << t.maxTaskTotalMemorySize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTaskOutputCount" << std::endl;
    // maxTaskOutputCount -> Field -> uint32_t
    os << "value: " << t.maxTaskOutputCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMeshWorkGroupInvocations" << std::endl;
    // maxMeshWorkGroupInvocations -> Field -> uint32_t
    os << "value: " << t.maxMeshWorkGroupInvocations << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMeshWorkGroupSize" << std::endl;
    // maxMeshWorkGroupSize -> Field -> FixedArray(uint32_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < 3; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.maxMeshWorkGroupSize << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMeshTotalMemorySize" << std::endl;
    // maxMeshTotalMemorySize -> Field -> uint32_t
    os << "value: " << t.maxMeshTotalMemorySize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMeshOutputVertices" << std::endl;
    // maxMeshOutputVertices -> Field -> uint32_t
    os << "value: " << t.maxMeshOutputVertices << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMeshOutputPrimitives" << std::endl;
    // maxMeshOutputPrimitives -> Field -> uint32_t
    os << "value: " << t.maxMeshOutputPrimitives << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMeshMultiviewViewCount" << std::endl;
    // maxMeshMultiviewViewCount -> Field -> uint32_t
    os << "value: " << t.maxMeshMultiviewViewCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  meshOutputPerVertexGranularity" << std::endl;
    // meshOutputPerVertexGranularity -> Field -> uint32_t
    os << "value: " << t.meshOutputPerVertexGranularity << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  meshOutputPerPrimitiveGranularity" << std::endl;
    // meshOutputPerPrimitiveGranularity -> Field -> uint32_t
    os << "value: " << t.meshOutputPerPrimitiveGranularity << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDrawMeshTasksIndirectCommandNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  taskCount" << std::endl;
    // taskCount -> Field -> uint32_t
    os << "value: " << t.taskCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstTask" << std::endl;
    // firstTask -> Field -> uint32_t
    os << "value: " << t.firstTask << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderImageFootprintFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageFootprint" << std::endl;
    // imageFootprint -> Field -> VkBool32
    os << "value: " << t.imageFootprint << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineViewportExclusiveScissorStateCreateInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  exclusiveScissorCount" << std::endl;
    // exclusiveScissorCount -> Field -> uint32_t
    os << "value: " << t.exclusiveScissorCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pExclusiveScissors" << std::endl;
    // pExclusiveScissors -> Field -> ConstDynamicArray(VkRect2D)
    if (t.exclusiveScissorCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkRect2D" << std::endl;
        for (uint64_t i = 0; i < t.exclusiveScissorCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pExclusiveScissors << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceExclusiveScissorFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  exclusiveScissor" << std::endl;
    // exclusiveScissor -> Field -> VkBool32
    os << "value: " << t.exclusiveScissor << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkQueueFamilyCheckpointPropertiesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  checkpointExecutionStageMask" << std::endl;
    // checkpointExecutionStageMask -> Field -> VkPipelineStageFlags
    os << "value: " << t.checkpointExecutionStageMask << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCheckpointDataNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stage" << std::endl;
    // stage -> Field -> VkPipelineStageFlagBits
    os << "value: " << t.stage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCheckpointMarker" << std::endl;
    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderIntegerFunctions2" << std::endl;
    // shaderIntegerFunctions2 -> Field -> VkBool32
    os << "value: " << t.shaderIntegerFunctions2 << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPerformanceValueDataINTEL &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  value32" << std::endl;
    // value32 -> Field -> uint32_t
    os << "value: " << t.value32 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  value64" << std::endl;
    // value64 -> Field -> uint64_t
    os << "value: " << t.value64 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  valueFloat" << std::endl;
    // valueFloat -> Field -> float
    os << "value: " << t.valueFloat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  valueBool" << std::endl;
    // valueBool -> Field -> VkBool32
    os << "value: " << t.valueBool << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  valueString" << std::endl;
    // valueString -> Field -> string
    os << "value: " << t.valueString << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPerformanceValueINTEL &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  type" << std::endl;
    // type -> Field -> VkPerformanceValueTypeINTEL
    os << "value: " << t.type << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  data" << std::endl;
    // data -> Field -> VkPerformanceValueDataINTEL
    os <<  "members:" << std::endl << t.data << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkInitializePerformanceApiInfoINTEL &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pUserData" << std::endl;
    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkQueryPoolPerformanceQueryCreateInfoINTEL &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  performanceCountersSampling" << std::endl;
    // performanceCountersSampling -> Field -> VkQueryPoolSamplingModeINTEL
    os << "value: " << t.performanceCountersSampling << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPerformanceMarkerInfoINTEL &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  marker" << std::endl;
    // marker -> Field -> uint64_t
    os << "value: " << t.marker << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPerformanceStreamMarkerInfoINTEL &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  marker" << std::endl;
    // marker -> Field -> uint32_t
    os << "value: " << t.marker << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPerformanceOverrideInfoINTEL &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  type" << std::endl;
    // type -> Field -> VkPerformanceOverrideTypeINTEL
    os << "value: " << t.type << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  enable" << std::endl;
    // enable -> Field -> VkBool32
    os << "value: " << t.enable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  parameter" << std::endl;
    // parameter -> Field -> uint64_t
    os << "value: " << t.parameter << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPerformanceConfigurationAcquireInfoINTEL &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  type" << std::endl;
    // type -> Field -> VkPerformanceConfigurationTypeINTEL
    os << "value: " << t.type << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDevicePCIBusInfoPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pciDomain" << std::endl;
    // pciDomain -> Field -> uint32_t
    os << "value: " << t.pciDomain << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pciBus" << std::endl;
    // pciBus -> Field -> uint32_t
    os << "value: " << t.pciBus << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pciDevice" << std::endl;
    // pciDevice -> Field -> uint32_t
    os << "value: " << t.pciDevice << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pciFunction" << std::endl;
    // pciFunction -> Field -> uint32_t
    os << "value: " << t.pciFunction << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDisplayNativeHdrSurfaceCapabilitiesAMD &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  localDimmingSupport" << std::endl;
    // localDimmingSupport -> Field -> VkBool32
    os << "value: " << t.localDimmingSupport << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSwapchainDisplayNativeHdrCreateInfoAMD &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  localDimmingEnable" << std::endl;
    // localDimmingEnable -> Field -> VkBool32
    os << "value: " << t.localDimmingEnable << std::endl;
  }
  return os;
}

#ifdef VK_USE_PLATFORM_FUCHSIA
std::ostream &operator<<(std::ostream & os, const VkImagePipeSurfaceCreateInfoFUCHSIA &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkImagePipeSurfaceCreateFlagsFUCHSIA
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imagePipeHandle" << std::endl;
    // imagePipeHandle -> Field -> zx_handle_t
    os << "value: " << t.imagePipeHandle << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_FUCHSIA

#ifdef VK_USE_PLATFORM_METAL_EXT
std::ostream &operator<<(std::ostream & os, const VkMetalSurfaceCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkMetalSurfaceCreateFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pLayer" << std::endl;
    // pointer
    if (t.pLayer != nullptr) {
      os << "value: *t.pLayer" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}
#endif //VK_USE_PLATFORM_METAL_EXT

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceFragmentDensityMapFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentDensityMap" << std::endl;
    // fragmentDensityMap -> Field -> VkBool32
    os << "value: " << t.fragmentDensityMap << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentDensityMapDynamic" << std::endl;
    // fragmentDensityMapDynamic -> Field -> VkBool32
    os << "value: " << t.fragmentDensityMapDynamic << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentDensityMapNonSubsampledImages" << std::endl;
    // fragmentDensityMapNonSubsampledImages -> Field -> VkBool32
    os << "value: " << t.fragmentDensityMapNonSubsampledImages << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceFragmentDensityMapPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minFragmentDensityTexelSize" << std::endl;
    // minFragmentDensityTexelSize -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.minFragmentDensityTexelSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFragmentDensityTexelSize" << std::endl;
    // maxFragmentDensityTexelSize -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.maxFragmentDensityTexelSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentDensityInvocations" << std::endl;
    // fragmentDensityInvocations -> Field -> VkBool32
    os << "value: " << t.fragmentDensityInvocations << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRenderPassFragmentDensityMapCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentDensityMapAttachment" << std::endl;
    // fragmentDensityMapAttachment -> Field -> VkAttachmentReference
    os <<  "members:" << std::endl << t.fragmentDensityMapAttachment << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderCoreProperties2AMD &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderCoreFeatures" << std::endl;
    // shaderCoreFeatures -> Field -> VkShaderCorePropertiesFlagsAMD
    os << "value: " << t.shaderCoreFeatures << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  activeComputeUnitCount" << std::endl;
    // activeComputeUnitCount -> Field -> uint32_t
    os << "value: " << t.activeComputeUnitCount << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceCoherentMemoryFeaturesAMD &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceCoherentMemory" << std::endl;
    // deviceCoherentMemory -> Field -> VkBool32
    os << "value: " << t.deviceCoherentMemory << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderImageInt64Atomics" << std::endl;
    // shaderImageInt64Atomics -> Field -> VkBool32
    os << "value: " << t.shaderImageInt64Atomics << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseImageInt64Atomics" << std::endl;
    // sparseImageInt64Atomics -> Field -> VkBool32
    os << "value: " << t.sparseImageInt64Atomics << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceMemoryBudgetPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  heapBudget" << std::endl;
    // heapBudget -> Field -> FixedArray(VkDeviceSize)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDeviceSize" << std::endl;
        for (uint64_t i = 0; i < VK_MAX_MEMORY_HEAPS; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.heapBudget << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  heapUsage" << std::endl;
    // heapUsage -> Field -> FixedArray(VkDeviceSize)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDeviceSize" << std::endl;
        for (uint64_t i = 0; i < VK_MAX_MEMORY_HEAPS; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.heapUsage << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceMemoryPriorityFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryPriority" << std::endl;
    // memoryPriority -> Field -> VkBool32
    os << "value: " << t.memoryPriority << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMemoryPriorityAllocateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  priority" << std::endl;
    // priority -> Field -> float
    os << "value: " << t.priority << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dedicatedAllocationImageAliasing" << std::endl;
    // dedicatedAllocationImageAliasing -> Field -> VkBool32
    os << "value: " << t.dedicatedAllocationImageAliasing << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceBufferDeviceAddressFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferDeviceAddress" << std::endl;
    // bufferDeviceAddress -> Field -> VkBool32
    os << "value: " << t.bufferDeviceAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferDeviceAddressCaptureReplay" << std::endl;
    // bufferDeviceAddressCaptureReplay -> Field -> VkBool32
    os << "value: " << t.bufferDeviceAddressCaptureReplay << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferDeviceAddressMultiDevice" << std::endl;
    // bufferDeviceAddressMultiDevice -> Field -> VkBool32
    os << "value: " << t.bufferDeviceAddressMultiDevice << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBufferDeviceAddressCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceAddress" << std::endl;
    // deviceAddress -> Field -> VkDeviceAddress
    os << "value: " << t.deviceAddress << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkValidationFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  enabledValidationFeatureCount" << std::endl;
    // enabledValidationFeatureCount -> Field -> uint32_t
    os << "value: " << t.enabledValidationFeatureCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pEnabledValidationFeatures" << std::endl;
    // pEnabledValidationFeatures -> Field -> ConstDynamicArray(VkValidationFeatureEnableEXT)
    if (t.enabledValidationFeatureCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkValidationFeatureEnableEXT" << std::endl;
        for (uint64_t i = 0; i < t.enabledValidationFeatureCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pEnabledValidationFeatures << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  disabledValidationFeatureCount" << std::endl;
    // disabledValidationFeatureCount -> Field -> uint32_t
    os << "value: " << t.disabledValidationFeatureCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDisabledValidationFeatures" << std::endl;
    // pDisabledValidationFeatures -> Field -> ConstDynamicArray(VkValidationFeatureDisableEXT)
    if (t.disabledValidationFeatureCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkValidationFeatureDisableEXT" << std::endl;
        for (uint64_t i = 0; i < t.disabledValidationFeatureCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pDisabledValidationFeatures << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCooperativeMatrixPropertiesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  MSize" << std::endl;
    // MSize -> Field -> uint32_t
    os << "value: " << t.MSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  NSize" << std::endl;
    // NSize -> Field -> uint32_t
    os << "value: " << t.NSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  KSize" << std::endl;
    // KSize -> Field -> uint32_t
    os << "value: " << t.KSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  AType" << std::endl;
    // AType -> Field -> VkComponentTypeNV
    os << "value: " << t.AType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  BType" << std::endl;
    // BType -> Field -> VkComponentTypeNV
    os << "value: " << t.BType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  CType" << std::endl;
    // CType -> Field -> VkComponentTypeNV
    os << "value: " << t.CType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  DType" << std::endl;
    // DType -> Field -> VkComponentTypeNV
    os << "value: " << t.DType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  scope" << std::endl;
    // scope -> Field -> VkScopeNV
    os << "value: " << t.scope << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceCooperativeMatrixFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  cooperativeMatrix" << std::endl;
    // cooperativeMatrix -> Field -> VkBool32
    os << "value: " << t.cooperativeMatrix << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  cooperativeMatrixRobustBufferAccess" << std::endl;
    // cooperativeMatrixRobustBufferAccess -> Field -> VkBool32
    os << "value: " << t.cooperativeMatrixRobustBufferAccess << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceCooperativeMatrixPropertiesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  cooperativeMatrixSupportedStages" << std::endl;
    // cooperativeMatrixSupportedStages -> Field -> VkShaderStageFlags
    os << "value: " << t.cooperativeMatrixSupportedStages << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceCoverageReductionModeFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  coverageReductionMode" << std::endl;
    // coverageReductionMode -> Field -> VkBool32
    os << "value: " << t.coverageReductionMode << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineCoverageReductionStateCreateInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineCoverageReductionStateCreateFlagsNV
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  coverageReductionMode" << std::endl;
    // coverageReductionMode -> Field -> VkCoverageReductionModeNV
    os << "value: " << t.coverageReductionMode << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkFramebufferMixedSamplesCombinationNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  coverageReductionMode" << std::endl;
    // coverageReductionMode -> Field -> VkCoverageReductionModeNV
    os << "value: " << t.coverageReductionMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rasterizationSamples" << std::endl;
    // rasterizationSamples -> Field -> VkSampleCountFlagBits
    os << "value: " << t.rasterizationSamples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthStencilSamples" << std::endl;
    // depthStencilSamples -> Field -> VkSampleCountFlags
    os << "value: " << t.depthStencilSamples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  colorSamples" << std::endl;
    // colorSamples -> Field -> VkSampleCountFlags
    os << "value: " << t.colorSamples << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentShaderSampleInterlock" << std::endl;
    // fragmentShaderSampleInterlock -> Field -> VkBool32
    os << "value: " << t.fragmentShaderSampleInterlock << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentShaderPixelInterlock" << std::endl;
    // fragmentShaderPixelInterlock -> Field -> VkBool32
    os << "value: " << t.fragmentShaderPixelInterlock << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentShaderShadingRateInterlock" << std::endl;
    // fragmentShaderShadingRateInterlock -> Field -> VkBool32
    os << "value: " << t.fragmentShaderShadingRateInterlock << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceYcbcrImageArraysFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ycbcrImageArrays" << std::endl;
    // ycbcrImageArrays -> Field -> VkBool32
    os << "value: " << t.ycbcrImageArrays << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceProvokingVertexFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  provokingVertexLast" << std::endl;
    // provokingVertexLast -> Field -> VkBool32
    os << "value: " << t.provokingVertexLast << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transformFeedbackPreservesProvokingVertex" << std::endl;
    // transformFeedbackPreservesProvokingVertex -> Field -> VkBool32
    os << "value: " << t.transformFeedbackPreservesProvokingVertex << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceProvokingVertexPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  provokingVertexModePerPipeline" << std::endl;
    // provokingVertexModePerPipeline -> Field -> VkBool32
    os << "value: " << t.provokingVertexModePerPipeline << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transformFeedbackPreservesTriangleFanProvokingVertex" << std::endl;
    // transformFeedbackPreservesTriangleFanProvokingVertex -> Field -> VkBool32
    os << "value: " << t.transformFeedbackPreservesTriangleFanProvokingVertex << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineRasterizationProvokingVertexStateCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  provokingVertexMode" << std::endl;
    // provokingVertexMode -> Field -> VkProvokingVertexModeEXT
    os << "value: " << t.provokingVertexMode << std::endl;
  }
  return os;
}

#ifdef VK_USE_PLATFORM_WIN32_KHR
std::ostream &operator<<(std::ostream & os, const VkSurfaceFullScreenExclusiveInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fullScreenExclusive" << std::endl;
    // fullScreenExclusive -> Field -> VkFullScreenExclusiveEXT
    os << "value: " << t.fullScreenExclusive << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_WIN32_KHR

#ifdef VK_USE_PLATFORM_WIN32_KHR
std::ostream &operator<<(std::ostream & os, const VkSurfaceCapabilitiesFullScreenExclusiveEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fullScreenExclusiveSupported" << std::endl;
    // fullScreenExclusiveSupported -> Field -> VkBool32
    os << "value: " << t.fullScreenExclusiveSupported << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_WIN32_KHR

#ifdef VK_USE_PLATFORM_WIN32_KHR
std::ostream &operator<<(std::ostream & os, const VkSurfaceFullScreenExclusiveWin32InfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hmonitor" << std::endl;
    // hmonitor -> Field -> HMONITOR
    os << "value: " << t.hmonitor << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_WIN32_KHR

std::ostream &operator<<(std::ostream & os, const VkHeadlessSurfaceCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkHeadlessSurfaceCreateFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceLineRasterizationFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rectangularLines" << std::endl;
    // rectangularLines -> Field -> VkBool32
    os << "value: " << t.rectangularLines << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bresenhamLines" << std::endl;
    // bresenhamLines -> Field -> VkBool32
    os << "value: " << t.bresenhamLines << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  smoothLines" << std::endl;
    // smoothLines -> Field -> VkBool32
    os << "value: " << t.smoothLines << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stippledRectangularLines" << std::endl;
    // stippledRectangularLines -> Field -> VkBool32
    os << "value: " << t.stippledRectangularLines << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stippledBresenhamLines" << std::endl;
    // stippledBresenhamLines -> Field -> VkBool32
    os << "value: " << t.stippledBresenhamLines << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stippledSmoothLines" << std::endl;
    // stippledSmoothLines -> Field -> VkBool32
    os << "value: " << t.stippledSmoothLines << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceLineRasterizationPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  lineSubPixelPrecisionBits" << std::endl;
    // lineSubPixelPrecisionBits -> Field -> uint32_t
    os << "value: " << t.lineSubPixelPrecisionBits << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineRasterizationLineStateCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  lineRasterizationMode" << std::endl;
    // lineRasterizationMode -> Field -> VkLineRasterizationModeEXT
    os << "value: " << t.lineRasterizationMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stippledLineEnable" << std::endl;
    // stippledLineEnable -> Field -> VkBool32
    os << "value: " << t.stippledLineEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  lineStippleFactor" << std::endl;
    // lineStippleFactor -> Field -> uint32_t
    os << "value: " << t.lineStippleFactor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  lineStipplePattern" << std::endl;
    // lineStipplePattern -> Field -> uint16_t
    os << "value: " << t.lineStipplePattern << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderAtomicFloatFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderBufferFloat32Atomics" << std::endl;
    // shaderBufferFloat32Atomics -> Field -> VkBool32
    os << "value: " << t.shaderBufferFloat32Atomics << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderBufferFloat32AtomicAdd" << std::endl;
    // shaderBufferFloat32AtomicAdd -> Field -> VkBool32
    os << "value: " << t.shaderBufferFloat32AtomicAdd << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderBufferFloat64Atomics" << std::endl;
    // shaderBufferFloat64Atomics -> Field -> VkBool32
    os << "value: " << t.shaderBufferFloat64Atomics << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderBufferFloat64AtomicAdd" << std::endl;
    // shaderBufferFloat64AtomicAdd -> Field -> VkBool32
    os << "value: " << t.shaderBufferFloat64AtomicAdd << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSharedFloat32Atomics" << std::endl;
    // shaderSharedFloat32Atomics -> Field -> VkBool32
    os << "value: " << t.shaderSharedFloat32Atomics << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSharedFloat32AtomicAdd" << std::endl;
    // shaderSharedFloat32AtomicAdd -> Field -> VkBool32
    os << "value: " << t.shaderSharedFloat32AtomicAdd << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSharedFloat64Atomics" << std::endl;
    // shaderSharedFloat64Atomics -> Field -> VkBool32
    os << "value: " << t.shaderSharedFloat64Atomics << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSharedFloat64AtomicAdd" << std::endl;
    // shaderSharedFloat64AtomicAdd -> Field -> VkBool32
    os << "value: " << t.shaderSharedFloat64AtomicAdd << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderImageFloat32Atomics" << std::endl;
    // shaderImageFloat32Atomics -> Field -> VkBool32
    os << "value: " << t.shaderImageFloat32Atomics << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderImageFloat32AtomicAdd" << std::endl;
    // shaderImageFloat32AtomicAdd -> Field -> VkBool32
    os << "value: " << t.shaderImageFloat32AtomicAdd << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseImageFloat32Atomics" << std::endl;
    // sparseImageFloat32Atomics -> Field -> VkBool32
    os << "value: " << t.sparseImageFloat32Atomics << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseImageFloat32AtomicAdd" << std::endl;
    // sparseImageFloat32AtomicAdd -> Field -> VkBool32
    os << "value: " << t.sparseImageFloat32AtomicAdd << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceIndexTypeUint8FeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexTypeUint8" << std::endl;
    // indexTypeUint8 -> Field -> VkBool32
    os << "value: " << t.indexTypeUint8 << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceExtendedDynamicStateFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState" << std::endl;
    // extendedDynamicState -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceHostImageCopyFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hostImageCopy" << std::endl;
    // hostImageCopy -> Field -> VkBool32
    os << "value: " << t.hostImageCopy << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceHostImageCopyPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  copySrcLayoutCount" << std::endl;
    // copySrcLayoutCount -> Field -> uint32_t
    os << "value: " << t.copySrcLayoutCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCopySrcLayouts" << std::endl;
    // pCopySrcLayouts -> Field -> DynamicArray(VkImageLayout)
    if (t.copySrcLayoutCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkImageLayout" << std::endl;
        for (uint64_t i = 0; i < t.copySrcLayoutCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pCopySrcLayouts << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  copyDstLayoutCount" << std::endl;
    // copyDstLayoutCount -> Field -> uint32_t
    os << "value: " << t.copyDstLayoutCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCopyDstLayouts" << std::endl;
    // pCopyDstLayouts -> Field -> DynamicArray(VkImageLayout)
    if (t.copyDstLayoutCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkImageLayout" << std::endl;
        for (uint64_t i = 0; i < t.copyDstLayoutCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pCopyDstLayouts << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  optimalTilingLayoutUUID" << std::endl;
    // optimalTilingLayoutUUID -> Field -> FixedArray(uint8_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint8_t" << std::endl;
        for (uint64_t i = 0; i < VK_UUID_SIZE; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.optimalTilingLayoutUUID << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  identicalMemoryTypeRequirements" << std::endl;
    // identicalMemoryTypeRequirements -> Field -> VkBool32
    os << "value: " << t.identicalMemoryTypeRequirements << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMemoryToImageCopyEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pHostPointer" << std::endl;
    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryRowLength" << std::endl;
    // memoryRowLength -> Field -> uint32_t
    os << "value: " << t.memoryRowLength << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryImageHeight" << std::endl;
    // memoryImageHeight -> Field -> uint32_t
    os << "value: " << t.memoryImageHeight << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageSubresource" << std::endl;
    // imageSubresource -> Field -> VkImageSubresourceLayers
    os <<  "members:" << std::endl << t.imageSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageOffset" << std::endl;
    // imageOffset -> Field -> VkOffset3D
    os <<  "members:" << std::endl << t.imageOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageExtent" << std::endl;
    // imageExtent -> Field -> VkExtent3D
    os <<  "members:" << std::endl << t.imageExtent << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageToMemoryCopyEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pHostPointer" << std::endl;
    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryRowLength" << std::endl;
    // memoryRowLength -> Field -> uint32_t
    os << "value: " << t.memoryRowLength << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryImageHeight" << std::endl;
    // memoryImageHeight -> Field -> uint32_t
    os << "value: " << t.memoryImageHeight << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageSubresource" << std::endl;
    // imageSubresource -> Field -> VkImageSubresourceLayers
    os <<  "members:" << std::endl << t.imageSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageOffset" << std::endl;
    // imageOffset -> Field -> VkOffset3D
    os <<  "members:" << std::endl << t.imageOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageExtent" << std::endl;
    // imageExtent -> Field -> VkExtent3D
    os <<  "members:" << std::endl << t.imageExtent << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCopyMemoryToImageInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkHostImageCopyFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImage" << std::endl;
    // dstImage -> Field -> VkImage
    os << "value: " << t.dstImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImageLayout" << std::endl;
    // dstImageLayout -> Field -> VkImageLayout
    os << "value: " << t.dstImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << t.regionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkMemoryToImageCopyEXT)
    if (t.regionCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkMemoryToImageCopyEXT" << std::endl;
        for (uint64_t i = 0; i < t.regionCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pRegions << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCopyImageToMemoryInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkHostImageCopyFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImage" << std::endl;
    // srcImage -> Field -> VkImage
    os << "value: " << t.srcImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImageLayout" << std::endl;
    // srcImageLayout -> Field -> VkImageLayout
    os << "value: " << t.srcImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << t.regionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkImageToMemoryCopyEXT)
    if (t.regionCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkImageToMemoryCopyEXT" << std::endl;
        for (uint64_t i = 0; i < t.regionCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pRegions << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCopyImageToImageInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkHostImageCopyFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImage" << std::endl;
    // srcImage -> Field -> VkImage
    os << "value: " << t.srcImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImageLayout" << std::endl;
    // srcImageLayout -> Field -> VkImageLayout
    os << "value: " << t.srcImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImage" << std::endl;
    // dstImage -> Field -> VkImage
    os << "value: " << t.dstImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImageLayout" << std::endl;
    // dstImageLayout -> Field -> VkImageLayout
    os << "value: " << t.dstImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << t.regionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkImageCopy2)
    if (t.regionCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkImageCopy2" << std::endl;
        for (uint64_t i = 0; i < t.regionCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pRegions << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkHostImageLayoutTransitionInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << t.image << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  oldLayout" << std::endl;
    // oldLayout -> Field -> VkImageLayout
    os << "value: " << t.oldLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  newLayout" << std::endl;
    // newLayout -> Field -> VkImageLayout
    os << "value: " << t.newLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subresourceRange" << std::endl;
    // subresourceRange -> Field -> VkImageSubresourceRange
    os <<  "members:" << std::endl << t.subresourceRange << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSubresourceHostMemcpySizeEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkHostImageCopyDevicePerformanceQueryEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  optimalDeviceAccess" << std::endl;
    // optimalDeviceAccess -> Field -> VkBool32
    os << "value: " << t.optimalDeviceAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  identicalMemoryLayout" << std::endl;
    // identicalMemoryLayout -> Field -> VkBool32
    os << "value: " << t.identicalMemoryLayout << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSubresourceLayout2EXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subresourceLayout" << std::endl;
    // subresourceLayout -> Field -> VkSubresourceLayout
    os <<  "members:" << std::endl << t.subresourceLayout << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageSubresource2EXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageSubresource" << std::endl;
    // imageSubresource -> Field -> VkImageSubresource
    os <<  "members:" << std::endl << t.imageSubresource << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderBufferFloat16Atomics" << std::endl;
    // shaderBufferFloat16Atomics -> Field -> VkBool32
    os << "value: " << t.shaderBufferFloat16Atomics << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderBufferFloat16AtomicAdd" << std::endl;
    // shaderBufferFloat16AtomicAdd -> Field -> VkBool32
    os << "value: " << t.shaderBufferFloat16AtomicAdd << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderBufferFloat16AtomicMinMax" << std::endl;
    // shaderBufferFloat16AtomicMinMax -> Field -> VkBool32
    os << "value: " << t.shaderBufferFloat16AtomicMinMax << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderBufferFloat32AtomicMinMax" << std::endl;
    // shaderBufferFloat32AtomicMinMax -> Field -> VkBool32
    os << "value: " << t.shaderBufferFloat32AtomicMinMax << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderBufferFloat64AtomicMinMax" << std::endl;
    // shaderBufferFloat64AtomicMinMax -> Field -> VkBool32
    os << "value: " << t.shaderBufferFloat64AtomicMinMax << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSharedFloat16Atomics" << std::endl;
    // shaderSharedFloat16Atomics -> Field -> VkBool32
    os << "value: " << t.shaderSharedFloat16Atomics << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSharedFloat16AtomicAdd" << std::endl;
    // shaderSharedFloat16AtomicAdd -> Field -> VkBool32
    os << "value: " << t.shaderSharedFloat16AtomicAdd << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSharedFloat16AtomicMinMax" << std::endl;
    // shaderSharedFloat16AtomicMinMax -> Field -> VkBool32
    os << "value: " << t.shaderSharedFloat16AtomicMinMax << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSharedFloat32AtomicMinMax" << std::endl;
    // shaderSharedFloat32AtomicMinMax -> Field -> VkBool32
    os << "value: " << t.shaderSharedFloat32AtomicMinMax << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderSharedFloat64AtomicMinMax" << std::endl;
    // shaderSharedFloat64AtomicMinMax -> Field -> VkBool32
    os << "value: " << t.shaderSharedFloat64AtomicMinMax << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderImageFloat32AtomicMinMax" << std::endl;
    // shaderImageFloat32AtomicMinMax -> Field -> VkBool32
    os << "value: " << t.shaderImageFloat32AtomicMinMax << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sparseImageFloat32AtomicMinMax" << std::endl;
    // sparseImageFloat32AtomicMinMax -> Field -> VkBool32
    os << "value: " << t.sparseImageFloat32AtomicMinMax << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSurfacePresentModeEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  presentMode" << std::endl;
    // presentMode -> Field -> VkPresentModeKHR
    os << "value: " << t.presentMode << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSurfacePresentScalingCapabilitiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedPresentScaling" << std::endl;
    // supportedPresentScaling -> Field -> VkPresentScalingFlagsEXT
    os << "value: " << t.supportedPresentScaling << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedPresentGravityX" << std::endl;
    // supportedPresentGravityX -> Field -> VkPresentGravityFlagsEXT
    os << "value: " << t.supportedPresentGravityX << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedPresentGravityY" << std::endl;
    // supportedPresentGravityY -> Field -> VkPresentGravityFlagsEXT
    os << "value: " << t.supportedPresentGravityY << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minScaledImageExtent" << std::endl;
    // minScaledImageExtent -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.minScaledImageExtent << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxScaledImageExtent" << std::endl;
    // maxScaledImageExtent -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.maxScaledImageExtent << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSurfacePresentModeCompatibilityEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  presentModeCount" << std::endl;
    // presentModeCount -> Field -> uint32_t
    os << "value: " << t.presentModeCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPresentModes" << std::endl;
    // pPresentModes -> Field -> DynamicArray(VkPresentModeKHR)
    if (t.presentModeCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkPresentModeKHR" << std::endl;
        for (uint64_t i = 0; i < t.presentModeCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pPresentModes << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  swapchainMaintenance1" << std::endl;
    // swapchainMaintenance1 -> Field -> VkBool32
    os << "value: " << t.swapchainMaintenance1 << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSwapchainPresentFenceInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  swapchainCount" << std::endl;
    // swapchainCount -> Field -> uint32_t
    os << "value: " << t.swapchainCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pFences" << std::endl;
    // pFences -> Field -> ConstDynamicArray(VkFence)
    if (t.swapchainCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkFence" << std::endl;
        for (uint64_t i = 0; i < t.swapchainCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pFences << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSwapchainPresentModesCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  presentModeCount" << std::endl;
    // presentModeCount -> Field -> uint32_t
    os << "value: " << t.presentModeCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPresentModes" << std::endl;
    // pPresentModes -> Field -> ConstDynamicArray(VkPresentModeKHR)
    if (t.presentModeCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkPresentModeKHR" << std::endl;
        for (uint64_t i = 0; i < t.presentModeCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pPresentModes << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSwapchainPresentModeInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  swapchainCount" << std::endl;
    // swapchainCount -> Field -> uint32_t
    os << "value: " << t.swapchainCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPresentModes" << std::endl;
    // pPresentModes -> Field -> ConstDynamicArray(VkPresentModeKHR)
    if (t.swapchainCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkPresentModeKHR" << std::endl;
        for (uint64_t i = 0; i < t.swapchainCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pPresentModes << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSwapchainPresentScalingCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  scalingBehavior" << std::endl;
    // scalingBehavior -> Field -> VkPresentScalingFlagsEXT
    os << "value: " << t.scalingBehavior << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  presentGravityX" << std::endl;
    // presentGravityX -> Field -> VkPresentGravityFlagsEXT
    os << "value: " << t.presentGravityX << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  presentGravityY" << std::endl;
    // presentGravityY -> Field -> VkPresentGravityFlagsEXT
    os << "value: " << t.presentGravityY << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkReleaseSwapchainImagesInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  swapchain" << std::endl;
    // swapchain -> Field -> VkSwapchainKHR
    os << "value: " << t.swapchain << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageIndexCount" << std::endl;
    // imageIndexCount -> Field -> uint32_t
    os << "value: " << t.imageIndexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pImageIndices" << std::endl;
    // pImageIndices -> Field -> ConstDynamicArray(uint32_t)
    if (t.imageIndexCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.imageIndexCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pImageIndices << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxGraphicsShaderGroupCount" << std::endl;
    // maxGraphicsShaderGroupCount -> Field -> uint32_t
    os << "value: " << t.maxGraphicsShaderGroupCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxIndirectSequenceCount" << std::endl;
    // maxIndirectSequenceCount -> Field -> uint32_t
    os << "value: " << t.maxIndirectSequenceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxIndirectCommandsTokenCount" << std::endl;
    // maxIndirectCommandsTokenCount -> Field -> uint32_t
    os << "value: " << t.maxIndirectCommandsTokenCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxIndirectCommandsStreamCount" << std::endl;
    // maxIndirectCommandsStreamCount -> Field -> uint32_t
    os << "value: " << t.maxIndirectCommandsStreamCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxIndirectCommandsTokenOffset" << std::endl;
    // maxIndirectCommandsTokenOffset -> Field -> uint32_t
    os << "value: " << t.maxIndirectCommandsTokenOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxIndirectCommandsStreamStride" << std::endl;
    // maxIndirectCommandsStreamStride -> Field -> uint32_t
    os << "value: " << t.maxIndirectCommandsStreamStride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minSequencesCountBufferOffsetAlignment" << std::endl;
    // minSequencesCountBufferOffsetAlignment -> Field -> uint32_t
    os << "value: " << t.minSequencesCountBufferOffsetAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minSequencesIndexBufferOffsetAlignment" << std::endl;
    // minSequencesIndexBufferOffsetAlignment -> Field -> uint32_t
    os << "value: " << t.minSequencesIndexBufferOffsetAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minIndirectCommandsBufferOffsetAlignment" << std::endl;
    // minIndirectCommandsBufferOffsetAlignment -> Field -> uint32_t
    os << "value: " << t.minIndirectCommandsBufferOffsetAlignment << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceGeneratedCommands" << std::endl;
    // deviceGeneratedCommands -> Field -> VkBool32
    os << "value: " << t.deviceGeneratedCommands << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkGraphicsShaderGroupCreateInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stageCount" << std::endl;
    // stageCount -> Field -> uint32_t
    os << "value: " << t.stageCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStages" << std::endl;
    // pStages -> Field -> ConstDynamicArray(VkPipelineShaderStageCreateInfo)
    if (t.stageCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkPipelineShaderStageCreateInfo" << std::endl;
        for (uint64_t i = 0; i < t.stageCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pStages << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pVertexInputState" << std::endl;
    // pointer
    if (t.pVertexInputState != nullptr) {
      os <<  "members:" << std::endl << *t.pVertexInputState << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pTessellationState" << std::endl;
    // pointer
    if (t.pTessellationState != nullptr) {
      os <<  "members:" << std::endl << *t.pTessellationState << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkGraphicsPipelineShaderGroupsCreateInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCount" << std::endl;
    // groupCount -> Field -> uint32_t
    os << "value: " << t.groupCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pGroups" << std::endl;
    // pGroups -> Field -> ConstDynamicArray(VkGraphicsShaderGroupCreateInfoNV)
    if (t.groupCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkGraphicsShaderGroupCreateInfoNV" << std::endl;
        for (uint64_t i = 0; i < t.groupCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pGroups << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineCount" << std::endl;
    // pipelineCount -> Field -> uint32_t
    os << "value: " << t.pipelineCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPipelines" << std::endl;
    // pPipelines -> Field -> ConstDynamicArray(VkPipeline)
    if (t.pipelineCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkPipeline" << std::endl;
        for (uint64_t i = 0; i < t.pipelineCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pPipelines << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBindShaderGroupIndirectCommandNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupIndex" << std::endl;
    // groupIndex -> Field -> uint32_t
    os << "value: " << t.groupIndex << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBindIndexBufferIndirectCommandNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferAddress" << std::endl;
    // bufferAddress -> Field -> VkDeviceAddress
    os << "value: " << t.bufferAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> uint32_t
    os << "value: " << t.size << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexType" << std::endl;
    // indexType -> Field -> VkIndexType
    os << "value: " << t.indexType << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBindVertexBufferIndirectCommandNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferAddress" << std::endl;
    // bufferAddress -> Field -> VkDeviceAddress
    os << "value: " << t.bufferAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> uint32_t
    os << "value: " << t.size << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << t.stride << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSetStateFlagsIndirectCommandNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  data" << std::endl;
    // data -> Field -> uint32_t
    os << "value: " << t.data << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkIndirectCommandsStreamNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << t.offset << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkIndirectCommandsLayoutTokenNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tokenType" << std::endl;
    // tokenType -> Field -> VkIndirectCommandsTokenTypeNV
    os << "value: " << t.tokenType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stream" << std::endl;
    // stream -> Field -> uint32_t
    os << "value: " << t.stream << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> uint32_t
    os << "value: " << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexBindingUnit" << std::endl;
    // vertexBindingUnit -> Field -> uint32_t
    os << "value: " << t.vertexBindingUnit << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexDynamicStride" << std::endl;
    // vertexDynamicStride -> Field -> VkBool32
    os << "value: " << t.vertexDynamicStride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pushconstantPipelineLayout" << std::endl;
    // pushconstantPipelineLayout -> Field -> VkPipelineLayout
    os << "value: " << t.pushconstantPipelineLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pushconstantShaderStageFlags" << std::endl;
    // pushconstantShaderStageFlags -> Field -> VkShaderStageFlags
    os << "value: " << t.pushconstantShaderStageFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pushconstantOffset" << std::endl;
    // pushconstantOffset -> Field -> uint32_t
    os << "value: " << t.pushconstantOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pushconstantSize" << std::endl;
    // pushconstantSize -> Field -> uint32_t
    os << "value: " << t.pushconstantSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indirectStateFlags" << std::endl;
    // indirectStateFlags -> Field -> VkIndirectStateFlagsNV
    os << "value: " << t.indirectStateFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexTypeCount" << std::endl;
    // indexTypeCount -> Field -> uint32_t
    os << "value: " << t.indexTypeCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pIndexTypes" << std::endl;
    // pIndexTypes -> Field -> ConstDynamicArray(VkIndexType)
    if (t.indexTypeCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkIndexType" << std::endl;
        for (uint64_t i = 0; i < t.indexTypeCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pIndexTypes << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pIndexTypeValues" << std::endl;
    // pIndexTypeValues -> Field -> ConstDynamicArray(uint32_t)
    if (t.indexTypeCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.indexTypeCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pIndexTypeValues << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkIndirectCommandsLayoutCreateInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkIndirectCommandsLayoutUsageFlagsNV
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineBindPoint" << std::endl;
    // pipelineBindPoint -> Field -> VkPipelineBindPoint
    os << "value: " << t.pipelineBindPoint << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tokenCount" << std::endl;
    // tokenCount -> Field -> uint32_t
    os << "value: " << t.tokenCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pTokens" << std::endl;
    // pTokens -> Field -> ConstDynamicArray(VkIndirectCommandsLayoutTokenNV)
    if (t.tokenCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkIndirectCommandsLayoutTokenNV" << std::endl;
        for (uint64_t i = 0; i < t.tokenCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pTokens << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  streamCount" << std::endl;
    // streamCount -> Field -> uint32_t
    os << "value: " << t.streamCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStreamStrides" << std::endl;
    // pStreamStrides -> Field -> ConstDynamicArray(uint32_t)
    if (t.streamCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < t.streamCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pStreamStrides << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkGeneratedCommandsInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineBindPoint" << std::endl;
    // pipelineBindPoint -> Field -> VkPipelineBindPoint
    os << "value: " << t.pipelineBindPoint << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipeline" << std::endl;
    // pipeline -> Field -> VkPipeline
    os << "value: " << t.pipeline << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indirectCommandsLayout" << std::endl;
    // indirectCommandsLayout -> Field -> VkIndirectCommandsLayoutNV
    os << "value: " << t.indirectCommandsLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  streamCount" << std::endl;
    // streamCount -> Field -> uint32_t
    os << "value: " << t.streamCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStreams" << std::endl;
    // pStreams -> Field -> ConstDynamicArray(VkIndirectCommandsStreamNV)
    if (t.streamCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkIndirectCommandsStreamNV" << std::endl;
        for (uint64_t i = 0; i < t.streamCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pStreams << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sequencesCount" << std::endl;
    // sequencesCount -> Field -> uint32_t
    os << "value: " << t.sequencesCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preprocessBuffer" << std::endl;
    // preprocessBuffer -> Field -> VkBuffer
    os << "value: " << t.preprocessBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preprocessOffset" << std::endl;
    // preprocessOffset -> Field -> VkDeviceSize
    os << "value: " << t.preprocessOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  preprocessSize" << std::endl;
    // preprocessSize -> Field -> VkDeviceSize
    os << "value: " << t.preprocessSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sequencesCountBuffer" << std::endl;
    // sequencesCountBuffer -> Field -> VkBuffer
    os << "value: " << t.sequencesCountBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sequencesCountOffset" << std::endl;
    // sequencesCountOffset -> Field -> VkDeviceSize
    os << "value: " << t.sequencesCountOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sequencesIndexBuffer" << std::endl;
    // sequencesIndexBuffer -> Field -> VkBuffer
    os << "value: " << t.sequencesIndexBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sequencesIndexOffset" << std::endl;
    // sequencesIndexOffset -> Field -> VkDeviceSize
    os << "value: " << t.sequencesIndexOffset << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkGeneratedCommandsMemoryRequirementsInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineBindPoint" << std::endl;
    // pipelineBindPoint -> Field -> VkPipelineBindPoint
    os << "value: " << t.pipelineBindPoint << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipeline" << std::endl;
    // pipeline -> Field -> VkPipeline
    os << "value: " << t.pipeline << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indirectCommandsLayout" << std::endl;
    // indirectCommandsLayout -> Field -> VkIndirectCommandsLayoutNV
    os << "value: " << t.indirectCommandsLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSequencesCount" << std::endl;
    // maxSequencesCount -> Field -> uint32_t
    os << "value: " << t.maxSequencesCount << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceInheritedViewportScissorFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  inheritedViewportScissor2D" << std::endl;
    // inheritedViewportScissor2D -> Field -> VkBool32
    os << "value: " << t.inheritedViewportScissor2D << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCommandBufferInheritanceViewportScissorInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewportScissor2D" << std::endl;
    // viewportScissor2D -> Field -> VkBool32
    os << "value: " << t.viewportScissor2D << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewportDepthCount" << std::endl;
    // viewportDepthCount -> Field -> uint32_t
    os << "value: " << t.viewportDepthCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pViewportDepths" << std::endl;
    // pointer
    if (t.pViewportDepths != nullptr) {
      os <<  "members:" << std::endl << *t.pViewportDepths << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  texelBufferAlignment" << std::endl;
    // texelBufferAlignment -> Field -> VkBool32
    os << "value: " << t.texelBufferAlignment << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRenderPassTransformBeginInfoQCOM &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transform" << std::endl;
    // transform -> Field -> VkSurfaceTransformFlagBitsKHR
    os << "value: " << t.transform << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCommandBufferInheritanceRenderPassTransformInfoQCOM &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transform" << std::endl;
    // transform -> Field -> VkSurfaceTransformFlagBitsKHR
    os << "value: " << t.transform << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  renderArea" << std::endl;
    // renderArea -> Field -> VkRect2D
    os <<  "members:" << std::endl << t.renderArea << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceDepthBiasControlFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasControl" << std::endl;
    // depthBiasControl -> Field -> VkBool32
    os << "value: " << t.depthBiasControl << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  leastRepresentableValueForceUnormRepresentation" << std::endl;
    // leastRepresentableValueForceUnormRepresentation -> Field -> VkBool32
    os << "value: " << t.leastRepresentableValueForceUnormRepresentation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  floatRepresentation" << std::endl;
    // floatRepresentation -> Field -> VkBool32
    os << "value: " << t.floatRepresentation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasExact" << std::endl;
    // depthBiasExact -> Field -> VkBool32
    os << "value: " << t.depthBiasExact << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDepthBiasInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasConstantFactor" << std::endl;
    // depthBiasConstantFactor -> Field -> float
    os << "value: " << t.depthBiasConstantFactor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasClamp" << std::endl;
    // depthBiasClamp -> Field -> float
    os << "value: " << t.depthBiasClamp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasSlopeFactor" << std::endl;
    // depthBiasSlopeFactor -> Field -> float
    os << "value: " << t.depthBiasSlopeFactor << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDepthBiasRepresentationInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasRepresentation" << std::endl;
    // depthBiasRepresentation -> Field -> VkDepthBiasRepresentationEXT
    os << "value: " << t.depthBiasRepresentation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasExact" << std::endl;
    // depthBiasExact -> Field -> VkBool32
    os << "value: " << t.depthBiasExact << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceDeviceMemoryReportFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceMemoryReport" << std::endl;
    // deviceMemoryReport -> Field -> VkBool32
    os << "value: " << t.deviceMemoryReport << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceMemoryReportCallbackDataEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDeviceMemoryReportFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  type" << std::endl;
    // type -> Field -> VkDeviceMemoryReportEventTypeEXT
    os << "value: " << t.type << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryObjectId" << std::endl;
    // memoryObjectId -> Field -> uint64_t
    os << "value: " << t.memoryObjectId << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  objectType" << std::endl;
    // objectType -> Field -> VkObjectType
    os << "value: " << t.objectType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  objectHandle" << std::endl;
    // objectHandle -> Field -> uint64_t
    os << "value: " << t.objectHandle << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  heapIndex" << std::endl;
    // heapIndex -> Field -> uint32_t
    os << "value: " << t.heapIndex << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceDeviceMemoryReportCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDeviceMemoryReportFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pfnUserCallback" << std::endl;
    // pointer
    if (t.pfnUserCallback != nullptr) {
      os << "value: *t.pfnUserCallback" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pUserData" << std::endl;
    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceRobustness2FeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  robustBufferAccess2" << std::endl;
    // robustBufferAccess2 -> Field -> VkBool32
    os << "value: " << t.robustBufferAccess2 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  robustImageAccess2" << std::endl;
    // robustImageAccess2 -> Field -> VkBool32
    os << "value: " << t.robustImageAccess2 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  nullDescriptor" << std::endl;
    // nullDescriptor -> Field -> VkBool32
    os << "value: " << t.nullDescriptor << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceRobustness2PropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  robustStorageBufferAccessSizeAlignment" << std::endl;
    // robustStorageBufferAccessSizeAlignment -> Field -> VkDeviceSize
    os << "value: " << t.robustStorageBufferAccessSizeAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  robustUniformBufferAccessSizeAlignment" << std::endl;
    // robustUniformBufferAccessSizeAlignment -> Field -> VkDeviceSize
    os << "value: " << t.robustUniformBufferAccessSizeAlignment << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSamplerCustomBorderColorCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  customBorderColor" << std::endl;
    // customBorderColor -> Field -> VkClearColorValue
    os <<  "members:" << std::endl << t.customBorderColor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceCustomBorderColorPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxCustomBorderColorSamplers" << std::endl;
    // maxCustomBorderColorSamplers -> Field -> uint32_t
    os << "value: " << t.maxCustomBorderColorSamplers << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceCustomBorderColorFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  customBorderColors" << std::endl;
    // customBorderColors -> Field -> VkBool32
    os << "value: " << t.customBorderColors << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  customBorderColorWithoutFormat" << std::endl;
    // customBorderColorWithoutFormat -> Field -> VkBool32
    os << "value: " << t.customBorderColorWithoutFormat << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDevicePresentBarrierFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  presentBarrier" << std::endl;
    // presentBarrier -> Field -> VkBool32
    os << "value: " << t.presentBarrier << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSurfaceCapabilitiesPresentBarrierNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  presentBarrierSupported" << std::endl;
    // presentBarrierSupported -> Field -> VkBool32
    os << "value: " << t.presentBarrierSupported << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSwapchainPresentBarrierCreateInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  presentBarrierEnable" << std::endl;
    // presentBarrierEnable -> Field -> VkBool32
    os << "value: " << t.presentBarrierEnable << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceDiagnosticsConfigFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  diagnosticsConfig" << std::endl;
    // diagnosticsConfig -> Field -> VkBool32
    os << "value: " << t.diagnosticsConfig << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceDiagnosticsConfigCreateInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDeviceDiagnosticsConfigFlagsNV
    os << "value: " << t.flags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkQueryLowLatencySupportNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pQueriedLowLatencyData" << std::endl;
    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }
  return os;
}

#ifdef VK_USE_PLATFORM_METAL_EXT
std::ostream &operator<<(std::ostream & os, const VkExportMetalObjectCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  exportObjectType" << std::endl;
    // exportObjectType -> Field -> VkExportMetalObjectTypeFlagBitsEXT
    os << "value: " << t.exportObjectType << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_METAL_EXT

#ifdef VK_USE_PLATFORM_METAL_EXT
std::ostream &operator<<(std::ostream & os, const VkExportMetalObjectsInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_METAL_EXT

#ifdef VK_USE_PLATFORM_METAL_EXT
std::ostream &operator<<(std::ostream & os, const VkExportMetalDeviceInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mtlDevice" << std::endl;
    // mtlDevice -> Field -> MTLDevice_id
    os << "value: " << t.mtlDevice << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_METAL_EXT

#ifdef VK_USE_PLATFORM_METAL_EXT
std::ostream &operator<<(std::ostream & os, const VkExportMetalCommandQueueInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queue" << std::endl;
    // queue -> Field -> VkQueue
    os << "value: " << t.queue << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mtlCommandQueue" << std::endl;
    // mtlCommandQueue -> Field -> MTLCommandQueue_id
    os << "value: " << t.mtlCommandQueue << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_METAL_EXT

#ifdef VK_USE_PLATFORM_METAL_EXT
std::ostream &operator<<(std::ostream & os, const VkExportMetalBufferInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memory" << std::endl;
    // memory -> Field -> VkDeviceMemory
    os << "value: " << t.memory << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mtlBuffer" << std::endl;
    // mtlBuffer -> Field -> MTLBuffer_id
    os << "value: " << t.mtlBuffer << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_METAL_EXT

#ifdef VK_USE_PLATFORM_METAL_EXT
std::ostream &operator<<(std::ostream & os, const VkImportMetalBufferInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mtlBuffer" << std::endl;
    // mtlBuffer -> Field -> MTLBuffer_id
    os << "value: " << t.mtlBuffer << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_METAL_EXT

#ifdef VK_USE_PLATFORM_METAL_EXT
std::ostream &operator<<(std::ostream & os, const VkExportMetalTextureInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << t.image << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageView" << std::endl;
    // imageView -> Field -> VkImageView
    os << "value: " << t.imageView << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferView" << std::endl;
    // bufferView -> Field -> VkBufferView
    os << "value: " << t.bufferView << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  plane" << std::endl;
    // plane -> Field -> VkImageAspectFlagBits
    os << "value: " << t.plane << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mtlTexture" << std::endl;
    // mtlTexture -> Field -> MTLTexture_id
    os << "value: " << t.mtlTexture << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_METAL_EXT

#ifdef VK_USE_PLATFORM_METAL_EXT
std::ostream &operator<<(std::ostream & os, const VkImportMetalTextureInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  plane" << std::endl;
    // plane -> Field -> VkImageAspectFlagBits
    os << "value: " << t.plane << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mtlTexture" << std::endl;
    // mtlTexture -> Field -> MTLTexture_id
    os << "value: " << t.mtlTexture << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_METAL_EXT

#ifdef VK_USE_PLATFORM_METAL_EXT
std::ostream &operator<<(std::ostream & os, const VkExportMetalIOSurfaceInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << t.image << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ioSurface" << std::endl;
    // ioSurface -> Field -> IOSurfaceRef
    os << "value: " << t.ioSurface << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_METAL_EXT

#ifdef VK_USE_PLATFORM_METAL_EXT
std::ostream &operator<<(std::ostream & os, const VkImportMetalIOSurfaceInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ioSurface" << std::endl;
    // ioSurface -> Field -> IOSurfaceRef
    os << "value: " << t.ioSurface << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_METAL_EXT

#ifdef VK_USE_PLATFORM_METAL_EXT
std::ostream &operator<<(std::ostream & os, const VkExportMetalSharedEventInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  semaphore" << std::endl;
    // semaphore -> Field -> VkSemaphore
    os << "value: " << t.semaphore << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  event" << std::endl;
    // event -> Field -> VkEvent
    os << "value: " << t.event << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mtlSharedEvent" << std::endl;
    // mtlSharedEvent -> Field -> MTLSharedEvent_id
    os << "value: " << t.mtlSharedEvent << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_METAL_EXT

#ifdef VK_USE_PLATFORM_METAL_EXT
std::ostream &operator<<(std::ostream & os, const VkImportMetalSharedEventInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mtlSharedEvent" << std::endl;
    // mtlSharedEvent -> Field -> MTLSharedEvent_id
    os << "value: " << t.mtlSharedEvent << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_METAL_EXT

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceDescriptorBufferPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  combinedImageSamplerDescriptorSingleArray" << std::endl;
    // combinedImageSamplerDescriptorSingleArray -> Field -> VkBool32
    os << "value: " << t.combinedImageSamplerDescriptorSingleArray << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferlessPushDescriptors" << std::endl;
    // bufferlessPushDescriptors -> Field -> VkBool32
    os << "value: " << t.bufferlessPushDescriptors << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  allowSamplerImageViewPostSubmitCreation" << std::endl;
    // allowSamplerImageViewPostSubmitCreation -> Field -> VkBool32
    os << "value: " << t.allowSamplerImageViewPostSubmitCreation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBufferOffsetAlignment" << std::endl;
    // descriptorBufferOffsetAlignment -> Field -> VkDeviceSize
    os << "value: " << t.descriptorBufferOffsetAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorBufferBindings" << std::endl;
    // maxDescriptorBufferBindings -> Field -> uint32_t
    os << "value: " << t.maxDescriptorBufferBindings << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxResourceDescriptorBufferBindings" << std::endl;
    // maxResourceDescriptorBufferBindings -> Field -> uint32_t
    os << "value: " << t.maxResourceDescriptorBufferBindings << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSamplerDescriptorBufferBindings" << std::endl;
    // maxSamplerDescriptorBufferBindings -> Field -> uint32_t
    os << "value: " << t.maxSamplerDescriptorBufferBindings << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxEmbeddedImmutableSamplerBindings" << std::endl;
    // maxEmbeddedImmutableSamplerBindings -> Field -> uint32_t
    os << "value: " << t.maxEmbeddedImmutableSamplerBindings << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxEmbeddedImmutableSamplers" << std::endl;
    // maxEmbeddedImmutableSamplers -> Field -> uint32_t
    os << "value: " << t.maxEmbeddedImmutableSamplers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferCaptureReplayDescriptorDataSize" << std::endl;
    // bufferCaptureReplayDescriptorDataSize -> Field -> size_t
    os << "value: " << t.bufferCaptureReplayDescriptorDataSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageCaptureReplayDescriptorDataSize" << std::endl;
    // imageCaptureReplayDescriptorDataSize -> Field -> size_t
    os << "value: " << t.imageCaptureReplayDescriptorDataSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageViewCaptureReplayDescriptorDataSize" << std::endl;
    // imageViewCaptureReplayDescriptorDataSize -> Field -> size_t
    os << "value: " << t.imageViewCaptureReplayDescriptorDataSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samplerCaptureReplayDescriptorDataSize" << std::endl;
    // samplerCaptureReplayDescriptorDataSize -> Field -> size_t
    os << "value: " << t.samplerCaptureReplayDescriptorDataSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructureCaptureReplayDescriptorDataSize" << std::endl;
    // accelerationStructureCaptureReplayDescriptorDataSize -> Field -> size_t
    os << "value: " << t.accelerationStructureCaptureReplayDescriptorDataSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samplerDescriptorSize" << std::endl;
    // samplerDescriptorSize -> Field -> size_t
    os << "value: " << t.samplerDescriptorSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  combinedImageSamplerDescriptorSize" << std::endl;
    // combinedImageSamplerDescriptorSize -> Field -> size_t
    os << "value: " << t.combinedImageSamplerDescriptorSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampledImageDescriptorSize" << std::endl;
    // sampledImageDescriptorSize -> Field -> size_t
    os << "value: " << t.sampledImageDescriptorSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storageImageDescriptorSize" << std::endl;
    // storageImageDescriptorSize -> Field -> size_t
    os << "value: " << t.storageImageDescriptorSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uniformTexelBufferDescriptorSize" << std::endl;
    // uniformTexelBufferDescriptorSize -> Field -> size_t
    os << "value: " << t.uniformTexelBufferDescriptorSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  robustUniformTexelBufferDescriptorSize" << std::endl;
    // robustUniformTexelBufferDescriptorSize -> Field -> size_t
    os << "value: " << t.robustUniformTexelBufferDescriptorSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storageTexelBufferDescriptorSize" << std::endl;
    // storageTexelBufferDescriptorSize -> Field -> size_t
    os << "value: " << t.storageTexelBufferDescriptorSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  robustStorageTexelBufferDescriptorSize" << std::endl;
    // robustStorageTexelBufferDescriptorSize -> Field -> size_t
    os << "value: " << t.robustStorageTexelBufferDescriptorSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  uniformBufferDescriptorSize" << std::endl;
    // uniformBufferDescriptorSize -> Field -> size_t
    os << "value: " << t.uniformBufferDescriptorSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  robustUniformBufferDescriptorSize" << std::endl;
    // robustUniformBufferDescriptorSize -> Field -> size_t
    os << "value: " << t.robustUniformBufferDescriptorSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  storageBufferDescriptorSize" << std::endl;
    // storageBufferDescriptorSize -> Field -> size_t
    os << "value: " << t.storageBufferDescriptorSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  robustStorageBufferDescriptorSize" << std::endl;
    // robustStorageBufferDescriptorSize -> Field -> size_t
    os << "value: " << t.robustStorageBufferDescriptorSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  inputAttachmentDescriptorSize" << std::endl;
    // inputAttachmentDescriptorSize -> Field -> size_t
    os << "value: " << t.inputAttachmentDescriptorSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructureDescriptorSize" << std::endl;
    // accelerationStructureDescriptorSize -> Field -> size_t
    os << "value: " << t.accelerationStructureDescriptorSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSamplerDescriptorBufferRange" << std::endl;
    // maxSamplerDescriptorBufferRange -> Field -> VkDeviceSize
    os << "value: " << t.maxSamplerDescriptorBufferRange << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxResourceDescriptorBufferRange" << std::endl;
    // maxResourceDescriptorBufferRange -> Field -> VkDeviceSize
    os << "value: " << t.maxResourceDescriptorBufferRange << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samplerDescriptorBufferAddressSpaceSize" << std::endl;
    // samplerDescriptorBufferAddressSpaceSize -> Field -> VkDeviceSize
    os << "value: " << t.samplerDescriptorBufferAddressSpaceSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  resourceDescriptorBufferAddressSpaceSize" << std::endl;
    // resourceDescriptorBufferAddressSpaceSize -> Field -> VkDeviceSize
    os << "value: " << t.resourceDescriptorBufferAddressSpaceSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBufferAddressSpaceSize" << std::endl;
    // descriptorBufferAddressSpaceSize -> Field -> VkDeviceSize
    os << "value: " << t.descriptorBufferAddressSpaceSize << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  combinedImageSamplerDensityMapDescriptorSize" << std::endl;
    // combinedImageSamplerDensityMapDescriptorSize -> Field -> size_t
    os << "value: " << t.combinedImageSamplerDensityMapDescriptorSize << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceDescriptorBufferFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBuffer" << std::endl;
    // descriptorBuffer -> Field -> VkBool32
    os << "value: " << t.descriptorBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBufferCaptureReplay" << std::endl;
    // descriptorBufferCaptureReplay -> Field -> VkBool32
    os << "value: " << t.descriptorBufferCaptureReplay << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBufferImageLayoutIgnored" << std::endl;
    // descriptorBufferImageLayoutIgnored -> Field -> VkBool32
    os << "value: " << t.descriptorBufferImageLayoutIgnored << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBufferPushDescriptors" << std::endl;
    // descriptorBufferPushDescriptors -> Field -> VkBool32
    os << "value: " << t.descriptorBufferPushDescriptors << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDescriptorAddressInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  address" << std::endl;
    // address -> Field -> VkDeviceAddress
    os << "value: " << t.address << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  range" << std::endl;
    // range -> Field -> VkDeviceSize
    os << "value: " << t.range << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDescriptorBufferBindingInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  address" << std::endl;
    // address -> Field -> VkDeviceAddress
    os << "value: " << t.address << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  usage" << std::endl;
    // usage -> Field -> VkBufferUsageFlags
    os << "value: " << t.usage << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDescriptorBufferBindingPushDescriptorBufferHandleEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDescriptorDataEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSampler" << std::endl;
    // pointer
    if (t.pSampler != nullptr) {
      os << "value: *t.pSampler" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCombinedImageSampler" << std::endl;
    // pointer
    if (t.pCombinedImageSampler != nullptr) {
      os <<  "members:" << std::endl << *t.pCombinedImageSampler << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInputAttachmentImage" << std::endl;
    // pointer
    if (t.pInputAttachmentImage != nullptr) {
      os <<  "members:" << std::endl << *t.pInputAttachmentImage << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSampledImage" << std::endl;
    // pointer
    if (t.pSampledImage != nullptr) {
      os <<  "members:" << std::endl << *t.pSampledImage << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStorageImage" << std::endl;
    // pointer
    if (t.pStorageImage != nullptr) {
      os <<  "members:" << std::endl << *t.pStorageImage << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pUniformTexelBuffer" << std::endl;
    // pointer
    if (t.pUniformTexelBuffer != nullptr) {
      os <<  "members:" << std::endl << *t.pUniformTexelBuffer << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStorageTexelBuffer" << std::endl;
    // pointer
    if (t.pStorageTexelBuffer != nullptr) {
      os <<  "members:" << std::endl << *t.pStorageTexelBuffer << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pUniformBuffer" << std::endl;
    // pointer
    if (t.pUniformBuffer != nullptr) {
      os <<  "members:" << std::endl << *t.pUniformBuffer << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStorageBuffer" << std::endl;
    // pointer
    if (t.pStorageBuffer != nullptr) {
      os <<  "members:" << std::endl << *t.pStorageBuffer << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructure" << std::endl;
    // accelerationStructure -> Field -> VkDeviceAddress
    os << "value: " << t.accelerationStructure << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDescriptorGetInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  type" << std::endl;
    // type -> Field -> VkDescriptorType
    os << "value: " << t.type << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  data" << std::endl;
    // data -> Field -> VkDescriptorDataEXT
    os <<  "members:" << std::endl << t.data << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBufferCaptureDescriptorDataInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageCaptureDescriptorDataInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << t.image << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageViewCaptureDescriptorDataInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageView" << std::endl;
    // imageView -> Field -> VkImageView
    os << "value: " << t.imageView << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSamplerCaptureDescriptorDataInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampler" << std::endl;
    // sampler -> Field -> VkSampler
    os << "value: " << t.sampler << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkOpaqueCaptureDescriptorDataCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  opaqueCaptureDescriptorData" << std::endl;
    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureCaptureDescriptorDataInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructure" << std::endl;
    // accelerationStructure -> Field -> VkAccelerationStructureKHR
    os << "value: " << t.accelerationStructure << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructureNV" << std::endl;
    // accelerationStructureNV -> Field -> VkAccelerationStructureNV
    os << "value: " << t.accelerationStructureNV << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  graphicsPipelineLibrary" << std::endl;
    // graphicsPipelineLibrary -> Field -> VkBool32
    os << "value: " << t.graphicsPipelineLibrary << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  graphicsPipelineLibraryFastLinking" << std::endl;
    // graphicsPipelineLibraryFastLinking -> Field -> VkBool32
    os << "value: " << t.graphicsPipelineLibraryFastLinking << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  graphicsPipelineLibraryIndependentInterpolationDecoration" << std::endl;
    // graphicsPipelineLibraryIndependentInterpolationDecoration -> Field -> VkBool32
    os << "value: " << t.graphicsPipelineLibraryIndependentInterpolationDecoration << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkGraphicsPipelineLibraryCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkGraphicsPipelineLibraryFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderEarlyAndLateFragmentTests" << std::endl;
    // shaderEarlyAndLateFragmentTests -> Field -> VkBool32
    os << "value: " << t.shaderEarlyAndLateFragmentTests << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentShadingRateEnums" << std::endl;
    // fragmentShadingRateEnums -> Field -> VkBool32
    os << "value: " << t.fragmentShadingRateEnums << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supersampleFragmentShadingRates" << std::endl;
    // supersampleFragmentShadingRates -> Field -> VkBool32
    os << "value: " << t.supersampleFragmentShadingRates << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  noInvocationFragmentShadingRates" << std::endl;
    // noInvocationFragmentShadingRates -> Field -> VkBool32
    os << "value: " << t.noInvocationFragmentShadingRates << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxFragmentShadingRateInvocationCount" << std::endl;
    // maxFragmentShadingRateInvocationCount -> Field -> VkSampleCountFlagBits
    os << "value: " << t.maxFragmentShadingRateInvocationCount << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineFragmentShadingRateEnumStateCreateInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shadingRateType" << std::endl;
    // shadingRateType -> Field -> VkFragmentShadingRateTypeNV
    os << "value: " << t.shadingRateType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shadingRate" << std::endl;
    // shadingRate -> Field -> VkFragmentShadingRateNV
    os << "value: " << t.shadingRate << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  combinerOps" << std::endl;
    // combinerOps -> Field -> FixedArray(VkFragmentShadingRateCombinerOpKHR)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkFragmentShadingRateCombinerOpKHR" << std::endl;
        for (uint64_t i = 0; i < 2; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.combinerOps << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceOrHostAddressConstKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceAddress" << std::endl;
    // deviceAddress -> Field -> VkDeviceAddress
    os << "value: " << t.deviceAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hostAddress" << std::endl;
    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureGeometryMotionTrianglesDataNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexData" << std::endl;
    // vertexData -> Field -> VkDeviceOrHostAddressConstKHR
    os <<  "members:" << std::endl << t.vertexData << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureMotionInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxInstances" << std::endl;
    // maxInstances -> Field -> uint32_t
    os << "value: " << t.maxInstances << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkAccelerationStructureMotionInfoFlagsNV
    os << "value: " << t.flags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureMatrixMotionInstanceNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transformT0" << std::endl;
    // transformT0 -> Field -> VkTransformMatrixKHR
    os <<  "members:" << std::endl << t.transformT0 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transformT1" << std::endl;
    // transformT1 -> Field -> VkTransformMatrixKHR
    os <<  "members:" << std::endl << t.transformT1 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instanceCustomIndex" << std::endl;
    // instanceCustomIndex -> Field -> uint32_t
    os << "value: " << t.instanceCustomIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mask" << std::endl;
    // mask -> Field -> uint32_t
    os << "value: " << t.mask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instanceShaderBindingTableRecordOffset" << std::endl;
    // instanceShaderBindingTableRecordOffset -> Field -> uint32_t
    os << "value: " << t.instanceShaderBindingTableRecordOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkGeometryInstanceFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructureReference" << std::endl;
    // accelerationStructureReference -> Field -> uint64_t
    os << "value: " << t.accelerationStructureReference << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSRTDataNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sx" << std::endl;
    // sx -> Field -> float
    os << "value: " << t.sx << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  a" << std::endl;
    // a -> Field -> float
    os << "value: " << t.a << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  b" << std::endl;
    // b -> Field -> float
    os << "value: " << t.b << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pvx" << std::endl;
    // pvx -> Field -> float
    os << "value: " << t.pvx << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sy" << std::endl;
    // sy -> Field -> float
    os << "value: " << t.sy << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  c" << std::endl;
    // c -> Field -> float
    os << "value: " << t.c << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pvy" << std::endl;
    // pvy -> Field -> float
    os << "value: " << t.pvy << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sz" << std::endl;
    // sz -> Field -> float
    os << "value: " << t.sz << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pvz" << std::endl;
    // pvz -> Field -> float
    os << "value: " << t.pvz << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  qx" << std::endl;
    // qx -> Field -> float
    os << "value: " << t.qx << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  qy" << std::endl;
    // qy -> Field -> float
    os << "value: " << t.qy << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  qz" << std::endl;
    // qz -> Field -> float
    os << "value: " << t.qz << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  qw" << std::endl;
    // qw -> Field -> float
    os << "value: " << t.qw << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tx" << std::endl;
    // tx -> Field -> float
    os << "value: " << t.tx << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ty" << std::endl;
    // ty -> Field -> float
    os << "value: " << t.ty << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tz" << std::endl;
    // tz -> Field -> float
    os << "value: " << t.tz << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureSRTMotionInstanceNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transformT0" << std::endl;
    // transformT0 -> Field -> VkSRTDataNV
    os <<  "members:" << std::endl << t.transformT0 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transformT1" << std::endl;
    // transformT1 -> Field -> VkSRTDataNV
    os <<  "members:" << std::endl << t.transformT1 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instanceCustomIndex" << std::endl;
    // instanceCustomIndex -> Field -> uint32_t
    os << "value: " << t.instanceCustomIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mask" << std::endl;
    // mask -> Field -> uint32_t
    os << "value: " << t.mask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instanceShaderBindingTableRecordOffset" << std::endl;
    // instanceShaderBindingTableRecordOffset -> Field -> uint32_t
    os << "value: " << t.instanceShaderBindingTableRecordOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkGeometryInstanceFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructureReference" << std::endl;
    // accelerationStructureReference -> Field -> uint64_t
    os << "value: " << t.accelerationStructureReference << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureMotionInstanceDataNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  staticInstance" << std::endl;
    // staticInstance -> Field -> VkAccelerationStructureInstanceKHR
    os <<  "members:" << std::endl << t.staticInstance << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  matrixMotionInstance" << std::endl;
    // matrixMotionInstance -> Field -> VkAccelerationStructureMatrixMotionInstanceNV
    os <<  "members:" << std::endl << t.matrixMotionInstance << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srtMotionInstance" << std::endl;
    // srtMotionInstance -> Field -> VkAccelerationStructureSRTMotionInstanceNV
    os <<  "members:" << std::endl << t.srtMotionInstance << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureMotionInstanceNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  type" << std::endl;
    // type -> Field -> VkAccelerationStructureMotionInstanceTypeNV
    os << "value: " << t.type << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkAccelerationStructureMotionInstanceFlagsNV
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  data" << std::endl;
    // data -> Field -> VkAccelerationStructureMotionInstanceDataNV
    os <<  "members:" << std::endl << t.data << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceRayTracingMotionBlurFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rayTracingMotionBlur" << std::endl;
    // rayTracingMotionBlur -> Field -> VkBool32
    os << "value: " << t.rayTracingMotionBlur << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rayTracingMotionBlurPipelineTraceRaysIndirect" << std::endl;
    // rayTracingMotionBlurPipelineTraceRaysIndirect -> Field -> VkBool32
    os << "value: " << t.rayTracingMotionBlurPipelineTraceRaysIndirect << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ycbcr2plane444Formats" << std::endl;
    // ycbcr2plane444Formats -> Field -> VkBool32
    os << "value: " << t.ycbcr2plane444Formats << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceFragmentDensityMap2FeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentDensityMapDeferred" << std::endl;
    // fragmentDensityMapDeferred -> Field -> VkBool32
    os << "value: " << t.fragmentDensityMapDeferred << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceFragmentDensityMap2PropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subsampledLoads" << std::endl;
    // subsampledLoads -> Field -> VkBool32
    os << "value: " << t.subsampledLoads << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subsampledCoarseReconstructionEarlyAccess" << std::endl;
    // subsampledCoarseReconstructionEarlyAccess -> Field -> VkBool32
    os << "value: " << t.subsampledCoarseReconstructionEarlyAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSubsampledArrayLayers" << std::endl;
    // maxSubsampledArrayLayers -> Field -> uint32_t
    os << "value: " << t.maxSubsampledArrayLayers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetSubsampledSamplers" << std::endl;
    // maxDescriptorSetSubsampledSamplers -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetSubsampledSamplers << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCopyCommandTransformInfoQCOM &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transform" << std::endl;
    // transform -> Field -> VkSurfaceTransformFlagBitsKHR
    os << "value: " << t.transform << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceImageCompressionControlFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageCompressionControl" << std::endl;
    // imageCompressionControl -> Field -> VkBool32
    os << "value: " << t.imageCompressionControl << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageCompressionControlEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkImageCompressionFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compressionControlPlaneCount" << std::endl;
    // compressionControlPlaneCount -> Field -> uint32_t
    os << "value: " << t.compressionControlPlaneCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pFixedRateFlags" << std::endl;
    // pFixedRateFlags -> Field -> DynamicArray(VkImageCompressionFixedRateFlagsEXT)
    if (t.compressionControlPlaneCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkImageCompressionFixedRateFlagsEXT" << std::endl;
        for (uint64_t i = 0; i < t.compressionControlPlaneCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pFixedRateFlags << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageCompressionPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageCompressionFlags" << std::endl;
    // imageCompressionFlags -> Field -> VkImageCompressionFlagsEXT
    os << "value: " << t.imageCompressionFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageCompressionFixedRateFlags" << std::endl;
    // imageCompressionFixedRateFlags -> Field -> VkImageCompressionFixedRateFlagsEXT
    os << "value: " << t.imageCompressionFixedRateFlags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentFeedbackLoopLayout" << std::endl;
    // attachmentFeedbackLoopLayout -> Field -> VkBool32
    os << "value: " << t.attachmentFeedbackLoopLayout << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDevice4444FormatsFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  formatA4R4G4B4" << std::endl;
    // formatA4R4G4B4 -> Field -> VkBool32
    os << "value: " << t.formatA4R4G4B4 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  formatA4B4G4R4" << std::endl;
    // formatA4B4G4R4 -> Field -> VkBool32
    os << "value: " << t.formatA4B4G4R4 << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceFaultFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceFault" << std::endl;
    // deviceFault -> Field -> VkBool32
    os << "value: " << t.deviceFault << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceFaultVendorBinary" << std::endl;
    // deviceFaultVendorBinary -> Field -> VkBool32
    os << "value: " << t.deviceFaultVendorBinary << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceFaultCountsEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  addressInfoCount" << std::endl;
    // addressInfoCount -> Field -> uint32_t
    os << "value: " << t.addressInfoCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vendorInfoCount" << std::endl;
    // vendorInfoCount -> Field -> uint32_t
    os << "value: " << t.vendorInfoCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vendorBinarySize" << std::endl;
    // vendorBinarySize -> Field -> VkDeviceSize
    os << "value: " << t.vendorBinarySize << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceFaultAddressInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  addressType" << std::endl;
    // addressType -> Field -> VkDeviceFaultAddressTypeEXT
    os << "value: " << t.addressType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  reportedAddress" << std::endl;
    // reportedAddress -> Field -> VkDeviceAddress
    os << "value: " << t.reportedAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  addressPrecision" << std::endl;
    // addressPrecision -> Field -> VkDeviceSize
    os << "value: " << t.addressPrecision << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceFaultVendorInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  description" << std::endl;
    // description -> Field -> FixedArray(char)
    os << "value: " << t.description << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vendorFaultCode" << std::endl;
    // vendorFaultCode -> Field -> uint64_t
    os << "value: " << t.vendorFaultCode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vendorFaultData" << std::endl;
    // vendorFaultData -> Field -> uint64_t
    os << "value: " << t.vendorFaultData << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceFaultInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  description" << std::endl;
    // description -> Field -> FixedArray(char)
    os << "value: " << t.description << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAddressInfos" << std::endl;
    // pointer
    if (t.pAddressInfos != nullptr) {
      os <<  "members:" << std::endl << *t.pAddressInfos << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pVendorInfos" << std::endl;
    // pointer
    if (t.pVendorInfos != nullptr) {
      os <<  "members:" << std::endl << *t.pVendorInfos << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pVendorBinaryData" << std::endl;
    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceFaultVendorBinaryHeaderVersionOneEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  headerSize" << std::endl;
    // headerSize -> Field -> uint32_t
    os << "value: " << t.headerSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  headerVersion" << std::endl;
    // headerVersion -> Field -> VkDeviceFaultVendorBinaryHeaderVersionEXT
    os << "value: " << t.headerVersion << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vendorID" << std::endl;
    // vendorID -> Field -> uint32_t
    os << "value: " << t.vendorID << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceID" << std::endl;
    // deviceID -> Field -> uint32_t
    os << "value: " << t.deviceID << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  driverVersion" << std::endl;
    // driverVersion -> Field -> uint32_t
    os << "value: " << t.driverVersion << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineCacheUUID" << std::endl;
    // pipelineCacheUUID -> Field -> FixedArray(uint8_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint8_t" << std::endl;
        for (uint64_t i = 0; i < VK_UUID_SIZE; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pipelineCacheUUID << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  applicationNameOffset" << std::endl;
    // applicationNameOffset -> Field -> uint32_t
    os << "value: " << t.applicationNameOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  applicationVersion" << std::endl;
    // applicationVersion -> Field -> uint32_t
    os << "value: " << t.applicationVersion << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  engineNameOffset" << std::endl;
    // engineNameOffset -> Field -> uint32_t
    os << "value: " << t.engineNameOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  engineVersion" << std::endl;
    // engineVersion -> Field -> uint32_t
    os << "value: " << t.engineVersion << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  apiVersion" << std::endl;
    // apiVersion -> Field -> uint32_t
    os << "value: " << t.apiVersion << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rasterizationOrderColorAttachmentAccess" << std::endl;
    // rasterizationOrderColorAttachmentAccess -> Field -> VkBool32
    os << "value: " << t.rasterizationOrderColorAttachmentAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rasterizationOrderDepthAttachmentAccess" << std::endl;
    // rasterizationOrderDepthAttachmentAccess -> Field -> VkBool32
    os << "value: " << t.rasterizationOrderDepthAttachmentAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rasterizationOrderStencilAttachmentAccess" << std::endl;
    // rasterizationOrderStencilAttachmentAccess -> Field -> VkBool32
    os << "value: " << t.rasterizationOrderStencilAttachmentAccess << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  formatRgba10x6WithoutYCbCrSampler" << std::endl;
    // formatRgba10x6WithoutYCbCrSampler -> Field -> VkBool32
    os << "value: " << t.formatRgba10x6WithoutYCbCrSampler << std::endl;
  }
  return os;
}

#ifdef VK_USE_PLATFORM_DIRECTFB_EXT
std::ostream &operator<<(std::ostream & os, const VkDirectFBSurfaceCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDirectFBSurfaceCreateFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dfb" << std::endl;
    // pointer
    if (t.dfb != nullptr) {
      os << "value: *t.dfb" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  surface" << std::endl;
    // pointer
    if (t.surface != nullptr) {
      os << "value: *t.surface" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}
#endif //VK_USE_PLATFORM_DIRECTFB_EXT

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mutableDescriptorType" << std::endl;
    // mutableDescriptorType -> Field -> VkBool32
    os << "value: " << t.mutableDescriptorType << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMutableDescriptorTypeListEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorTypeCount" << std::endl;
    // descriptorTypeCount -> Field -> uint32_t
    os << "value: " << t.descriptorTypeCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDescriptorTypes" << std::endl;
    // pDescriptorTypes -> Field -> ConstDynamicArray(VkDescriptorType)
    if (t.descriptorTypeCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDescriptorType" << std::endl;
        for (uint64_t i = 0; i < t.descriptorTypeCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pDescriptorTypes << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMutableDescriptorTypeCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mutableDescriptorTypeListCount" << std::endl;
    // mutableDescriptorTypeListCount -> Field -> uint32_t
    os << "value: " << t.mutableDescriptorTypeListCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMutableDescriptorTypeLists" << std::endl;
    // pMutableDescriptorTypeLists -> Field -> ConstDynamicArray(VkMutableDescriptorTypeListEXT)
    if (t.mutableDescriptorTypeListCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkMutableDescriptorTypeListEXT" << std::endl;
        for (uint64_t i = 0; i < t.mutableDescriptorTypeListCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pMutableDescriptorTypeLists << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexInputDynamicState" << std::endl;
    // vertexInputDynamicState -> Field -> VkBool32
    os << "value: " << t.vertexInputDynamicState << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVertexInputBindingDescription2EXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  binding" << std::endl;
    // binding -> Field -> uint32_t
    os << "value: " << t.binding << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << t.stride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  inputRate" << std::endl;
    // inputRate -> Field -> VkVertexInputRate
    os << "value: " << t.inputRate << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  divisor" << std::endl;
    // divisor -> Field -> uint32_t
    os << "value: " << t.divisor << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkVertexInputAttributeDescription2EXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  location" << std::endl;
    // location -> Field -> uint32_t
    os << "value: " << t.location << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  binding" << std::endl;
    // binding -> Field -> uint32_t
    os << "value: " << t.binding << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> uint32_t
    os << "value: " << t.offset << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceDrmPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hasPrimary" << std::endl;
    // hasPrimary -> Field -> VkBool32
    os << "value: " << t.hasPrimary << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hasRender" << std::endl;
    // hasRender -> Field -> VkBool32
    os << "value: " << t.hasRender << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primaryMajor" << std::endl;
    // primaryMajor -> Field -> int64_t
    os << "value: " << t.primaryMajor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primaryMinor" << std::endl;
    // primaryMinor -> Field -> int64_t
    os << "value: " << t.primaryMinor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  renderMajor" << std::endl;
    // renderMajor -> Field -> int64_t
    os << "value: " << t.renderMajor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  renderMinor" << std::endl;
    // renderMinor -> Field -> int64_t
    os << "value: " << t.renderMinor << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceAddressBindingReportFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  reportAddressBinding" << std::endl;
    // reportAddressBinding -> Field -> VkBool32
    os << "value: " << t.reportAddressBinding << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceAddressBindingCallbackDataEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDeviceAddressBindingFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  baseAddress" << std::endl;
    // baseAddress -> Field -> VkDeviceAddress
    os << "value: " << t.baseAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bindingType" << std::endl;
    // bindingType -> Field -> VkDeviceAddressBindingTypeEXT
    os << "value: " << t.bindingType << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceDepthClipControlFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthClipControl" << std::endl;
    // depthClipControl -> Field -> VkBool32
    os << "value: " << t.depthClipControl << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineViewportDepthClipControlCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  negativeOneToOne" << std::endl;
    // negativeOneToOne -> Field -> VkBool32
    os << "value: " << t.negativeOneToOne << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primitiveTopologyListRestart" << std::endl;
    // primitiveTopologyListRestart -> Field -> VkBool32
    os << "value: " << t.primitiveTopologyListRestart << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primitiveTopologyPatchListRestart" << std::endl;
    // primitiveTopologyPatchListRestart -> Field -> VkBool32
    os << "value: " << t.primitiveTopologyPatchListRestart << std::endl;
  }
  return os;
}

#ifdef VK_USE_PLATFORM_FUCHSIA
std::ostream &operator<<(std::ostream & os, const VkImportMemoryZirconHandleInfoFUCHSIA &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalMemoryHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handle" << std::endl;
    // handle -> Field -> zx_handle_t
    os << "value: " << t.handle << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_FUCHSIA

#ifdef VK_USE_PLATFORM_FUCHSIA
std::ostream &operator<<(std::ostream & os, const VkMemoryZirconHandlePropertiesFUCHSIA &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryTypeBits" << std::endl;
    // memoryTypeBits -> Field -> uint32_t
    os << "value: " << t.memoryTypeBits << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_FUCHSIA

#ifdef VK_USE_PLATFORM_FUCHSIA
std::ostream &operator<<(std::ostream & os, const VkMemoryGetZirconHandleInfoFUCHSIA &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memory" << std::endl;
    // memory -> Field -> VkDeviceMemory
    os << "value: " << t.memory << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalMemoryHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_FUCHSIA

#ifdef VK_USE_PLATFORM_FUCHSIA
std::ostream &operator<<(std::ostream & os, const VkImportSemaphoreZirconHandleInfoFUCHSIA &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  semaphore" << std::endl;
    // semaphore -> Field -> VkSemaphore
    os << "value: " << t.semaphore << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkSemaphoreImportFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalSemaphoreHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  zirconHandle" << std::endl;
    // zirconHandle -> Field -> zx_handle_t
    os << "value: " << t.zirconHandle << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_FUCHSIA

#ifdef VK_USE_PLATFORM_FUCHSIA
std::ostream &operator<<(std::ostream & os, const VkSemaphoreGetZirconHandleInfoFUCHSIA &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  semaphore" << std::endl;
    // semaphore -> Field -> VkSemaphore
    os << "value: " << t.semaphore << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalSemaphoreHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_FUCHSIA

#ifdef VK_USE_PLATFORM_FUCHSIA
std::ostream &operator<<(std::ostream & os, const VkBufferCollectionCreateInfoFUCHSIA &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  collectionToken" << std::endl;
    // collectionToken -> Field -> zx_handle_t
    os << "value: " << t.collectionToken << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_FUCHSIA

#ifdef VK_USE_PLATFORM_FUCHSIA
std::ostream &operator<<(std::ostream & os, const VkImportMemoryBufferCollectionFUCHSIA &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  collection" << std::endl;
    // collection -> Field -> VkBufferCollectionFUCHSIA
    os << "value: " << t.collection << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  index" << std::endl;
    // index -> Field -> uint32_t
    os << "value: " << t.index << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_FUCHSIA

#ifdef VK_USE_PLATFORM_FUCHSIA
std::ostream &operator<<(std::ostream & os, const VkBufferCollectionImageCreateInfoFUCHSIA &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  collection" << std::endl;
    // collection -> Field -> VkBufferCollectionFUCHSIA
    os << "value: " << t.collection << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  index" << std::endl;
    // index -> Field -> uint32_t
    os << "value: " << t.index << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_FUCHSIA

#ifdef VK_USE_PLATFORM_FUCHSIA
std::ostream &operator<<(std::ostream & os, const VkBufferCollectionConstraintsInfoFUCHSIA &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minBufferCount" << std::endl;
    // minBufferCount -> Field -> uint32_t
    os << "value: " << t.minBufferCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxBufferCount" << std::endl;
    // maxBufferCount -> Field -> uint32_t
    os << "value: " << t.maxBufferCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minBufferCountForCamping" << std::endl;
    // minBufferCountForCamping -> Field -> uint32_t
    os << "value: " << t.minBufferCountForCamping << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minBufferCountForDedicatedSlack" << std::endl;
    // minBufferCountForDedicatedSlack -> Field -> uint32_t
    os << "value: " << t.minBufferCountForDedicatedSlack << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minBufferCountForSharedSlack" << std::endl;
    // minBufferCountForSharedSlack -> Field -> uint32_t
    os << "value: " << t.minBufferCountForSharedSlack << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_FUCHSIA

#ifdef VK_USE_PLATFORM_FUCHSIA
std::ostream &operator<<(std::ostream & os, const VkBufferConstraintsInfoFUCHSIA &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  createInfo" << std::endl;
    // createInfo -> Field -> VkBufferCreateInfo
    os <<  "members:" << std::endl << t.createInfo << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  requiredFormatFeatures" << std::endl;
    // requiredFormatFeatures -> Field -> VkFormatFeatureFlags
    os << "value: " << t.requiredFormatFeatures << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferCollectionConstraints" << std::endl;
    // bufferCollectionConstraints -> Field -> VkBufferCollectionConstraintsInfoFUCHSIA
    os <<  "members:" << std::endl << t.bufferCollectionConstraints << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_FUCHSIA

#ifdef VK_USE_PLATFORM_FUCHSIA
std::ostream &operator<<(std::ostream & os, const VkBufferCollectionBufferCreateInfoFUCHSIA &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  collection" << std::endl;
    // collection -> Field -> VkBufferCollectionFUCHSIA
    os << "value: " << t.collection << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  index" << std::endl;
    // index -> Field -> uint32_t
    os << "value: " << t.index << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_FUCHSIA

#ifdef VK_USE_PLATFORM_FUCHSIA
std::ostream &operator<<(std::ostream & os, const VkSysmemColorSpaceFUCHSIA &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  colorSpace" << std::endl;
    // colorSpace -> Field -> uint32_t
    os << "value: " << t.colorSpace << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_FUCHSIA

#ifdef VK_USE_PLATFORM_FUCHSIA
std::ostream &operator<<(std::ostream & os, const VkBufferCollectionPropertiesFUCHSIA &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryTypeBits" << std::endl;
    // memoryTypeBits -> Field -> uint32_t
    os << "value: " << t.memoryTypeBits << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferCount" << std::endl;
    // bufferCount -> Field -> uint32_t
    os << "value: " << t.bufferCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  createInfoIndex" << std::endl;
    // createInfoIndex -> Field -> uint32_t
    os << "value: " << t.createInfoIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sysmemPixelFormat" << std::endl;
    // sysmemPixelFormat -> Field -> uint64_t
    os << "value: " << t.sysmemPixelFormat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  formatFeatures" << std::endl;
    // formatFeatures -> Field -> VkFormatFeatureFlags
    os << "value: " << t.formatFeatures << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sysmemColorSpaceIndex" << std::endl;
    // sysmemColorSpaceIndex -> Field -> VkSysmemColorSpaceFUCHSIA
    os <<  "members:" << std::endl << t.sysmemColorSpaceIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samplerYcbcrConversionComponents" << std::endl;
    // samplerYcbcrConversionComponents -> Field -> VkComponentMapping
    os <<  "members:" << std::endl << t.samplerYcbcrConversionComponents << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  suggestedYcbcrModel" << std::endl;
    // suggestedYcbcrModel -> Field -> VkSamplerYcbcrModelConversion
    os << "value: " << t.suggestedYcbcrModel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  suggestedYcbcrRange" << std::endl;
    // suggestedYcbcrRange -> Field -> VkSamplerYcbcrRange
    os << "value: " << t.suggestedYcbcrRange << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  suggestedXChromaOffset" << std::endl;
    // suggestedXChromaOffset -> Field -> VkChromaLocation
    os << "value: " << t.suggestedXChromaOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  suggestedYChromaOffset" << std::endl;
    // suggestedYChromaOffset -> Field -> VkChromaLocation
    os << "value: " << t.suggestedYChromaOffset << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_FUCHSIA

#ifdef VK_USE_PLATFORM_FUCHSIA
std::ostream &operator<<(std::ostream & os, const VkImageFormatConstraintsInfoFUCHSIA &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageCreateInfo" << std::endl;
    // imageCreateInfo -> Field -> VkImageCreateInfo
    os <<  "members:" << std::endl << t.imageCreateInfo << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  requiredFormatFeatures" << std::endl;
    // requiredFormatFeatures -> Field -> VkFormatFeatureFlags
    os << "value: " << t.requiredFormatFeatures << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkImageFormatConstraintsFlagsFUCHSIA
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sysmemPixelFormat" << std::endl;
    // sysmemPixelFormat -> Field -> uint64_t
    os << "value: " << t.sysmemPixelFormat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  colorSpaceCount" << std::endl;
    // colorSpaceCount -> Field -> uint32_t
    os << "value: " << t.colorSpaceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pColorSpaces" << std::endl;
    // pColorSpaces -> Field -> ConstDynamicArray(VkSysmemColorSpaceFUCHSIA)
    if (t.colorSpaceCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSysmemColorSpaceFUCHSIA" << std::endl;
        for (uint64_t i = 0; i < t.colorSpaceCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pColorSpaces << std::endl;
        } // for i
      }
    }
  }
  return os;
}
#endif //VK_USE_PLATFORM_FUCHSIA

#ifdef VK_USE_PLATFORM_FUCHSIA
std::ostream &operator<<(std::ostream & os, const VkImageConstraintsInfoFUCHSIA &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  formatConstraintsCount" << std::endl;
    // formatConstraintsCount -> Field -> uint32_t
    os << "value: " << t.formatConstraintsCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pFormatConstraints" << std::endl;
    // pFormatConstraints -> Field -> ConstDynamicArray(VkImageFormatConstraintsInfoFUCHSIA)
    if (t.formatConstraintsCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkImageFormatConstraintsInfoFUCHSIA" << std::endl;
        for (uint64_t i = 0; i < t.formatConstraintsCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pFormatConstraints << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferCollectionConstraints" << std::endl;
    // bufferCollectionConstraints -> Field -> VkBufferCollectionConstraintsInfoFUCHSIA
    os <<  "members:" << std::endl << t.bufferCollectionConstraints << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkImageConstraintsInfoFlagsFUCHSIA
    os << "value: " << t.flags << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_FUCHSIA

std::ostream &operator<<(std::ostream & os, const VkSubpassShadingPipelineCreateInfoHUAWEI &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  renderPass" << std::endl;
    // renderPass -> Field -> VkRenderPass
    os << "value: " << t.renderPass << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subpass" << std::endl;
    // subpass -> Field -> uint32_t
    os << "value: " << t.subpass << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceSubpassShadingFeaturesHUAWEI &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subpassShading" << std::endl;
    // subpassShading -> Field -> VkBool32
    os << "value: " << t.subpassShading << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceSubpassShadingPropertiesHUAWEI &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxSubpassShadingWorkgroupSizeAspectRatio" << std::endl;
    // maxSubpassShadingWorkgroupSizeAspectRatio -> Field -> uint32_t
    os << "value: " << t.maxSubpassShadingWorkgroupSizeAspectRatio << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceInvocationMaskFeaturesHUAWEI &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  invocationMask" << std::endl;
    // invocationMask -> Field -> VkBool32
    os << "value: " << t.invocationMask << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMemoryGetRemoteAddressInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memory" << std::endl;
    // memory -> Field -> VkDeviceMemory
    os << "value: " << t.memory << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  handleType" << std::endl;
    // handleType -> Field -> VkExternalMemoryHandleTypeFlagBits
    os << "value: " << t.handleType << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceExternalMemoryRDMAFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  externalMemoryRDMA" << std::endl;
    // externalMemoryRDMA -> Field -> VkBool32
    os << "value: " << t.externalMemoryRDMA << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelinePropertiesIdentifierEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineIdentifier" << std::endl;
    // pipelineIdentifier -> Field -> FixedArray(uint8_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint8_t" << std::endl;
        for (uint64_t i = 0; i < VK_UUID_SIZE; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pipelineIdentifier << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDevicePipelinePropertiesFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelinePropertiesIdentifier" << std::endl;
    // pipelinePropertiesIdentifier -> Field -> VkBool32
    os << "value: " << t.pipelinePropertiesIdentifier << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multisampledRenderToSingleSampled" << std::endl;
    // multisampledRenderToSingleSampled -> Field -> VkBool32
    os << "value: " << t.multisampledRenderToSingleSampled << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSubpassResolvePerformanceQueryEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  optimal" << std::endl;
    // optimal -> Field -> VkBool32
    os << "value: " << t.optimal << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMultisampledRenderToSingleSampledInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multisampledRenderToSingleSampledEnable" << std::endl;
    // multisampledRenderToSingleSampledEnable -> Field -> VkBool32
    os << "value: " << t.multisampledRenderToSingleSampledEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rasterizationSamples" << std::endl;
    // rasterizationSamples -> Field -> VkSampleCountFlagBits
    os << "value: " << t.rasterizationSamples << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceExtendedDynamicState2FeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState2" << std::endl;
    // extendedDynamicState2 -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState2 << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState2LogicOp" << std::endl;
    // extendedDynamicState2LogicOp -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState2LogicOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState2PatchControlPoints" << std::endl;
    // extendedDynamicState2PatchControlPoints -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState2PatchControlPoints << std::endl;
  }
  return os;
}

#ifdef VK_USE_PLATFORM_SCREEN_QNX
std::ostream &operator<<(std::ostream & os, const VkScreenSurfaceCreateInfoQNX &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkScreenSurfaceCreateFlagsQNX
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  context" << std::endl;
    // pointer
    if (t.context != nullptr) {
      os << "value: *t.context" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  window" << std::endl;
    // pointer
    if (t.window != nullptr) {
      os << "value: *t.window" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}
#endif //VK_USE_PLATFORM_SCREEN_QNX

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceColorWriteEnableFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  colorWriteEnable" << std::endl;
    // colorWriteEnable -> Field -> VkBool32
    os << "value: " << t.colorWriteEnable << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineColorWriteCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentCount" << std::endl;
    // attachmentCount -> Field -> uint32_t
    os << "value: " << t.attachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pColorWriteEnables" << std::endl;
    // pColorWriteEnables -> Field -> ConstDynamicArray(VkBool32)
    if (t.attachmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkBool32" << std::endl;
        for (uint64_t i = 0; i < t.attachmentCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pColorWriteEnables << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primitivesGeneratedQuery" << std::endl;
    // primitivesGeneratedQuery -> Field -> VkBool32
    os << "value: " << t.primitivesGeneratedQuery << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primitivesGeneratedQueryWithRasterizerDiscard" << std::endl;
    // primitivesGeneratedQueryWithRasterizerDiscard -> Field -> VkBool32
    os << "value: " << t.primitivesGeneratedQueryWithRasterizerDiscard << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primitivesGeneratedQueryWithNonZeroStreams" << std::endl;
    // primitivesGeneratedQueryWithNonZeroStreams -> Field -> VkBool32
    os << "value: " << t.primitivesGeneratedQueryWithNonZeroStreams << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceImageViewMinLodFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minLod" << std::endl;
    // minLod -> Field -> VkBool32
    os << "value: " << t.minLod << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageViewMinLodCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minLod" << std::endl;
    // minLod -> Field -> float
    os << "value: " << t.minLod << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceMultiDrawFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multiDraw" << std::endl;
    // multiDraw -> Field -> VkBool32
    os << "value: " << t.multiDraw << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceMultiDrawPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMultiDrawCount" << std::endl;
    // maxMultiDrawCount -> Field -> uint32_t
    os << "value: " << t.maxMultiDrawCount << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMultiDrawInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstVertex" << std::endl;
    // firstVertex -> Field -> uint32_t
    os << "value: " << t.firstVertex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexCount" << std::endl;
    // vertexCount -> Field -> uint32_t
    os << "value: " << t.vertexCount << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMultiDrawIndexedInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstIndex" << std::endl;
    // firstIndex -> Field -> uint32_t
    os << "value: " << t.firstIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexCount" << std::endl;
    // indexCount -> Field -> uint32_t
    os << "value: " << t.indexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexOffset" << std::endl;
    // vertexOffset -> Field -> int32_t
    os << "value: " << t.vertexOffset << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceImage2DViewOf3DFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image2DViewOf3D" << std::endl;
    // image2DViewOf3D -> Field -> VkBool32
    os << "value: " << t.image2DViewOf3D << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampler2DViewOf3D" << std::endl;
    // sampler2DViewOf3D -> Field -> VkBool32
    os << "value: " << t.sampler2DViewOf3D << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderTileImageFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderTileImageColorReadAccess" << std::endl;
    // shaderTileImageColorReadAccess -> Field -> VkBool32
    os << "value: " << t.shaderTileImageColorReadAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderTileImageDepthReadAccess" << std::endl;
    // shaderTileImageDepthReadAccess -> Field -> VkBool32
    os << "value: " << t.shaderTileImageDepthReadAccess << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderTileImageStencilReadAccess" << std::endl;
    // shaderTileImageStencilReadAccess -> Field -> VkBool32
    os << "value: " << t.shaderTileImageStencilReadAccess << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderTileImagePropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderTileImageCoherentReadAccelerated" << std::endl;
    // shaderTileImageCoherentReadAccelerated -> Field -> VkBool32
    os << "value: " << t.shaderTileImageCoherentReadAccelerated << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderTileImageReadSampleFromPixelRateInvocation" << std::endl;
    // shaderTileImageReadSampleFromPixelRateInvocation -> Field -> VkBool32
    os << "value: " << t.shaderTileImageReadSampleFromPixelRateInvocation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderTileImageReadFromHelperInvocation" << std::endl;
    // shaderTileImageReadFromHelperInvocation -> Field -> VkBool32
    os << "value: " << t.shaderTileImageReadFromHelperInvocation << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMicromapUsageEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  count" << std::endl;
    // count -> Field -> uint32_t
    os << "value: " << t.count << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subdivisionLevel" << std::endl;
    // subdivisionLevel -> Field -> uint32_t
    os << "value: " << t.subdivisionLevel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> uint32_t
    os << "value: " << t.format << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDeviceOrHostAddressKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceAddress" << std::endl;
    // deviceAddress -> Field -> VkDeviceAddress
    os << "value: " << t.deviceAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hostAddress" << std::endl;
    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMicromapBuildInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  type" << std::endl;
    // type -> Field -> VkMicromapTypeEXT
    os << "value: " << t.type << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkBuildMicromapFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mode" << std::endl;
    // mode -> Field -> VkBuildMicromapModeEXT
    os << "value: " << t.mode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstMicromap" << std::endl;
    // dstMicromap -> Field -> VkMicromapEXT
    os << "value: " << t.dstMicromap << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  usageCountsCount" << std::endl;
    // usageCountsCount -> Field -> uint32_t
    os << "value: " << t.usageCountsCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pUsageCounts" << std::endl;
    // pUsageCounts -> Field -> ConstDynamicArray(VkMicromapUsageEXT)
    if (t.usageCountsCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkMicromapUsageEXT" << std::endl;
        for (uint64_t i = 0; i < t.usageCountsCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pUsageCounts << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ppUsageCounts" << std::endl;
    // ppUsageCounts -> Field -> ConstDynamicArray(VkMicromapUsageEXT)
    if (t.usageCountsCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkMicromapUsageEXT" << std::endl;
        for (uint64_t i = 0; i < t.usageCountsCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << *(t.ppUsageCounts) << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  data" << std::endl;
    // data -> Field -> VkDeviceOrHostAddressConstKHR
    os <<  "members:" << std::endl << t.data << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  scratchData" << std::endl;
    // scratchData -> Field -> VkDeviceOrHostAddressKHR
    os <<  "members:" << std::endl << t.scratchData << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  triangleArray" << std::endl;
    // triangleArray -> Field -> VkDeviceOrHostAddressConstKHR
    os <<  "members:" << std::endl << t.triangleArray << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  triangleArrayStride" << std::endl;
    // triangleArrayStride -> Field -> VkDeviceSize
    os << "value: " << t.triangleArrayStride << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMicromapCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  createFlags" << std::endl;
    // createFlags -> Field -> VkMicromapCreateFlagsEXT
    os << "value: " << t.createFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  type" << std::endl;
    // type -> Field -> VkMicromapTypeEXT
    os << "value: " << t.type << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceAddress" << std::endl;
    // deviceAddress -> Field -> VkDeviceAddress
    os << "value: " << t.deviceAddress << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceOpacityMicromapFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  micromap" << std::endl;
    // micromap -> Field -> VkBool32
    os << "value: " << t.micromap << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  micromapCaptureReplay" << std::endl;
    // micromapCaptureReplay -> Field -> VkBool32
    os << "value: " << t.micromapCaptureReplay << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  micromapHostCommands" << std::endl;
    // micromapHostCommands -> Field -> VkBool32
    os << "value: " << t.micromapHostCommands << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceOpacityMicromapPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxOpacity2StateSubdivisionLevel" << std::endl;
    // maxOpacity2StateSubdivisionLevel -> Field -> uint32_t
    os << "value: " << t.maxOpacity2StateSubdivisionLevel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxOpacity4StateSubdivisionLevel" << std::endl;
    // maxOpacity4StateSubdivisionLevel -> Field -> uint32_t
    os << "value: " << t.maxOpacity4StateSubdivisionLevel << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMicromapVersionInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pVersionData" << std::endl;
    // pVersionData -> Field -> ConstDynamicArray(uint8_t)
    if ((2*VK_UUID_SIZE) == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint8_t" << std::endl;
        for (uint64_t i = 0; i < (2*VK_UUID_SIZE); ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pVersionData << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCopyMicromapToMemoryInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  src" << std::endl;
    // src -> Field -> VkMicromapEXT
    os << "value: " << t.src << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dst" << std::endl;
    // dst -> Field -> VkDeviceOrHostAddressKHR
    os <<  "members:" << std::endl << t.dst << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mode" << std::endl;
    // mode -> Field -> VkCopyMicromapModeEXT
    os << "value: " << t.mode << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCopyMemoryToMicromapInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  src" << std::endl;
    // src -> Field -> VkDeviceOrHostAddressConstKHR
    os <<  "members:" << std::endl << t.src << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dst" << std::endl;
    // dst -> Field -> VkMicromapEXT
    os << "value: " << t.dst << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mode" << std::endl;
    // mode -> Field -> VkCopyMicromapModeEXT
    os << "value: " << t.mode << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCopyMicromapInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  src" << std::endl;
    // src -> Field -> VkMicromapEXT
    os << "value: " << t.src << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dst" << std::endl;
    // dst -> Field -> VkMicromapEXT
    os << "value: " << t.dst << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mode" << std::endl;
    // mode -> Field -> VkCopyMicromapModeEXT
    os << "value: " << t.mode << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMicromapBuildSizesInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  micromapSize" << std::endl;
    // micromapSize -> Field -> VkDeviceSize
    os << "value: " << t.micromapSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buildScratchSize" << std::endl;
    // buildScratchSize -> Field -> VkDeviceSize
    os << "value: " << t.buildScratchSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  discardable" << std::endl;
    // discardable -> Field -> VkBool32
    os << "value: " << t.discardable << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureTrianglesOpacityMicromapEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexType" << std::endl;
    // indexType -> Field -> VkIndexType
    os << "value: " << t.indexType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexBuffer" << std::endl;
    // indexBuffer -> Field -> VkDeviceOrHostAddressConstKHR
    os <<  "members:" << std::endl << t.indexBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexStride" << std::endl;
    // indexStride -> Field -> VkDeviceSize
    os << "value: " << t.indexStride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  baseTriangle" << std::endl;
    // baseTriangle -> Field -> uint32_t
    os << "value: " << t.baseTriangle << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  usageCountsCount" << std::endl;
    // usageCountsCount -> Field -> uint32_t
    os << "value: " << t.usageCountsCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pUsageCounts" << std::endl;
    // pUsageCounts -> Field -> ConstDynamicArray(VkMicromapUsageEXT)
    if (t.usageCountsCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkMicromapUsageEXT" << std::endl;
        for (uint64_t i = 0; i < t.usageCountsCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pUsageCounts << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ppUsageCounts" << std::endl;
    // ppUsageCounts -> Field -> ConstDynamicArray(VkMicromapUsageEXT)
    if (t.usageCountsCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkMicromapUsageEXT" << std::endl;
        for (uint64_t i = 0; i < t.usageCountsCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << *(t.ppUsageCounts) << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  micromap" << std::endl;
    // micromap -> Field -> VkMicromapEXT
    os << "value: " << t.micromap << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMicromapTriangleEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dataOffset" << std::endl;
    // dataOffset -> Field -> uint32_t
    os << "value: " << t.dataOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subdivisionLevel" << std::endl;
    // subdivisionLevel -> Field -> uint16_t
    os << "value: " << t.subdivisionLevel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> uint16_t
    os << "value: " << t.format << std::endl;
  }
  return os;
}

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceDisplacementMicromapFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displacementMicromap" << std::endl;
    // displacementMicromap -> Field -> VkBool32
    os << "value: " << t.displacementMicromap << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceDisplacementMicromapPropertiesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDisplacementMicromapSubdivisionLevel" << std::endl;
    // maxDisplacementMicromapSubdivisionLevel -> Field -> uint32_t
    os << "value: " << t.maxDisplacementMicromapSubdivisionLevel << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

#ifdef VK_ENABLE_BETA_EXTENSIONS
std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureTrianglesDisplacementMicromapNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displacementBiasAndScaleFormat" << std::endl;
    // displacementBiasAndScaleFormat -> Field -> VkFormat
    os << "value: " << t.displacementBiasAndScaleFormat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displacementVectorFormat" << std::endl;
    // displacementVectorFormat -> Field -> VkFormat
    os << "value: " << t.displacementVectorFormat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displacementBiasAndScaleBuffer" << std::endl;
    // displacementBiasAndScaleBuffer -> Field -> VkDeviceOrHostAddressConstKHR
    os <<  "members:" << std::endl << t.displacementBiasAndScaleBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displacementBiasAndScaleStride" << std::endl;
    // displacementBiasAndScaleStride -> Field -> VkDeviceSize
    os << "value: " << t.displacementBiasAndScaleStride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displacementVectorBuffer" << std::endl;
    // displacementVectorBuffer -> Field -> VkDeviceOrHostAddressConstKHR
    os <<  "members:" << std::endl << t.displacementVectorBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displacementVectorStride" << std::endl;
    // displacementVectorStride -> Field -> VkDeviceSize
    os << "value: " << t.displacementVectorStride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displacedMicromapPrimitiveFlags" << std::endl;
    // displacedMicromapPrimitiveFlags -> Field -> VkDeviceOrHostAddressConstKHR
    os <<  "members:" << std::endl << t.displacedMicromapPrimitiveFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  displacedMicromapPrimitiveFlagsStride" << std::endl;
    // displacedMicromapPrimitiveFlagsStride -> Field -> VkDeviceSize
    os << "value: " << t.displacedMicromapPrimitiveFlagsStride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexType" << std::endl;
    // indexType -> Field -> VkIndexType
    os << "value: " << t.indexType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexBuffer" << std::endl;
    // indexBuffer -> Field -> VkDeviceOrHostAddressConstKHR
    os <<  "members:" << std::endl << t.indexBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexStride" << std::endl;
    // indexStride -> Field -> VkDeviceSize
    os << "value: " << t.indexStride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  baseTriangle" << std::endl;
    // baseTriangle -> Field -> uint32_t
    os << "value: " << t.baseTriangle << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  usageCountsCount" << std::endl;
    // usageCountsCount -> Field -> uint32_t
    os << "value: " << t.usageCountsCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pUsageCounts" << std::endl;
    // pUsageCounts -> Field -> ConstDynamicArray(VkMicromapUsageEXT)
    if (t.usageCountsCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkMicromapUsageEXT" << std::endl;
        for (uint64_t i = 0; i < t.usageCountsCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pUsageCounts << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ppUsageCounts" << std::endl;
    // ppUsageCounts -> Field -> ConstDynamicArray(VkMicromapUsageEXT)
    if (t.usageCountsCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkMicromapUsageEXT" << std::endl;
        for (uint64_t i = 0; i < t.usageCountsCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << *(t.ppUsageCounts) << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  micromap" << std::endl;
    // micromap -> Field -> VkMicromapEXT
    os << "value: " << t.micromap << std::endl;
  }
  return os;
}
#endif //VK_ENABLE_BETA_EXTENSIONS

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  clustercullingShader" << std::endl;
    // clustercullingShader -> Field -> VkBool32
    os << "value: " << t.clustercullingShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multiviewClusterCullingShader" << std::endl;
    // multiviewClusterCullingShader -> Field -> VkBool32
    os << "value: " << t.multiviewClusterCullingShader << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxWorkGroupCount" << std::endl;
    // maxWorkGroupCount -> Field -> FixedArray(uint32_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < 3; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.maxWorkGroupCount << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxWorkGroupSize" << std::endl;
    // maxWorkGroupSize -> Field -> FixedArray(uint32_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < 3; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.maxWorkGroupSize << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxOutputClusterCount" << std::endl;
    // maxOutputClusterCount -> Field -> uint32_t
    os << "value: " << t.maxOutputClusterCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indirectBufferOffsetAlignment" << std::endl;
    // indirectBufferOffsetAlignment -> Field -> VkDeviceSize
    os << "value: " << t.indirectBufferOffsetAlignment << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceBorderColorSwizzleFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  borderColorSwizzle" << std::endl;
    // borderColorSwizzle -> Field -> VkBool32
    os << "value: " << t.borderColorSwizzle << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  borderColorSwizzleFromImage" << std::endl;
    // borderColorSwizzleFromImage -> Field -> VkBool32
    os << "value: " << t.borderColorSwizzleFromImage << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSamplerBorderColorComponentMappingCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  components" << std::endl;
    // components -> Field -> VkComponentMapping
    os <<  "members:" << std::endl << t.components << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srgb" << std::endl;
    // srgb -> Field -> VkBool32
    os << "value: " << t.srgb << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pageableDeviceLocalMemory" << std::endl;
    // pageableDeviceLocalMemory -> Field -> VkBool32
    os << "value: " << t.pageableDeviceLocalMemory << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderCorePropertiesARM &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pixelRate" << std::endl;
    // pixelRate -> Field -> uint32_t
    os << "value: " << t.pixelRate << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  texelRate" << std::endl;
    // texelRate -> Field -> uint32_t
    os << "value: " << t.texelRate << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fmaRate" << std::endl;
    // fmaRate -> Field -> uint32_t
    os << "value: " << t.fmaRate << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageSlicedViewOf3D" << std::endl;
    // imageSlicedViewOf3D -> Field -> VkBool32
    os << "value: " << t.imageSlicedViewOf3D << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageViewSlicedCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sliceOffset" << std::endl;
    // sliceOffset -> Field -> uint32_t
    os << "value: " << t.sliceOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sliceCount" << std::endl;
    // sliceCount -> Field -> uint32_t
    os << "value: " << t.sliceCount << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorSetHostMapping" << std::endl;
    // descriptorSetHostMapping -> Field -> VkBool32
    os << "value: " << t.descriptorSetHostMapping << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDescriptorSetBindingReferenceVALVE &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorSetLayout" << std::endl;
    // descriptorSetLayout -> Field -> VkDescriptorSetLayout
    os << "value: " << t.descriptorSetLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  binding" << std::endl;
    // binding -> Field -> uint32_t
    os << "value: " << t.binding << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDescriptorSetLayoutHostMappingInfoVALVE &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorOffset" << std::endl;
    // descriptorOffset -> Field -> size_t
    os << "value: " << t.descriptorOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorSize" << std::endl;
    // descriptorSize -> Field -> uint32_t
    os << "value: " << t.descriptorSize << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceDepthClampZeroOneFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthClampZeroOne" << std::endl;
    // depthClampZeroOne -> Field -> VkBool32
    os << "value: " << t.depthClampZeroOne << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  nonSeamlessCubeMap" << std::endl;
    // nonSeamlessCubeMap -> Field -> VkBool32
    os << "value: " << t.nonSeamlessCubeMap << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentDensityMapOffset" << std::endl;
    // fragmentDensityMapOffset -> Field -> VkBool32
    os << "value: " << t.fragmentDensityMapOffset << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentDensityOffsetGranularity" << std::endl;
    // fragmentDensityOffsetGranularity -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.fragmentDensityOffsetGranularity << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkSubpassFragmentDensityMapOffsetEndInfoQCOM &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  fragmentDensityOffsetCount" << std::endl;
    // fragmentDensityOffsetCount -> Field -> uint32_t
    os << "value: " << t.fragmentDensityOffsetCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pFragmentDensityOffsets" << std::endl;
    // pFragmentDensityOffsets -> Field -> ConstDynamicArray(VkOffset2D)
    if (t.fragmentDensityOffsetCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkOffset2D" << std::endl;
        for (uint64_t i = 0; i < t.fragmentDensityOffsetCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pFragmentDensityOffsets << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCopyMemoryIndirectCommandNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcAddress" << std::endl;
    // srcAddress -> Field -> VkDeviceAddress
    os << "value: " << t.srcAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstAddress" << std::endl;
    // dstAddress -> Field -> VkDeviceAddress
    os << "value: " << t.dstAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCopyMemoryToImageIndirectCommandNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcAddress" << std::endl;
    // srcAddress -> Field -> VkDeviceAddress
    os << "value: " << t.srcAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferRowLength" << std::endl;
    // bufferRowLength -> Field -> uint32_t
    os << "value: " << t.bufferRowLength << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferImageHeight" << std::endl;
    // bufferImageHeight -> Field -> uint32_t
    os << "value: " << t.bufferImageHeight << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageSubresource" << std::endl;
    // imageSubresource -> Field -> VkImageSubresourceLayers
    os <<  "members:" << std::endl << t.imageSubresource << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageOffset" << std::endl;
    // imageOffset -> Field -> VkOffset3D
    os <<  "members:" << std::endl << t.imageOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageExtent" << std::endl;
    // imageExtent -> Field -> VkExtent3D
    os <<  "members:" << std::endl << t.imageExtent << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceCopyMemoryIndirectFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indirectCopy" << std::endl;
    // indirectCopy -> Field -> VkBool32
    os << "value: " << t.indirectCopy << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceCopyMemoryIndirectPropertiesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedQueues" << std::endl;
    // supportedQueues -> Field -> VkQueueFlags
    os << "value: " << t.supportedQueues << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDecompressMemoryRegionNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcAddress" << std::endl;
    // srcAddress -> Field -> VkDeviceAddress
    os << "value: " << t.srcAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstAddress" << std::endl;
    // dstAddress -> Field -> VkDeviceAddress
    os << "value: " << t.dstAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compressedSize" << std::endl;
    // compressedSize -> Field -> VkDeviceSize
    os << "value: " << t.compressedSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  decompressedSize" << std::endl;
    // decompressedSize -> Field -> VkDeviceSize
    os << "value: " << t.decompressedSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  decompressionMethod" << std::endl;
    // decompressionMethod -> Field -> VkMemoryDecompressionMethodFlagsNV
    os << "value: " << t.decompressionMethod << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceMemoryDecompressionFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryDecompression" << std::endl;
    // memoryDecompression -> Field -> VkBool32
    os << "value: " << t.memoryDecompression << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceMemoryDecompressionPropertiesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  decompressionMethods" << std::endl;
    // decompressionMethods -> Field -> VkMemoryDecompressionMethodFlagsNV
    os << "value: " << t.decompressionMethods << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDecompressionIndirectCount" << std::endl;
    // maxDecompressionIndirectCount -> Field -> uint64_t
    os << "value: " << t.maxDecompressionIndirectCount << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceGeneratedCompute" << std::endl;
    // deviceGeneratedCompute -> Field -> VkBool32
    os << "value: " << t.deviceGeneratedCompute << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceGeneratedComputePipelines" << std::endl;
    // deviceGeneratedComputePipelines -> Field -> VkBool32
    os << "value: " << t.deviceGeneratedComputePipelines << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceGeneratedComputeCaptureReplay" << std::endl;
    // deviceGeneratedComputeCaptureReplay -> Field -> VkBool32
    os << "value: " << t.deviceGeneratedComputeCaptureReplay << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkComputePipelineIndirectBufferInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceAddress" << std::endl;
    // deviceAddress -> Field -> VkDeviceAddress
    os << "value: " << t.deviceAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineDeviceAddressCaptureReplay" << std::endl;
    // pipelineDeviceAddressCaptureReplay -> Field -> VkDeviceAddress
    os << "value: " << t.pipelineDeviceAddressCaptureReplay << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineIndirectDeviceAddressInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineBindPoint" << std::endl;
    // pipelineBindPoint -> Field -> VkPipelineBindPoint
    os << "value: " << t.pipelineBindPoint << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipeline" << std::endl;
    // pipeline -> Field -> VkPipeline
    os << "value: " << t.pipeline << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkBindPipelineIndirectCommandNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineAddress" << std::endl;
    // pipelineAddress -> Field -> VkDeviceAddress
    os << "value: " << t.pipelineAddress << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceLinearColorAttachmentFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  linearColorAttachment" << std::endl;
    // linearColorAttachment -> Field -> VkBool32
    os << "value: " << t.linearColorAttachment << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageCompressionControlSwapchain" << std::endl;
    // imageCompressionControlSwapchain -> Field -> VkBool32
    os << "value: " << t.imageCompressionControlSwapchain << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkImageViewSampleWeightCreateInfoQCOM &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  filterCenter" << std::endl;
    // filterCenter -> Field -> VkOffset2D
    os <<  "members:" << std::endl << t.filterCenter << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  filterSize" << std::endl;
    // filterSize -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.filterSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  numPhases" << std::endl;
    // numPhases -> Field -> uint32_t
    os << "value: " << t.numPhases << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceImageProcessingFeaturesQCOM &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  textureSampleWeighted" << std::endl;
    // textureSampleWeighted -> Field -> VkBool32
    os << "value: " << t.textureSampleWeighted << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  textureBoxFilter" << std::endl;
    // textureBoxFilter -> Field -> VkBool32
    os << "value: " << t.textureBoxFilter << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  textureBlockMatch" << std::endl;
    // textureBlockMatch -> Field -> VkBool32
    os << "value: " << t.textureBlockMatch << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceImageProcessingPropertiesQCOM &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxWeightFilterPhases" << std::endl;
    // maxWeightFilterPhases -> Field -> uint32_t
    os << "value: " << t.maxWeightFilterPhases << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxWeightFilterDimension" << std::endl;
    // maxWeightFilterDimension -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.maxWeightFilterDimension << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxBlockMatchRegion" << std::endl;
    // maxBlockMatchRegion -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.maxBlockMatchRegion << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxBoxFilterBlockSize" << std::endl;
    // maxBoxFilterBlockSize -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.maxBoxFilterBlockSize << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkExternalMemoryAcquireUnmodifiedEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  acquireUnmodifiedMemory" << std::endl;
    // acquireUnmodifiedMemory -> Field -> VkBool32
    os << "value: " << t.acquireUnmodifiedMemory << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceExtendedDynamicState3FeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3TessellationDomainOrigin" << std::endl;
    // extendedDynamicState3TessellationDomainOrigin -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3TessellationDomainOrigin << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3DepthClampEnable" << std::endl;
    // extendedDynamicState3DepthClampEnable -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3DepthClampEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3PolygonMode" << std::endl;
    // extendedDynamicState3PolygonMode -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3PolygonMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3RasterizationSamples" << std::endl;
    // extendedDynamicState3RasterizationSamples -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3RasterizationSamples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3SampleMask" << std::endl;
    // extendedDynamicState3SampleMask -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3SampleMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3AlphaToCoverageEnable" << std::endl;
    // extendedDynamicState3AlphaToCoverageEnable -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3AlphaToCoverageEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3AlphaToOneEnable" << std::endl;
    // extendedDynamicState3AlphaToOneEnable -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3AlphaToOneEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3LogicOpEnable" << std::endl;
    // extendedDynamicState3LogicOpEnable -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3LogicOpEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3ColorBlendEnable" << std::endl;
    // extendedDynamicState3ColorBlendEnable -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3ColorBlendEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3ColorBlendEquation" << std::endl;
    // extendedDynamicState3ColorBlendEquation -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3ColorBlendEquation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3ColorWriteMask" << std::endl;
    // extendedDynamicState3ColorWriteMask -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3ColorWriteMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3RasterizationStream" << std::endl;
    // extendedDynamicState3RasterizationStream -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3RasterizationStream << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3ConservativeRasterizationMode" << std::endl;
    // extendedDynamicState3ConservativeRasterizationMode -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3ConservativeRasterizationMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3ExtraPrimitiveOverestimationSize" << std::endl;
    // extendedDynamicState3ExtraPrimitiveOverestimationSize -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3ExtraPrimitiveOverestimationSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3DepthClipEnable" << std::endl;
    // extendedDynamicState3DepthClipEnable -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3DepthClipEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3SampleLocationsEnable" << std::endl;
    // extendedDynamicState3SampleLocationsEnable -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3SampleLocationsEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3ColorBlendAdvanced" << std::endl;
    // extendedDynamicState3ColorBlendAdvanced -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3ColorBlendAdvanced << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3ProvokingVertexMode" << std::endl;
    // extendedDynamicState3ProvokingVertexMode -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3ProvokingVertexMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3LineRasterizationMode" << std::endl;
    // extendedDynamicState3LineRasterizationMode -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3LineRasterizationMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3LineStippleEnable" << std::endl;
    // extendedDynamicState3LineStippleEnable -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3LineStippleEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3DepthClipNegativeOneToOne" << std::endl;
    // extendedDynamicState3DepthClipNegativeOneToOne -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3DepthClipNegativeOneToOne << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3ViewportWScalingEnable" << std::endl;
    // extendedDynamicState3ViewportWScalingEnable -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3ViewportWScalingEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3ViewportSwizzle" << std::endl;
    // extendedDynamicState3ViewportSwizzle -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3ViewportSwizzle << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3CoverageToColorEnable" << std::endl;
    // extendedDynamicState3CoverageToColorEnable -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3CoverageToColorEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3CoverageToColorLocation" << std::endl;
    // extendedDynamicState3CoverageToColorLocation -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3CoverageToColorLocation << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3CoverageModulationMode" << std::endl;
    // extendedDynamicState3CoverageModulationMode -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3CoverageModulationMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3CoverageModulationTableEnable" << std::endl;
    // extendedDynamicState3CoverageModulationTableEnable -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3CoverageModulationTableEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3CoverageModulationTable" << std::endl;
    // extendedDynamicState3CoverageModulationTable -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3CoverageModulationTable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3CoverageReductionMode" << std::endl;
    // extendedDynamicState3CoverageReductionMode -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3CoverageReductionMode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3RepresentativeFragmentTestEnable" << std::endl;
    // extendedDynamicState3RepresentativeFragmentTestEnable -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3RepresentativeFragmentTestEnable << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extendedDynamicState3ShadingRateImageEnable" << std::endl;
    // extendedDynamicState3ShadingRateImageEnable -> Field -> VkBool32
    os << "value: " << t.extendedDynamicState3ShadingRateImageEnable << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceExtendedDynamicState3PropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dynamicPrimitiveTopologyUnrestricted" << std::endl;
    // dynamicPrimitiveTopologyUnrestricted -> Field -> VkBool32
    os << "value: " << t.dynamicPrimitiveTopologyUnrestricted << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkColorBlendEquationEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcColorBlendFactor" << std::endl;
    // srcColorBlendFactor -> Field -> VkBlendFactor
    os << "value: " << t.srcColorBlendFactor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstColorBlendFactor" << std::endl;
    // dstColorBlendFactor -> Field -> VkBlendFactor
    os << "value: " << t.dstColorBlendFactor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  colorBlendOp" << std::endl;
    // colorBlendOp -> Field -> VkBlendOp
    os << "value: " << t.colorBlendOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcAlphaBlendFactor" << std::endl;
    // srcAlphaBlendFactor -> Field -> VkBlendFactor
    os << "value: " << t.srcAlphaBlendFactor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstAlphaBlendFactor" << std::endl;
    // dstAlphaBlendFactor -> Field -> VkBlendFactor
    os << "value: " << t.dstAlphaBlendFactor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  alphaBlendOp" << std::endl;
    // alphaBlendOp -> Field -> VkBlendOp
    os << "value: " << t.alphaBlendOp << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkColorBlendAdvancedEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  advancedBlendOp" << std::endl;
    // advancedBlendOp -> Field -> VkBlendOp
    os << "value: " << t.advancedBlendOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcPremultiplied" << std::endl;
    // srcPremultiplied -> Field -> VkBool32
    os << "value: " << t.srcPremultiplied << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstPremultiplied" << std::endl;
    // dstPremultiplied -> Field -> VkBool32
    os << "value: " << t.dstPremultiplied << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  blendOverlap" << std::endl;
    // blendOverlap -> Field -> VkBlendOverlapEXT
    os << "value: " << t.blendOverlap << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  clampResults" << std::endl;
    // clampResults -> Field -> VkBool32
    os << "value: " << t.clampResults << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subpassMergeFeedback" << std::endl;
    // subpassMergeFeedback -> Field -> VkBool32
    os << "value: " << t.subpassMergeFeedback << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRenderPassCreationControlEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  disallowMerging" << std::endl;
    // disallowMerging -> Field -> VkBool32
    os << "value: " << t.disallowMerging << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRenderPassCreationFeedbackInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  postMergeSubpassCount" << std::endl;
    // postMergeSubpassCount -> Field -> uint32_t
    os << "value: " << t.postMergeSubpassCount << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRenderPassCreationFeedbackCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRenderPassFeedback" << std::endl;
    // pointer
    if (t.pRenderPassFeedback != nullptr) {
      os <<  "members:" << std::endl << *t.pRenderPassFeedback << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRenderPassSubpassFeedbackInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  subpassMergeStatus" << std::endl;
    // subpassMergeStatus -> Field -> VkSubpassMergeStatusEXT
    os << "value: " << t.subpassMergeStatus << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  description" << std::endl;
    // description -> Field -> FixedArray(char)
    os << "value: " << t.description << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  postMergeIndex" << std::endl;
    // postMergeIndex -> Field -> uint32_t
    os << "value: " << t.postMergeIndex << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRenderPassSubpassFeedbackCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSubpassFeedback" << std::endl;
    // pointer
    if (t.pSubpassFeedback != nullptr) {
      os <<  "members:" << std::endl << *t.pSubpassFeedback << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDirectDriverLoadingInfoLUNARG &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkDirectDriverLoadingFlagsLUNARG
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pfnGetInstanceProcAddr" << std::endl;
    // pointer
    if (t.pfnGetInstanceProcAddr != nullptr) {
      os << "value: *t.pfnGetInstanceProcAddr" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDirectDriverLoadingListLUNARG &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mode" << std::endl;
    // mode -> Field -> VkDirectDriverLoadingModeLUNARG
    os << "value: " << t.mode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  driverCount" << std::endl;
    // driverCount -> Field -> uint32_t
    os << "value: " << t.driverCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDrivers" << std::endl;
    // pDrivers -> Field -> ConstDynamicArray(VkDirectDriverLoadingInfoLUNARG)
    if (t.driverCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDirectDriverLoadingInfoLUNARG" << std::endl;
        for (uint64_t i = 0; i < t.driverCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pDrivers << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderModuleIdentifier" << std::endl;
    // shaderModuleIdentifier -> Field -> VkBool32
    os << "value: " << t.shaderModuleIdentifier << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderModuleIdentifierAlgorithmUUID" << std::endl;
    // shaderModuleIdentifierAlgorithmUUID -> Field -> FixedArray(uint8_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint8_t" << std::endl;
        for (uint64_t i = 0; i < VK_UUID_SIZE; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.shaderModuleIdentifierAlgorithmUUID << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPipelineShaderStageModuleIdentifierCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  identifierSize" << std::endl;
    // identifierSize -> Field -> uint32_t
    os << "value: " << t.identifierSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pIdentifier" << std::endl;
    // pIdentifier -> Field -> ConstDynamicArray(uint8_t)
    if (t.identifierSize == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint8_t" << std::endl;
        for (uint64_t i = 0; i < t.identifierSize; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pIdentifier << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkShaderModuleIdentifierEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  identifierSize" << std::endl;
    // identifierSize -> Field -> uint32_t
    os << "value: " << t.identifierSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  identifier" << std::endl;
    // identifier -> Field -> FixedArray(uint8_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint8_t" << std::endl;
        for (uint64_t i = 0; i < VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.identifier << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceOpticalFlowFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  opticalFlow" << std::endl;
    // opticalFlow -> Field -> VkBool32
    os << "value: " << t.opticalFlow << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceOpticalFlowPropertiesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedOutputGridSizes" << std::endl;
    // supportedOutputGridSizes -> Field -> VkOpticalFlowGridSizeFlagsNV
    os << "value: " << t.supportedOutputGridSizes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  supportedHintGridSizes" << std::endl;
    // supportedHintGridSizes -> Field -> VkOpticalFlowGridSizeFlagsNV
    os << "value: " << t.supportedHintGridSizes << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hintSupported" << std::endl;
    // hintSupported -> Field -> VkBool32
    os << "value: " << t.hintSupported << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  costSupported" << std::endl;
    // costSupported -> Field -> VkBool32
    os << "value: " << t.costSupported << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bidirectionalFlowSupported" << std::endl;
    // bidirectionalFlowSupported -> Field -> VkBool32
    os << "value: " << t.bidirectionalFlowSupported << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  globalFlowSupported" << std::endl;
    // globalFlowSupported -> Field -> VkBool32
    os << "value: " << t.globalFlowSupported << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minWidth" << std::endl;
    // minWidth -> Field -> uint32_t
    os << "value: " << t.minWidth << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minHeight" << std::endl;
    // minHeight -> Field -> uint32_t
    os << "value: " << t.minHeight << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxWidth" << std::endl;
    // maxWidth -> Field -> uint32_t
    os << "value: " << t.maxWidth << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxHeight" << std::endl;
    // maxHeight -> Field -> uint32_t
    os << "value: " << t.maxHeight << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxNumRegionsOfInterest" << std::endl;
    // maxNumRegionsOfInterest -> Field -> uint32_t
    os << "value: " << t.maxNumRegionsOfInterest << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkOpticalFlowImageFormatInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  usage" << std::endl;
    // usage -> Field -> VkOpticalFlowUsageFlagsNV
    os << "value: " << t.usage << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkOpticalFlowImageFormatPropertiesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkOpticalFlowSessionCreateInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  width" << std::endl;
    // width -> Field -> uint32_t
    os << "value: " << t.width << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  height" << std::endl;
    // height -> Field -> uint32_t
    os << "value: " << t.height << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageFormat" << std::endl;
    // imageFormat -> Field -> VkFormat
    os << "value: " << t.imageFormat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flowVectorFormat" << std::endl;
    // flowVectorFormat -> Field -> VkFormat
    os << "value: " << t.flowVectorFormat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  costFormat" << std::endl;
    // costFormat -> Field -> VkFormat
    os << "value: " << t.costFormat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  outputGridSize" << std::endl;
    // outputGridSize -> Field -> VkOpticalFlowGridSizeFlagsNV
    os << "value: " << t.outputGridSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hintGridSize" << std::endl;
    // hintGridSize -> Field -> VkOpticalFlowGridSizeFlagsNV
    os << "value: " << t.hintGridSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  performanceLevel" << std::endl;
    // performanceLevel -> Field -> VkOpticalFlowPerformanceLevelNV
    os << "value: " << t.performanceLevel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkOpticalFlowSessionCreateFlagsNV
    os << "value: " << t.flags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkOpticalFlowSessionCreatePrivateDataInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  id" << std::endl;
    // id -> Field -> uint32_t
    os << "value: " << t.id << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> uint32_t
    os << "value: " << t.size << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPrivateData" << std::endl;
    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkOpticalFlowExecuteInfoNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkOpticalFlowExecuteFlagsNV
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << t.regionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkRect2D)
    if (t.regionCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkRect2D" << std::endl;
        for (uint64_t i = 0; i < t.regionCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pRegions << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceLegacyDitheringFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  legacyDithering" << std::endl;
    // legacyDithering -> Field -> VkBool32
    os << "value: " << t.legacyDithering << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDevicePipelineProtectedAccessFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineProtectedAccess" << std::endl;
    // pipelineProtectedAccess -> Field -> VkBool32
    os << "value: " << t.pipelineProtectedAccess << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderObjectFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderObject" << std::endl;
    // shaderObject -> Field -> VkBool32
    os << "value: " << t.shaderObject << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderObjectPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderBinaryUUID" << std::endl;
    // shaderBinaryUUID -> Field -> FixedArray(uint8_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint8_t" << std::endl;
        for (uint64_t i = 0; i < VK_UUID_SIZE; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.shaderBinaryUUID << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderBinaryVersion" << std::endl;
    // shaderBinaryVersion -> Field -> uint32_t
    os << "value: " << t.shaderBinaryVersion << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkShaderCreateInfoEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkShaderCreateFlagsEXT
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stage" << std::endl;
    // stage -> Field -> VkShaderStageFlagBits
    os << "value: " << t.stage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  nextStage" << std::endl;
    // nextStage -> Field -> VkShaderStageFlags
    os << "value: " << t.nextStage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  codeType" << std::endl;
    // codeType -> Field -> VkShaderCodeTypeEXT
    os << "value: " << t.codeType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  codeSize" << std::endl;
    // codeSize -> Field -> size_t
    os << "value: " << t.codeSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCode" << std::endl;
    if (t.codeSize == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << std::hex;
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        const uint8_t *p = (const uint8_t *)t.pCode;
        for (uint64_t i = 0; i < t.codeSize; ++i) {
          os << "- 0x" << p[i] << std::endl;
        }
      }
      os << std::dec;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pName" << std::endl;
    // pName -> Field -> string
    os << "value: " << t.pName << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  setLayoutCount" << std::endl;
    // setLayoutCount -> Field -> uint32_t
    os << "value: " << t.setLayoutCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSetLayouts" << std::endl;
    // pSetLayouts -> Field -> ConstDynamicArray(VkDescriptorSetLayout)
    if (t.setLayoutCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDescriptorSetLayout" << std::endl;
        for (uint64_t i = 0; i < t.setLayoutCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pSetLayouts << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pushConstantRangeCount" << std::endl;
    // pushConstantRangeCount -> Field -> uint32_t
    os << "value: " << t.pushConstantRangeCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPushConstantRanges" << std::endl;
    // pPushConstantRanges -> Field -> ConstDynamicArray(VkPushConstantRange)
    if (t.pushConstantRangeCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkPushConstantRange" << std::endl;
        for (uint64_t i = 0; i < t.pushConstantRangeCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pPushConstantRanges << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSpecializationInfo" << std::endl;
    // pointer
    if (t.pSpecializationInfo != nullptr) {
      os <<  "members:" << std::endl << *t.pSpecializationInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceTilePropertiesFeaturesQCOM &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tileProperties" << std::endl;
    // tileProperties -> Field -> VkBool32
    os << "value: " << t.tileProperties << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkTilePropertiesQCOM &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  tileSize" << std::endl;
    // tileSize -> Field -> VkExtent3D
    os <<  "members:" << std::endl << t.tileSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  apronSize" << std::endl;
    // apronSize -> Field -> VkExtent2D
    os <<  "members:" << std::endl << t.apronSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  origin" << std::endl;
    // origin -> Field -> VkOffset2D
    os <<  "members:" << std::endl << t.origin << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceAmigoProfilingFeaturesSEC &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  amigoProfiling" << std::endl;
    // amigoProfiling -> Field -> VkBool32
    os << "value: " << t.amigoProfiling << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAmigoProfilingSubmitInfoSEC &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstDrawTimestamp" << std::endl;
    // firstDrawTimestamp -> Field -> uint64_t
    os << "value: " << t.firstDrawTimestamp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  swapBufferTimestamp" << std::endl;
    // swapBufferTimestamp -> Field -> uint64_t
    os << "value: " << t.swapBufferTimestamp << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multiviewPerViewViewports" << std::endl;
    // multiviewPerViewViewports -> Field -> VkBool32
    os << "value: " << t.multiviewPerViewViewports << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rayTracingInvocationReorderReorderingHint" << std::endl;
    // rayTracingInvocationReorderReorderingHint -> Field -> VkRayTracingInvocationReorderModeNV
    os << "value: " << t.rayTracingInvocationReorderReorderingHint << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rayTracingInvocationReorder" << std::endl;
    // rayTracingInvocationReorder -> Field -> VkBool32
    os << "value: " << t.rayTracingInvocationReorder << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderCoreBuiltins" << std::endl;
    // shaderCoreBuiltins -> Field -> VkBool32
    os << "value: " << t.shaderCoreBuiltins << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderCoreMask" << std::endl;
    // shaderCoreMask -> Field -> uint64_t
    os << "value: " << t.shaderCoreMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderCoreCount" << std::endl;
    // shaderCoreCount -> Field -> uint32_t
    os << "value: " << t.shaderCoreCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderWarpsPerCore" << std::endl;
    // shaderWarpsPerCore -> Field -> uint32_t
    os << "value: " << t.shaderWarpsPerCore << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineLibraryGroupHandles" << std::endl;
    // pipelineLibraryGroupHandles -> Field -> VkBool32
    os << "value: " << t.pipelineLibraryGroupHandles << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dynamicRenderingUnusedAttachments" << std::endl;
    // dynamicRenderingUnusedAttachments -> Field -> VkBool32
    os << "value: " << t.dynamicRenderingUnusedAttachments << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multiviewPerViewRenderAreas" << std::endl;
    // multiviewPerViewRenderAreas -> Field -> VkBool32
    os << "value: " << t.multiviewPerViewRenderAreas << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  perViewRenderAreaCount" << std::endl;
    // perViewRenderAreaCount -> Field -> uint32_t
    os << "value: " << t.perViewRenderAreaCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pPerViewRenderAreas" << std::endl;
    // pPerViewRenderAreas -> Field -> ConstDynamicArray(VkRect2D)
    if (t.perViewRenderAreaCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkRect2D" << std::endl;
        for (uint64_t i = 0; i < t.perViewRenderAreaCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pPerViewRenderAreas << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentFeedbackLoopDynamicState" << std::endl;
    // attachmentFeedbackLoopDynamicState -> Field -> VkBool32
    os << "value: " << t.attachmentFeedbackLoopDynamicState << std::endl;
  }
  return os;
}

#ifdef VK_USE_PLATFORM_SCREEN_QNX
std::ostream &operator<<(std::ostream & os, const VkScreenBufferPropertiesQNX &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  allocationSize" << std::endl;
    // allocationSize -> Field -> VkDeviceSize
    os << "value: " << t.allocationSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryTypeBits" << std::endl;
    // memoryTypeBits -> Field -> uint32_t
    os << "value: " << t.memoryTypeBits << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_SCREEN_QNX

#ifdef VK_USE_PLATFORM_SCREEN_QNX
std::ostream &operator<<(std::ostream & os, const VkScreenBufferFormatPropertiesQNX &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  format" << std::endl;
    // format -> Field -> VkFormat
    os << "value: " << t.format << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  externalFormat" << std::endl;
    // externalFormat -> Field -> uint64_t
    os << "value: " << t.externalFormat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  screenUsage" << std::endl;
    // screenUsage -> Field -> uint64_t
    os << "value: " << t.screenUsage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  formatFeatures" << std::endl;
    // formatFeatures -> Field -> VkFormatFeatureFlags
    os << "value: " << t.formatFeatures << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samplerYcbcrConversionComponents" << std::endl;
    // samplerYcbcrConversionComponents -> Field -> VkComponentMapping
    os <<  "members:" << std::endl << t.samplerYcbcrConversionComponents << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  suggestedYcbcrModel" << std::endl;
    // suggestedYcbcrModel -> Field -> VkSamplerYcbcrModelConversion
    os << "value: " << t.suggestedYcbcrModel << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  suggestedYcbcrRange" << std::endl;
    // suggestedYcbcrRange -> Field -> VkSamplerYcbcrRange
    os << "value: " << t.suggestedYcbcrRange << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  suggestedXChromaOffset" << std::endl;
    // suggestedXChromaOffset -> Field -> VkChromaLocation
    os << "value: " << t.suggestedXChromaOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  suggestedYChromaOffset" << std::endl;
    // suggestedYChromaOffset -> Field -> VkChromaLocation
    os << "value: " << t.suggestedYChromaOffset << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_SCREEN_QNX

#ifdef VK_USE_PLATFORM_SCREEN_QNX
std::ostream &operator<<(std::ostream & os, const VkImportScreenBufferInfoQNX &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // pointer
    if (t.buffer != nullptr) {
      os << "value: *t.buffer" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  return os;
}
#endif //VK_USE_PLATFORM_SCREEN_QNX

#ifdef VK_USE_PLATFORM_SCREEN_QNX
std::ostream &operator<<(std::ostream & os, const VkExternalFormatQNX &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  externalFormat" << std::endl;
    // externalFormat -> Field -> uint64_t
    os << "value: " << t.externalFormat << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_SCREEN_QNX

#ifdef VK_USE_PLATFORM_SCREEN_QNX
std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  screenBufferImport" << std::endl;
    // screenBufferImport -> Field -> VkBool32
    os << "value: " << t.screenBufferImport << std::endl;
  }
  return os;
}
#endif //VK_USE_PLATFORM_SCREEN_QNX

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureBuildRangeInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primitiveCount" << std::endl;
    // primitiveCount -> Field -> uint32_t
    os << "value: " << t.primitiveCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primitiveOffset" << std::endl;
    // primitiveOffset -> Field -> uint32_t
    os << "value: " << t.primitiveOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstVertex" << std::endl;
    // firstVertex -> Field -> uint32_t
    os << "value: " << t.firstVertex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transformOffset" << std::endl;
    // transformOffset -> Field -> uint32_t
    os << "value: " << t.transformOffset << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureGeometryTrianglesDataKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexFormat" << std::endl;
    // vertexFormat -> Field -> VkFormat
    os << "value: " << t.vertexFormat << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexData" << std::endl;
    // vertexData -> Field -> VkDeviceOrHostAddressConstKHR
    os <<  "members:" << std::endl << t.vertexData << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexStride" << std::endl;
    // vertexStride -> Field -> VkDeviceSize
    os << "value: " << t.vertexStride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxVertex" << std::endl;
    // maxVertex -> Field -> uint32_t
    os << "value: " << t.maxVertex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexType" << std::endl;
    // indexType -> Field -> VkIndexType
    os << "value: " << t.indexType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexData" << std::endl;
    // indexData -> Field -> VkDeviceOrHostAddressConstKHR
    os <<  "members:" << std::endl << t.indexData << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  transformData" << std::endl;
    // transformData -> Field -> VkDeviceOrHostAddressConstKHR
    os <<  "members:" << std::endl << t.transformData << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureGeometryAabbsDataKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  data" << std::endl;
    // data -> Field -> VkDeviceOrHostAddressConstKHR
    os <<  "members:" << std::endl << t.data << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> VkDeviceSize
    os << "value: " << t.stride << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureGeometryInstancesDataKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  arrayOfPointers" << std::endl;
    // arrayOfPointers -> Field -> VkBool32
    os << "value: " << t.arrayOfPointers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  data" << std::endl;
    // data -> Field -> VkDeviceOrHostAddressConstKHR
    os <<  "members:" << std::endl << t.data << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureGeometryDataKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  triangles" << std::endl;
    // triangles -> Field -> VkAccelerationStructureGeometryTrianglesDataKHR
    os <<  "members:" << std::endl << t.triangles << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  aabbs" << std::endl;
    // aabbs -> Field -> VkAccelerationStructureGeometryAabbsDataKHR
    os <<  "members:" << std::endl << t.aabbs << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instances" << std::endl;
    // instances -> Field -> VkAccelerationStructureGeometryInstancesDataKHR
    os <<  "members:" << std::endl << t.instances << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureGeometryKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  geometryType" << std::endl;
    // geometryType -> Field -> VkGeometryTypeKHR
    os << "value: " << t.geometryType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  geometry" << std::endl;
    // geometry -> Field -> VkAccelerationStructureGeometryDataKHR
    os <<  "members:" << std::endl << t.geometry << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkGeometryFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureBuildGeometryInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  type" << std::endl;
    // type -> Field -> VkAccelerationStructureTypeKHR
    os << "value: " << t.type << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkBuildAccelerationStructureFlagsKHR
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mode" << std::endl;
    // mode -> Field -> VkBuildAccelerationStructureModeKHR
    os << "value: " << t.mode << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcAccelerationStructure" << std::endl;
    // srcAccelerationStructure -> Field -> VkAccelerationStructureKHR
    os << "value: " << t.srcAccelerationStructure << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstAccelerationStructure" << std::endl;
    // dstAccelerationStructure -> Field -> VkAccelerationStructureKHR
    os << "value: " << t.dstAccelerationStructure << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  geometryCount" << std::endl;
    // geometryCount -> Field -> uint32_t
    os << "value: " << t.geometryCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pGeometries" << std::endl;
    // pGeometries -> Field -> ConstDynamicArray(VkAccelerationStructureGeometryKHR)
    if (t.geometryCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkAccelerationStructureGeometryKHR" << std::endl;
        for (uint64_t i = 0; i < t.geometryCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pGeometries << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ppGeometries" << std::endl;
    // ppGeometries -> Field -> ConstDynamicArray(VkAccelerationStructureGeometryKHR)
    if (t.geometryCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkAccelerationStructureGeometryKHR" << std::endl;
        for (uint64_t i = 0; i < t.geometryCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << *(t.ppGeometries) << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  scratchData" << std::endl;
    // scratchData -> Field -> VkDeviceOrHostAddressKHR
    os <<  "members:" << std::endl << t.scratchData << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureCreateInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  createFlags" << std::endl;
    // createFlags -> Field -> VkAccelerationStructureCreateFlagsKHR
    os << "value: " << t.createFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << t.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << t.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  type" << std::endl;
    // type -> Field -> VkAccelerationStructureTypeKHR
    os << "value: " << t.type << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceAddress" << std::endl;
    // deviceAddress -> Field -> VkDeviceAddress
    os << "value: " << t.deviceAddress << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkWriteDescriptorSetAccelerationStructureKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructureCount" << std::endl;
    // accelerationStructureCount -> Field -> uint32_t
    os << "value: " << t.accelerationStructureCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAccelerationStructures" << std::endl;
    // pAccelerationStructures -> Field -> ConstDynamicArray(VkAccelerationStructureKHR)
    if (t.accelerationStructureCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkAccelerationStructureKHR" << std::endl;
        for (uint64_t i = 0; i < t.accelerationStructureCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pAccelerationStructures << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceAccelerationStructureFeaturesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructure" << std::endl;
    // accelerationStructure -> Field -> VkBool32
    os << "value: " << t.accelerationStructure << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructureCaptureReplay" << std::endl;
    // accelerationStructureCaptureReplay -> Field -> VkBool32
    os << "value: " << t.accelerationStructureCaptureReplay << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructureIndirectBuild" << std::endl;
    // accelerationStructureIndirectBuild -> Field -> VkBool32
    os << "value: " << t.accelerationStructureIndirectBuild << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructureHostCommands" << std::endl;
    // accelerationStructureHostCommands -> Field -> VkBool32
    os << "value: " << t.accelerationStructureHostCommands << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorBindingAccelerationStructureUpdateAfterBind" << std::endl;
    // descriptorBindingAccelerationStructureUpdateAfterBind -> Field -> VkBool32
    os << "value: " << t.descriptorBindingAccelerationStructureUpdateAfterBind << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceAccelerationStructurePropertiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxGeometryCount" << std::endl;
    // maxGeometryCount -> Field -> uint64_t
    os << "value: " << t.maxGeometryCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxInstanceCount" << std::endl;
    // maxInstanceCount -> Field -> uint64_t
    os << "value: " << t.maxInstanceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPrimitiveCount" << std::endl;
    // maxPrimitiveCount -> Field -> uint64_t
    os << "value: " << t.maxPrimitiveCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorAccelerationStructures" << std::endl;
    // maxPerStageDescriptorAccelerationStructures -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorAccelerationStructures << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPerStageDescriptorUpdateAfterBindAccelerationStructures" << std::endl;
    // maxPerStageDescriptorUpdateAfterBindAccelerationStructures -> Field -> uint32_t
    os << "value: " << t.maxPerStageDescriptorUpdateAfterBindAccelerationStructures << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetAccelerationStructures" << std::endl;
    // maxDescriptorSetAccelerationStructures -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetAccelerationStructures << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDescriptorSetUpdateAfterBindAccelerationStructures" << std::endl;
    // maxDescriptorSetUpdateAfterBindAccelerationStructures -> Field -> uint32_t
    os << "value: " << t.maxDescriptorSetUpdateAfterBindAccelerationStructures << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minAccelerationStructureScratchOffsetAlignment" << std::endl;
    // minAccelerationStructureScratchOffsetAlignment -> Field -> uint32_t
    os << "value: " << t.minAccelerationStructureScratchOffsetAlignment << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureDeviceAddressInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructure" << std::endl;
    // accelerationStructure -> Field -> VkAccelerationStructureKHR
    os << "value: " << t.accelerationStructure << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureVersionInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pVersionData" << std::endl;
    // pVersionData -> Field -> ConstDynamicArray(uint8_t)
    if ((2*VK_UUID_SIZE) == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint8_t" << std::endl;
        for (uint64_t i = 0; i < (2*VK_UUID_SIZE); ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.pVersionData << std::endl;
        } // for i
      }
    }
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCopyAccelerationStructureToMemoryInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  src" << std::endl;
    // src -> Field -> VkAccelerationStructureKHR
    os << "value: " << t.src << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dst" << std::endl;
    // dst -> Field -> VkDeviceOrHostAddressKHR
    os <<  "members:" << std::endl << t.dst << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mode" << std::endl;
    // mode -> Field -> VkCopyAccelerationStructureModeKHR
    os << "value: " << t.mode << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCopyMemoryToAccelerationStructureInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  src" << std::endl;
    // src -> Field -> VkDeviceOrHostAddressConstKHR
    os <<  "members:" << std::endl << t.src << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dst" << std::endl;
    // dst -> Field -> VkAccelerationStructureKHR
    os << "value: " << t.dst << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mode" << std::endl;
    // mode -> Field -> VkCopyAccelerationStructureModeKHR
    os << "value: " << t.mode << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkCopyAccelerationStructureInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  src" << std::endl;
    // src -> Field -> VkAccelerationStructureKHR
    os << "value: " << t.src << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dst" << std::endl;
    // dst -> Field -> VkAccelerationStructureKHR
    os << "value: " << t.dst << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mode" << std::endl;
    // mode -> Field -> VkCopyAccelerationStructureModeKHR
    os << "value: " << t.mode << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkAccelerationStructureBuildSizesInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructureSize" << std::endl;
    // accelerationStructureSize -> Field -> VkDeviceSize
    os << "value: " << t.accelerationStructureSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  updateScratchSize" << std::endl;
    // updateScratchSize -> Field -> VkDeviceSize
    os << "value: " << t.updateScratchSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buildScratchSize" << std::endl;
    // buildScratchSize -> Field -> VkDeviceSize
    os << "value: " << t.buildScratchSize << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRayTracingShaderGroupCreateInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  type" << std::endl;
    // type -> Field -> VkRayTracingShaderGroupTypeKHR
    os << "value: " << t.type << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  generalShader" << std::endl;
    // generalShader -> Field -> uint32_t
    os << "value: " << t.generalShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  closestHitShader" << std::endl;
    // closestHitShader -> Field -> uint32_t
    os << "value: " << t.closestHitShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  anyHitShader" << std::endl;
    // anyHitShader -> Field -> uint32_t
    os << "value: " << t.anyHitShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  intersectionShader" << std::endl;
    // intersectionShader -> Field -> uint32_t
    os << "value: " << t.intersectionShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pShaderGroupCaptureReplayHandle" << std::endl;
    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRayTracingPipelineInterfaceCreateInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPipelineRayPayloadSize" << std::endl;
    // maxPipelineRayPayloadSize -> Field -> uint32_t
    os << "value: " << t.maxPipelineRayPayloadSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPipelineRayHitAttributeSize" << std::endl;
    // maxPipelineRayHitAttributeSize -> Field -> uint32_t
    os << "value: " << t.maxPipelineRayHitAttributeSize << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkRayTracingPipelineCreateInfoKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkPipelineCreateFlags
    os << "value: " << t.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stageCount" << std::endl;
    // stageCount -> Field -> uint32_t
    os << "value: " << t.stageCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStages" << std::endl;
    // pStages -> Field -> ConstDynamicArray(VkPipelineShaderStageCreateInfo)
    if (t.stageCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkPipelineShaderStageCreateInfo" << std::endl;
        for (uint64_t i = 0; i < t.stageCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pStages << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCount" << std::endl;
    // groupCount -> Field -> uint32_t
    os << "value: " << t.groupCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pGroups" << std::endl;
    // pGroups -> Field -> ConstDynamicArray(VkRayTracingShaderGroupCreateInfoKHR)
    if (t.groupCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkRayTracingShaderGroupCreateInfoKHR" << std::endl;
        for (uint64_t i = 0; i < t.groupCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << t.pGroups << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPipelineRayRecursionDepth" << std::endl;
    // maxPipelineRayRecursionDepth -> Field -> uint32_t
    os << "value: " << t.maxPipelineRayRecursionDepth << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pLibraryInfo" << std::endl;
    // pointer
    if (t.pLibraryInfo != nullptr) {
      os <<  "members:" << std::endl << *t.pLibraryInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pLibraryInterface" << std::endl;
    // pointer
    if (t.pLibraryInterface != nullptr) {
      os <<  "members:" << std::endl << *t.pLibraryInterface << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDynamicState" << std::endl;
    // pointer
    if (t.pDynamicState != nullptr) {
      os <<  "members:" << std::endl << *t.pDynamicState << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layout" << std::endl;
    // layout -> Field -> VkPipelineLayout
    os << "value: " << t.layout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  basePipelineHandle" << std::endl;
    // basePipelineHandle -> Field -> VkPipeline
    os << "value: " << t.basePipelineHandle << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  basePipelineIndex" << std::endl;
    // basePipelineIndex -> Field -> int32_t
    os << "value: " << t.basePipelineIndex << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceRayTracingPipelineFeaturesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rayTracingPipeline" << std::endl;
    // rayTracingPipeline -> Field -> VkBool32
    os << "value: " << t.rayTracingPipeline << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rayTracingPipelineShaderGroupHandleCaptureReplay" << std::endl;
    // rayTracingPipelineShaderGroupHandleCaptureReplay -> Field -> VkBool32
    os << "value: " << t.rayTracingPipelineShaderGroupHandleCaptureReplay << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rayTracingPipelineShaderGroupHandleCaptureReplayMixed" << std::endl;
    // rayTracingPipelineShaderGroupHandleCaptureReplayMixed -> Field -> VkBool32
    os << "value: " << t.rayTracingPipelineShaderGroupHandleCaptureReplayMixed << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rayTracingPipelineTraceRaysIndirect" << std::endl;
    // rayTracingPipelineTraceRaysIndirect -> Field -> VkBool32
    os << "value: " << t.rayTracingPipelineTraceRaysIndirect << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rayTraversalPrimitiveCulling" << std::endl;
    // rayTraversalPrimitiveCulling -> Field -> VkBool32
    os << "value: " << t.rayTraversalPrimitiveCulling << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceRayTracingPipelinePropertiesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderGroupHandleSize" << std::endl;
    // shaderGroupHandleSize -> Field -> uint32_t
    os << "value: " << t.shaderGroupHandleSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxRayRecursionDepth" << std::endl;
    // maxRayRecursionDepth -> Field -> uint32_t
    os << "value: " << t.maxRayRecursionDepth << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxShaderGroupStride" << std::endl;
    // maxShaderGroupStride -> Field -> uint32_t
    os << "value: " << t.maxShaderGroupStride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderGroupBaseAlignment" << std::endl;
    // shaderGroupBaseAlignment -> Field -> uint32_t
    os << "value: " << t.shaderGroupBaseAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderGroupHandleCaptureReplaySize" << std::endl;
    // shaderGroupHandleCaptureReplaySize -> Field -> uint32_t
    os << "value: " << t.shaderGroupHandleCaptureReplaySize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxRayDispatchInvocationCount" << std::endl;
    // maxRayDispatchInvocationCount -> Field -> uint32_t
    os << "value: " << t.maxRayDispatchInvocationCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shaderGroupHandleAlignment" << std::endl;
    // shaderGroupHandleAlignment -> Field -> uint32_t
    os << "value: " << t.shaderGroupHandleAlignment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxRayHitAttributeSize" << std::endl;
    // maxRayHitAttributeSize -> Field -> uint32_t
    os << "value: " << t.maxRayHitAttributeSize << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkStridedDeviceAddressRegionKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceAddress" << std::endl;
    // deviceAddress -> Field -> VkDeviceAddress
    os << "value: " << t.deviceAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> VkDeviceSize
    os << "value: " << t.stride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << t.size << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkTraceRaysIndirectCommandKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  width" << std::endl;
    // width -> Field -> uint32_t
    os << "value: " << t.width << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  height" << std::endl;
    // height -> Field -> uint32_t
    os << "value: " << t.height << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depth" << std::endl;
    // depth -> Field -> uint32_t
    os << "value: " << t.depth << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceRayQueryFeaturesKHR &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rayQuery" << std::endl;
    // rayQuery -> Field -> VkBool32
    os << "value: " << t.rayQuery << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceMeshShaderFeaturesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  taskShader" << std::endl;
    // taskShader -> Field -> VkBool32
    os << "value: " << t.taskShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  meshShader" << std::endl;
    // meshShader -> Field -> VkBool32
    os << "value: " << t.meshShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  multiviewMeshShader" << std::endl;
    // multiviewMeshShader -> Field -> VkBool32
    os << "value: " << t.multiviewMeshShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primitiveFragmentShadingRateMeshShader" << std::endl;
    // primitiveFragmentShadingRateMeshShader -> Field -> VkBool32
    os << "value: " << t.primitiveFragmentShadingRateMeshShader << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  meshShaderQueries" << std::endl;
    // meshShaderQueries -> Field -> VkBool32
    os << "value: " << t.meshShaderQueries << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkPhysicalDeviceMeshShaderPropertiesEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sType" << std::endl;
    // sType -> Field -> VkStructureType
    os << "value: " << t.sType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pNext" << std::endl;
    // pNext -> Field -> ConstNextPtr(void)
    os << "value: ";
    PrintNextPtr(os, t.pNext);
    os << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTaskWorkGroupTotalCount" << std::endl;
    // maxTaskWorkGroupTotalCount -> Field -> uint32_t
    os << "value: " << t.maxTaskWorkGroupTotalCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTaskWorkGroupCount" << std::endl;
    // maxTaskWorkGroupCount -> Field -> FixedArray(uint32_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < 3; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.maxTaskWorkGroupCount << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTaskWorkGroupInvocations" << std::endl;
    // maxTaskWorkGroupInvocations -> Field -> uint32_t
    os << "value: " << t.maxTaskWorkGroupInvocations << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTaskWorkGroupSize" << std::endl;
    // maxTaskWorkGroupSize -> Field -> FixedArray(uint32_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < 3; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.maxTaskWorkGroupSize << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTaskPayloadSize" << std::endl;
    // maxTaskPayloadSize -> Field -> uint32_t
    os << "value: " << t.maxTaskPayloadSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTaskSharedMemorySize" << std::endl;
    // maxTaskSharedMemorySize -> Field -> uint32_t
    os << "value: " << t.maxTaskSharedMemorySize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxTaskPayloadAndSharedMemorySize" << std::endl;
    // maxTaskPayloadAndSharedMemorySize -> Field -> uint32_t
    os << "value: " << t.maxTaskPayloadAndSharedMemorySize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMeshWorkGroupTotalCount" << std::endl;
    // maxMeshWorkGroupTotalCount -> Field -> uint32_t
    os << "value: " << t.maxMeshWorkGroupTotalCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMeshWorkGroupCount" << std::endl;
    // maxMeshWorkGroupCount -> Field -> FixedArray(uint32_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < 3; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.maxMeshWorkGroupCount << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMeshWorkGroupInvocations" << std::endl;
    // maxMeshWorkGroupInvocations -> Field -> uint32_t
    os << "value: " << t.maxMeshWorkGroupInvocations << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMeshWorkGroupSize" << std::endl;
    // maxMeshWorkGroupSize -> Field -> FixedArray(uint32_t)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < 3; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << t.maxMeshWorkGroupSize << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMeshSharedMemorySize" << std::endl;
    // maxMeshSharedMemorySize -> Field -> uint32_t
    os << "value: " << t.maxMeshSharedMemorySize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMeshPayloadAndSharedMemorySize" << std::endl;
    // maxMeshPayloadAndSharedMemorySize -> Field -> uint32_t
    os << "value: " << t.maxMeshPayloadAndSharedMemorySize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMeshOutputMemorySize" << std::endl;
    // maxMeshOutputMemorySize -> Field -> uint32_t
    os << "value: " << t.maxMeshOutputMemorySize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMeshPayloadAndOutputMemorySize" << std::endl;
    // maxMeshPayloadAndOutputMemorySize -> Field -> uint32_t
    os << "value: " << t.maxMeshPayloadAndOutputMemorySize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMeshOutputComponents" << std::endl;
    // maxMeshOutputComponents -> Field -> uint32_t
    os << "value: " << t.maxMeshOutputComponents << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMeshOutputVertices" << std::endl;
    // maxMeshOutputVertices -> Field -> uint32_t
    os << "value: " << t.maxMeshOutputVertices << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMeshOutputPrimitives" << std::endl;
    // maxMeshOutputPrimitives -> Field -> uint32_t
    os << "value: " << t.maxMeshOutputPrimitives << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMeshOutputLayers" << std::endl;
    // maxMeshOutputLayers -> Field -> uint32_t
    os << "value: " << t.maxMeshOutputLayers << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxMeshMultiviewViewCount" << std::endl;
    // maxMeshMultiviewViewCount -> Field -> uint32_t
    os << "value: " << t.maxMeshMultiviewViewCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  meshOutputPerVertexGranularity" << std::endl;
    // meshOutputPerVertexGranularity -> Field -> uint32_t
    os << "value: " << t.meshOutputPerVertexGranularity << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  meshOutputPerPrimitiveGranularity" << std::endl;
    // meshOutputPerPrimitiveGranularity -> Field -> uint32_t
    os << "value: " << t.meshOutputPerPrimitiveGranularity << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPreferredTaskWorkGroupInvocations" << std::endl;
    // maxPreferredTaskWorkGroupInvocations -> Field -> uint32_t
    os << "value: " << t.maxPreferredTaskWorkGroupInvocations << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxPreferredMeshWorkGroupInvocations" << std::endl;
    // maxPreferredMeshWorkGroupInvocations -> Field -> uint32_t
    os << "value: " << t.maxPreferredMeshWorkGroupInvocations << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  prefersLocalInvocationVertexOutput" << std::endl;
    // prefersLocalInvocationVertexOutput -> Field -> VkBool32
    os << "value: " << t.prefersLocalInvocationVertexOutput << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  prefersLocalInvocationPrimitiveOutput" << std::endl;
    // prefersLocalInvocationPrimitiveOutput -> Field -> VkBool32
    os << "value: " << t.prefersLocalInvocationPrimitiveOutput << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  prefersCompactVertexOutput" << std::endl;
    // prefersCompactVertexOutput -> Field -> VkBool32
    os << "value: " << t.prefersCompactVertexOutput << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  prefersCompactPrimitiveOutput" << std::endl;
    // prefersCompactPrimitiveOutput -> Field -> VkBool32
    os << "value: " << t.prefersCompactPrimitiveOutput << std::endl;
  }
  return os;
}

std::ostream &operator<<(std::ostream & os, const VkDrawMeshTasksIndirectCommandEXT &t) {
  ScopedOstream sos(os);
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountX" << std::endl;
    // groupCountX -> Field -> uint32_t
    os << "value: " << t.groupCountX << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountY" << std::endl;
    // groupCountY -> Field -> uint32_t
    os << "value: " << t.groupCountY << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountZ" << std::endl;
    // groupCountZ -> Field -> uint32_t
    os << "value: " << t.groupCountZ << std::endl;
  }
  return os;
}



std::ostream &operator<<(std::ostream &os, const VkWriteDescriptorSet &t) {
  ScopedOstream sos(os);
  os << "sType: ";
  os << t.sType << std::endl;

  os << "pNext: ";
  // void

  os << "dstSet: ";
  os << t.dstSet << std::endl;

  os << "dstBinding: ";
  os << t.dstBinding << std::endl;

  os << "dstArrayElement: ";
  os << t.dstArrayElement << std::endl;

  os << "descriptorCount: ";
  os << t.descriptorCount << std::endl;

  os << "descriptorType: ";
  os << t.descriptorType << std::endl;

  switch (t.descriptorType){
    case VK_DESCRIPTOR_TYPE_SAMPLER:
    case VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER:
    case VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE:
    case VK_DESCRIPTOR_TYPE_STORAGE_IMAGE:
      os << "pImageInfo: ";
      for (uint32_t i = 0; i < t.descriptorCount; ++i) {
        os << t.pImageInfo[i] << std::endl;
      }
      break;

    case VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER:
    case VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER:
      os << "pTexelBufferView: ";
      for (uint32_t i = 0; i < t.descriptorCount; ++i) {
        os << t.pTexelBufferView[i] << std::endl;
      }
      break;

    case VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER:
    case VK_DESCRIPTOR_TYPE_STORAGE_BUFFER:
    case VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC:
    case VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC:
    case VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT:
      os << "pBufferInfo: ";
      for (uint32_t i = 0; i < t.descriptorCount; ++i) {
        os << t.pBufferInfo[i] << std::endl;
      }
      break;

    default:
      os << "Unknown Descriptor Type: " << t.descriptorType << std::endl;
  }

  return os;
}

//  Print out a VkStruct
std::ostream & PrintVkStruct(std::ostream & os, const VkStruct *pStruct) {
  switch (pStruct->sType) {
  case VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER:
    os << *reinterpret_cast<const VkBufferMemoryBarrier *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER:
    os << *reinterpret_cast<const VkImageMemoryBarrier *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MEMORY_BARRIER:
    os << *reinterpret_cast<const VkMemoryBarrier *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_APPLICATION_INFO:
    os << *reinterpret_cast<const VkApplicationInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO:
    os << *reinterpret_cast<const VkInstanceCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO:
    os << *reinterpret_cast<const VkDeviceQueueCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO:
    os << *reinterpret_cast<const VkDeviceCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SUBMIT_INFO:
    os << *reinterpret_cast<const VkSubmitInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE:
    os << *reinterpret_cast<const VkMappedMemoryRange *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO:
    os << *reinterpret_cast<const VkMemoryAllocateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_BIND_SPARSE_INFO:
    os << *reinterpret_cast<const VkBindSparseInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_FENCE_CREATE_INFO:
    os << *reinterpret_cast<const VkFenceCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO:
    os << *reinterpret_cast<const VkSemaphoreCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_EVENT_CREATE_INFO:
    os << *reinterpret_cast<const VkEventCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO:
    os << *reinterpret_cast<const VkQueryPoolCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO:
    os << *reinterpret_cast<const VkBufferCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO:
    os << *reinterpret_cast<const VkBufferViewCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO:
    os << *reinterpret_cast<const VkImageCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO:
    os << *reinterpret_cast<const VkImageViewCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO:
    os << *reinterpret_cast<const VkShaderModuleCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO:
    os << *reinterpret_cast<const VkPipelineCacheCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO:
    os << *reinterpret_cast<const VkPipelineShaderStageCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO:
    os << *reinterpret_cast<const VkComputePipelineCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO:
    os << *reinterpret_cast<const VkPipelineVertexInputStateCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO:
    os << *reinterpret_cast<const VkPipelineInputAssemblyStateCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO:
    os << *reinterpret_cast<const VkPipelineTessellationStateCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO:
    os << *reinterpret_cast<const VkPipelineViewportStateCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO:
    os << *reinterpret_cast<const VkPipelineRasterizationStateCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO:
    os << *reinterpret_cast<const VkPipelineMultisampleStateCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO:
    os << *reinterpret_cast<const VkPipelineDepthStencilStateCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO:
    os << *reinterpret_cast<const VkPipelineColorBlendStateCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO:
    os << *reinterpret_cast<const VkPipelineDynamicStateCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO:
    os << *reinterpret_cast<const VkGraphicsPipelineCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO:
    os << *reinterpret_cast<const VkPipelineLayoutCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO:
    os << *reinterpret_cast<const VkSamplerCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET:
    os << *reinterpret_cast<const VkCopyDescriptorSet *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO:
    os << *reinterpret_cast<const VkDescriptorPoolCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO:
    os << *reinterpret_cast<const VkDescriptorSetAllocateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO:
    os << *reinterpret_cast<const VkDescriptorSetLayoutCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET:
    os << *reinterpret_cast<const VkWriteDescriptorSet *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO:
    os << *reinterpret_cast<const VkFramebufferCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO:
    os << *reinterpret_cast<const VkRenderPassCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO:
    os << *reinterpret_cast<const VkCommandPoolCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO:
    os << *reinterpret_cast<const VkCommandBufferAllocateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO:
    os << *reinterpret_cast<const VkCommandBufferInheritanceInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO:
    os << *reinterpret_cast<const VkCommandBufferBeginInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO:
    os << *reinterpret_cast<const VkRenderPassBeginInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES:
    os << *reinterpret_cast<const VkPhysicalDeviceSubgroupProperties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO:
    os << *reinterpret_cast<const VkBindBufferMemoryInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO:
    os << *reinterpret_cast<const VkBindImageMemoryInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDevice16BitStorageFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS:
    os << *reinterpret_cast<const VkMemoryDedicatedRequirements *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO:
    os << *reinterpret_cast<const VkMemoryDedicatedAllocateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO:
    os << *reinterpret_cast<const VkMemoryAllocateFlagsInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO:
    os << *reinterpret_cast<const VkDeviceGroupRenderPassBeginInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO:
    os << *reinterpret_cast<const VkDeviceGroupCommandBufferBeginInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO:
    os << *reinterpret_cast<const VkDeviceGroupSubmitInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO:
    os << *reinterpret_cast<const VkDeviceGroupBindSparseInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO:
    os << *reinterpret_cast<const VkBindBufferMemoryDeviceGroupInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO:
    os << *reinterpret_cast<const VkBindImageMemoryDeviceGroupInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES:
    os << *reinterpret_cast<const VkPhysicalDeviceGroupProperties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO:
    os << *reinterpret_cast<const VkDeviceGroupDeviceCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2:
    os << *reinterpret_cast<const VkBufferMemoryRequirementsInfo2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2:
    os << *reinterpret_cast<const VkImageMemoryRequirementsInfo2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2:
    os << *reinterpret_cast<const VkImageSparseMemoryRequirementsInfo2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2:
    os << *reinterpret_cast<const VkMemoryRequirements2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2:
    os << *reinterpret_cast<const VkSparseImageMemoryRequirements2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2:
    os << *reinterpret_cast<const VkPhysicalDeviceFeatures2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2:
    os << *reinterpret_cast<const VkPhysicalDeviceProperties2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2:
    os << *reinterpret_cast<const VkFormatProperties2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2:
    os << *reinterpret_cast<const VkImageFormatProperties2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2:
    os << *reinterpret_cast<const VkPhysicalDeviceImageFormatInfo2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2:
    os << *reinterpret_cast<const VkQueueFamilyProperties2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2:
    os << *reinterpret_cast<const VkPhysicalDeviceMemoryProperties2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2:
    os << *reinterpret_cast<const VkSparseImageFormatProperties2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2:
    os << *reinterpret_cast<const VkPhysicalDeviceSparseImageFormatInfo2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES:
    os << *reinterpret_cast<const VkPhysicalDevicePointClippingProperties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO:
    os << *reinterpret_cast<const VkRenderPassInputAttachmentAspectCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO:
    os << *reinterpret_cast<const VkImageViewUsageCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO:
    os << *reinterpret_cast<const VkPipelineTessellationDomainOriginStateCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO:
    os << *reinterpret_cast<const VkRenderPassMultiviewCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceMultiviewFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES:
    os << *reinterpret_cast<const VkPhysicalDeviceMultiviewProperties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceVariablePointersFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceProtectedMemoryFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES:
    os << *reinterpret_cast<const VkPhysicalDeviceProtectedMemoryProperties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2:
    os << *reinterpret_cast<const VkDeviceQueueInfo2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO:
    os << *reinterpret_cast<const VkProtectedSubmitInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO:
    os << *reinterpret_cast<const VkSamplerYcbcrConversionCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO:
    os << *reinterpret_cast<const VkSamplerYcbcrConversionInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO:
    os << *reinterpret_cast<const VkBindImagePlaneMemoryInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO:
    os << *reinterpret_cast<const VkImagePlaneMemoryRequirementsInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceSamplerYcbcrConversionFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES:
    os << *reinterpret_cast<const VkSamplerYcbcrConversionImageFormatProperties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO:
    os << *reinterpret_cast<const VkDescriptorUpdateTemplateCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO:
    os << *reinterpret_cast<const VkPhysicalDeviceExternalImageFormatInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES:
    os << *reinterpret_cast<const VkExternalImageFormatProperties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO:
    os << *reinterpret_cast<const VkPhysicalDeviceExternalBufferInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES:
    os << *reinterpret_cast<const VkExternalBufferProperties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES:
    os << *reinterpret_cast<const VkPhysicalDeviceIDProperties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO:
    os << *reinterpret_cast<const VkExternalMemoryImageCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO:
    os << *reinterpret_cast<const VkExternalMemoryBufferCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO:
    os << *reinterpret_cast<const VkExportMemoryAllocateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO:
    os << *reinterpret_cast<const VkPhysicalDeviceExternalFenceInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES:
    os << *reinterpret_cast<const VkExternalFenceProperties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO:
    os << *reinterpret_cast<const VkExportFenceCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO:
    os << *reinterpret_cast<const VkExportSemaphoreCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO:
    os << *reinterpret_cast<const VkPhysicalDeviceExternalSemaphoreInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES:
    os << *reinterpret_cast<const VkExternalSemaphoreProperties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES:
    os << *reinterpret_cast<const VkPhysicalDeviceMaintenance3Properties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT:
    os << *reinterpret_cast<const VkDescriptorSetLayoutSupport *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderDrawParametersFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceVulkan11Features *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES:
    os << *reinterpret_cast<const VkPhysicalDeviceVulkan11Properties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceVulkan12Features *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES:
    os << *reinterpret_cast<const VkPhysicalDeviceVulkan12Properties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO:
    os << *reinterpret_cast<const VkImageFormatListCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2:
    os << *reinterpret_cast<const VkAttachmentDescription2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2:
    os << *reinterpret_cast<const VkAttachmentReference2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2:
    os << *reinterpret_cast<const VkSubpassDescription2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2:
    os << *reinterpret_cast<const VkSubpassDependency2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2:
    os << *reinterpret_cast<const VkRenderPassCreateInfo2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO:
    os << *reinterpret_cast<const VkSubpassBeginInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SUBPASS_END_INFO:
    os << *reinterpret_cast<const VkSubpassEndInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDevice8BitStorageFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES:
    os << *reinterpret_cast<const VkPhysicalDeviceDriverProperties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderAtomicInt64Features *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderFloat16Int8Features *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES:
    os << *reinterpret_cast<const VkPhysicalDeviceFloatControlsProperties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO:
    os << *reinterpret_cast<const VkDescriptorSetLayoutBindingFlagsCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceDescriptorIndexingFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES:
    os << *reinterpret_cast<const VkPhysicalDeviceDescriptorIndexingProperties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO:
    os << *reinterpret_cast<const VkDescriptorSetVariableDescriptorCountAllocateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT:
    os << *reinterpret_cast<const VkDescriptorSetVariableDescriptorCountLayoutSupport *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE:
    os << *reinterpret_cast<const VkSubpassDescriptionDepthStencilResolve *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES:
    os << *reinterpret_cast<const VkPhysicalDeviceDepthStencilResolveProperties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceScalarBlockLayoutFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO:
    os << *reinterpret_cast<const VkImageStencilUsageCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO:
    os << *reinterpret_cast<const VkSamplerReductionModeCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES:
    os << *reinterpret_cast<const VkPhysicalDeviceSamplerFilterMinmaxProperties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceVulkanMemoryModelFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceImagelessFramebufferFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO:
    os << *reinterpret_cast<const VkFramebufferAttachmentImageInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO:
    os << *reinterpret_cast<const VkFramebufferAttachmentsCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO:
    os << *reinterpret_cast<const VkRenderPassAttachmentBeginInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceUniformBufferStandardLayoutFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT:
    os << *reinterpret_cast<const VkAttachmentReferenceStencilLayout *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT:
    os << *reinterpret_cast<const VkAttachmentDescriptionStencilLayout *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceHostQueryResetFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceTimelineSemaphoreFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES:
    os << *reinterpret_cast<const VkPhysicalDeviceTimelineSemaphoreProperties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO:
    os << *reinterpret_cast<const VkSemaphoreTypeCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO:
    os << *reinterpret_cast<const VkTimelineSemaphoreSubmitInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO:
    os << *reinterpret_cast<const VkSemaphoreWaitInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO:
    os << *reinterpret_cast<const VkSemaphoreSignalInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceBufferDeviceAddressFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO:
    os << *reinterpret_cast<const VkBufferDeviceAddressInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO:
    os << *reinterpret_cast<const VkBufferOpaqueCaptureAddressCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO:
    os << *reinterpret_cast<const VkMemoryOpaqueCaptureAddressAllocateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO:
    os << *reinterpret_cast<const VkDeviceMemoryOpaqueCaptureAddressInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceVulkan13Features *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES:
    os << *reinterpret_cast<const VkPhysicalDeviceVulkan13Properties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO:
    os << *reinterpret_cast<const VkPipelineCreationFeedbackCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderTerminateInvocationFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES:
    os << *reinterpret_cast<const VkPhysicalDeviceToolProperties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDevicePrivateDataFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO:
    os << *reinterpret_cast<const VkDevicePrivateDataCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO:
    os << *reinterpret_cast<const VkPrivateDataSlotCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDevicePipelineCreationCacheControlFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MEMORY_BARRIER_2:
    os << *reinterpret_cast<const VkMemoryBarrier2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2:
    os << *reinterpret_cast<const VkBufferMemoryBarrier2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2:
    os << *reinterpret_cast<const VkImageMemoryBarrier2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEPENDENCY_INFO:
    os << *reinterpret_cast<const VkDependencyInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO:
    os << *reinterpret_cast<const VkSemaphoreSubmitInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO:
    os << *reinterpret_cast<const VkCommandBufferSubmitInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SUBMIT_INFO_2:
    os << *reinterpret_cast<const VkSubmitInfo2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceSynchronization2Features *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceImageRobustnessFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_BUFFER_COPY_2:
    os << *reinterpret_cast<const VkBufferCopy2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2:
    os << *reinterpret_cast<const VkCopyBufferInfo2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_COPY_2:
    os << *reinterpret_cast<const VkImageCopy2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2:
    os << *reinterpret_cast<const VkCopyImageInfo2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2:
    os << *reinterpret_cast<const VkBufferImageCopy2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2:
    os << *reinterpret_cast<const VkCopyBufferToImageInfo2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2:
    os << *reinterpret_cast<const VkCopyImageToBufferInfo2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_BLIT_2:
    os << *reinterpret_cast<const VkImageBlit2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2:
    os << *reinterpret_cast<const VkBlitImageInfo2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2:
    os << *reinterpret_cast<const VkImageResolve2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2:
    os << *reinterpret_cast<const VkResolveImageInfo2 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceSubgroupSizeControlFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES:
    os << *reinterpret_cast<const VkPhysicalDeviceSubgroupSizeControlProperties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO:
    os << *reinterpret_cast<const VkPipelineShaderStageRequiredSubgroupSizeCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceInlineUniformBlockFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES:
    os << *reinterpret_cast<const VkPhysicalDeviceInlineUniformBlockProperties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK:
    os << *reinterpret_cast<const VkWriteDescriptorSetInlineUniformBlock *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO:
    os << *reinterpret_cast<const VkDescriptorPoolInlineUniformBlockCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceTextureCompressionASTCHDRFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO:
    os << *reinterpret_cast<const VkRenderingAttachmentInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_RENDERING_INFO:
    os << *reinterpret_cast<const VkRenderingInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO:
    os << *reinterpret_cast<const VkPipelineRenderingCreateInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceDynamicRenderingFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO:
    os << *reinterpret_cast<const VkCommandBufferInheritanceRenderingInfo *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderIntegerDotProductFeatures *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderIntegerDotProductProperties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES:
    os << *reinterpret_cast<const VkPhysicalDeviceTexelBufferAlignmentProperties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3:
    os << *reinterpret_cast<const VkFormatProperties3 *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES:
    os << *reinterpret_cast<const VkPhysicalDeviceMaintenance4Features *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES:
    os << *reinterpret_cast<const VkPhysicalDeviceMaintenance4Properties *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS:
    os << *reinterpret_cast<const VkDeviceBufferMemoryRequirements *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS:
    os << *reinterpret_cast<const VkDeviceImageMemoryRequirements *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR:
    os << *reinterpret_cast<const VkSwapchainCreateInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PRESENT_INFO_KHR:
    os << *reinterpret_cast<const VkPresentInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR:
    os << *reinterpret_cast<const VkImageSwapchainCreateInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR:
    os << *reinterpret_cast<const VkBindImageMemorySwapchainInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR:
    os << *reinterpret_cast<const VkAcquireNextImageInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR:
    os << *reinterpret_cast<const VkDeviceGroupPresentCapabilitiesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR:
    os << *reinterpret_cast<const VkDeviceGroupPresentInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR:
    os << *reinterpret_cast<const VkDeviceGroupSwapchainCreateInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR:
    os << *reinterpret_cast<const VkDisplayModeCreateInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR:
    os << *reinterpret_cast<const VkDisplaySurfaceCreateInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR:
    os << *reinterpret_cast<const VkDisplayPresentInfoKHR *>(pStruct);
    break;
#ifdef VK_USE_PLATFORM_XLIB_KHR
  case VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR:
    os << *reinterpret_cast<const VkXlibSurfaceCreateInfoKHR *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_XLIB_KHR
#ifdef VK_USE_PLATFORM_XCB_KHR
  case VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR:
    os << *reinterpret_cast<const VkXcbSurfaceCreateInfoKHR *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_XCB_KHR
#ifdef VK_USE_PLATFORM_WAYLAND_KHR
  case VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR:
    os << *reinterpret_cast<const VkWaylandSurfaceCreateInfoKHR *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_WAYLAND_KHR
#ifdef VK_USE_PLATFORM_ANDROID_KHR
  case VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR:
    os << *reinterpret_cast<const VkAndroidSurfaceCreateInfoKHR *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_ANDROID_KHR
#ifdef VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR:
    os << *reinterpret_cast<const VkWin32SurfaceCreateInfoKHR *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR:
    os << *reinterpret_cast<const VkQueueFamilyQueryResultStatusPropertiesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR:
    os << *reinterpret_cast<const VkQueueFamilyVideoPropertiesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR:
    os << *reinterpret_cast<const VkVideoProfileInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR:
    os << *reinterpret_cast<const VkVideoProfileListInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR:
    os << *reinterpret_cast<const VkVideoCapabilitiesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR:
    os << *reinterpret_cast<const VkPhysicalDeviceVideoFormatInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR:
    os << *reinterpret_cast<const VkVideoFormatPropertiesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR:
    os << *reinterpret_cast<const VkVideoPictureResourceInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR:
    os << *reinterpret_cast<const VkVideoReferenceSlotInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR:
    os << *reinterpret_cast<const VkVideoSessionMemoryRequirementsKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR:
    os << *reinterpret_cast<const VkBindVideoSessionMemoryInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR:
    os << *reinterpret_cast<const VkVideoSessionCreateInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR:
    os << *reinterpret_cast<const VkVideoSessionParametersCreateInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR:
    os << *reinterpret_cast<const VkVideoSessionParametersUpdateInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR:
    os << *reinterpret_cast<const VkVideoBeginCodingInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR:
    os << *reinterpret_cast<const VkVideoEndCodingInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR:
    os << *reinterpret_cast<const VkVideoCodingControlInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR:
    os << *reinterpret_cast<const VkVideoDecodeCapabilitiesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR:
    os << *reinterpret_cast<const VkVideoDecodeUsageInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR:
    os << *reinterpret_cast<const VkVideoDecodeInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR:
    os << *reinterpret_cast<const VkVideoDecodeH264ProfileInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR:
    os << *reinterpret_cast<const VkVideoDecodeH264CapabilitiesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR:
    os << *reinterpret_cast<const VkVideoDecodeH264SessionParametersAddInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR:
    os << *reinterpret_cast<const VkVideoDecodeH264SessionParametersCreateInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR:
    os << *reinterpret_cast<const VkVideoDecodeH264PictureInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR:
    os << *reinterpret_cast<const VkVideoDecodeH264DpbSlotInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR:
    os << *reinterpret_cast<const VkRenderingFragmentShadingRateAttachmentInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT:
    os << *reinterpret_cast<const VkRenderingFragmentDensityMapAttachmentInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD:
    os << *reinterpret_cast<const VkAttachmentSampleCountInfoAMD *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX:
    os << *reinterpret_cast<const VkMultiviewPerViewAttributesInfoNVX *>(pStruct);
    break;
#ifdef VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR:
    os << *reinterpret_cast<const VkImportMemoryWin32HandleInfoKHR *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_WIN32_KHR
#ifdef VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR:
    os << *reinterpret_cast<const VkExportMemoryWin32HandleInfoKHR *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_WIN32_KHR
#ifdef VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR:
    os << *reinterpret_cast<const VkMemoryWin32HandlePropertiesKHR *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_WIN32_KHR
#ifdef VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR:
    os << *reinterpret_cast<const VkMemoryGetWin32HandleInfoKHR *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR:
    os << *reinterpret_cast<const VkImportMemoryFdInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR:
    os << *reinterpret_cast<const VkMemoryFdPropertiesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR:
    os << *reinterpret_cast<const VkMemoryGetFdInfoKHR *>(pStruct);
    break;
#ifdef VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR:
    os << *reinterpret_cast<const VkWin32KeyedMutexAcquireReleaseInfoKHR *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_WIN32_KHR
#ifdef VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR:
    os << *reinterpret_cast<const VkImportSemaphoreWin32HandleInfoKHR *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_WIN32_KHR
#ifdef VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR:
    os << *reinterpret_cast<const VkExportSemaphoreWin32HandleInfoKHR *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_WIN32_KHR
#ifdef VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR:
    os << *reinterpret_cast<const VkD3D12FenceSubmitInfoKHR *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_WIN32_KHR
#ifdef VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR:
    os << *reinterpret_cast<const VkSemaphoreGetWin32HandleInfoKHR *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR:
    os << *reinterpret_cast<const VkImportSemaphoreFdInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR:
    os << *reinterpret_cast<const VkSemaphoreGetFdInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR:
    os << *reinterpret_cast<const VkPhysicalDevicePushDescriptorPropertiesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR:
    os << *reinterpret_cast<const VkPresentRegionsKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR:
    os << *reinterpret_cast<const VkSharedPresentSurfaceCapabilitiesKHR *>(pStruct);
    break;
#ifdef VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR:
    os << *reinterpret_cast<const VkImportFenceWin32HandleInfoKHR *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_WIN32_KHR
#ifdef VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR:
    os << *reinterpret_cast<const VkExportFenceWin32HandleInfoKHR *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_WIN32_KHR
#ifdef VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR:
    os << *reinterpret_cast<const VkFenceGetWin32HandleInfoKHR *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR:
    os << *reinterpret_cast<const VkImportFenceFdInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR:
    os << *reinterpret_cast<const VkFenceGetFdInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR:
    os << *reinterpret_cast<const VkPhysicalDevicePerformanceQueryFeaturesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR:
    os << *reinterpret_cast<const VkPhysicalDevicePerformanceQueryPropertiesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR:
    os << *reinterpret_cast<const VkPerformanceCounterKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR:
    os << *reinterpret_cast<const VkPerformanceCounterDescriptionKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR:
    os << *reinterpret_cast<const VkQueryPoolPerformanceCreateInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR:
    os << *reinterpret_cast<const VkAcquireProfilingLockInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR:
    os << *reinterpret_cast<const VkPerformanceQuerySubmitInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR:
    os << *reinterpret_cast<const VkPhysicalDeviceSurfaceInfo2KHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR:
    os << *reinterpret_cast<const VkSurfaceCapabilities2KHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR:
    os << *reinterpret_cast<const VkSurfaceFormat2KHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR:
    os << *reinterpret_cast<const VkDisplayProperties2KHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR:
    os << *reinterpret_cast<const VkDisplayPlaneProperties2KHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR:
    os << *reinterpret_cast<const VkDisplayModeProperties2KHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR:
    os << *reinterpret_cast<const VkDisplayPlaneInfo2KHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR:
    os << *reinterpret_cast<const VkDisplayPlaneCapabilities2KHR *>(pStruct);
    break;
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR:
    os << *reinterpret_cast<const VkPhysicalDevicePortabilitySubsetFeaturesKHR *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR:
    os << *reinterpret_cast<const VkPhysicalDevicePortabilitySubsetPropertiesKHR *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderClockFeaturesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR:
    os << *reinterpret_cast<const VkVideoDecodeH265ProfileInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR:
    os << *reinterpret_cast<const VkVideoDecodeH265CapabilitiesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR:
    os << *reinterpret_cast<const VkVideoDecodeH265SessionParametersAddInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR:
    os << *reinterpret_cast<const VkVideoDecodeH265SessionParametersCreateInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR:
    os << *reinterpret_cast<const VkVideoDecodeH265PictureInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR:
    os << *reinterpret_cast<const VkVideoDecodeH265DpbSlotInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR:
    os << *reinterpret_cast<const VkDeviceQueueGlobalPriorityCreateInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR:
    os << *reinterpret_cast<const VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR:
    os << *reinterpret_cast<const VkQueueFamilyGlobalPriorityPropertiesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR:
    os << *reinterpret_cast<const VkFragmentShadingRateAttachmentInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR:
    os << *reinterpret_cast<const VkPipelineFragmentShadingRateStateCreateInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR:
    os << *reinterpret_cast<const VkPhysicalDeviceFragmentShadingRateFeaturesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR:
    os << *reinterpret_cast<const VkPhysicalDeviceFragmentShadingRatePropertiesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR:
    os << *reinterpret_cast<const VkPhysicalDeviceFragmentShadingRateKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR:
    os << *reinterpret_cast<const VkSurfaceProtectedCapabilitiesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR:
    os << *reinterpret_cast<const VkPhysicalDevicePresentWaitFeaturesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR:
    os << *reinterpret_cast<const VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR:
    os << *reinterpret_cast<const VkPipelineInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR:
    os << *reinterpret_cast<const VkPipelineExecutablePropertiesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR:
    os << *reinterpret_cast<const VkPipelineExecutableInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR:
    os << *reinterpret_cast<const VkPipelineExecutableStatisticKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR:
    os << *reinterpret_cast<const VkPipelineExecutableInternalRepresentationKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR:
    os << *reinterpret_cast<const VkMemoryMapInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR:
    os << *reinterpret_cast<const VkMemoryUnmapInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR:
    os << *reinterpret_cast<const VkPipelineLibraryCreateInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PRESENT_ID_KHR:
    os << *reinterpret_cast<const VkPresentIdKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR:
    os << *reinterpret_cast<const VkPhysicalDevicePresentIdFeaturesKHR *>(pStruct);
    break;
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR:
    os << *reinterpret_cast<const VkVideoEncodeInfoKHR *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR:
    os << *reinterpret_cast<const VkVideoEncodeCapabilitiesKHR *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR:
    os << *reinterpret_cast<const VkQueryPoolVideoEncodeFeedbackCreateInfoKHR *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR:
    os << *reinterpret_cast<const VkVideoEncodeUsageInfoKHR *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR:
    os << *reinterpret_cast<const VkVideoEncodeRateControlLayerInfoKHR *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR:
    os << *reinterpret_cast<const VkVideoEncodeRateControlInfoKHR *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR:
    os << *reinterpret_cast<const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR:
    os << *reinterpret_cast<const VkVideoEncodeQualityLevelPropertiesKHR *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR:
    os << *reinterpret_cast<const VkVideoEncodeQualityLevelInfoKHR *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR:
    os << *reinterpret_cast<const VkVideoEncodeSessionParametersGetInfoKHR *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR:
    os << *reinterpret_cast<const VkVideoEncodeSessionParametersFeedbackInfoKHR *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV:
    os << *reinterpret_cast<const VkQueueFamilyCheckpointProperties2NV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV:
    os << *reinterpret_cast<const VkCheckpointData2NV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR:
    os << *reinterpret_cast<const VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR:
    os << *reinterpret_cast<const VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR:
    os << *reinterpret_cast<const VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR:
    os << *reinterpret_cast<const VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR:
    os << *reinterpret_cast<const VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR:
    os << *reinterpret_cast<const VkCooperativeMatrixPropertiesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR:
    os << *reinterpret_cast<const VkPhysicalDeviceCooperativeMatrixFeaturesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR:
    os << *reinterpret_cast<const VkPhysicalDeviceCooperativeMatrixPropertiesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkDebugReportCallbackCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD:
    os << *reinterpret_cast<const VkPipelineRasterizationStateRasterizationOrderAMD *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT:
    os << *reinterpret_cast<const VkDebugMarkerObjectNameInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT:
    os << *reinterpret_cast<const VkDebugMarkerObjectTagInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT:
    os << *reinterpret_cast<const VkDebugMarkerMarkerInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV:
    os << *reinterpret_cast<const VkDedicatedAllocationImageCreateInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV:
    os << *reinterpret_cast<const VkDedicatedAllocationBufferCreateInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV:
    os << *reinterpret_cast<const VkDedicatedAllocationMemoryAllocateInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceTransformFeedbackFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceTransformFeedbackPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkPipelineRasterizationStateStreamCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX:
    os << *reinterpret_cast<const VkCuModuleCreateInfoNVX *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX:
    os << *reinterpret_cast<const VkCuFunctionCreateInfoNVX *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX:
    os << *reinterpret_cast<const VkCuLaunchInfoNVX *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX:
    os << *reinterpret_cast<const VkImageViewHandleInfoNVX *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX:
    os << *reinterpret_cast<const VkImageViewAddressPropertiesNVX *>(pStruct);
    break;
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH264CapabilitiesEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH264QualityLevelPropertiesEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH264SessionCreateInfoEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH264SessionParametersAddInfoEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH264SessionParametersCreateInfoEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH264SessionParametersGetInfoEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH264SessionParametersFeedbackInfoEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH264NaluSliceInfoEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH264PictureInfoEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH264DpbSlotInfoEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH264ProfileInfoEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH264RateControlInfoEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH264RateControlLayerInfoEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH264GopRemainingFrameInfoEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH265CapabilitiesEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH265SessionCreateInfoEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH265QualityLevelPropertiesEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH265SessionParametersAddInfoEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH265SessionParametersCreateInfoEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH265SessionParametersGetInfoEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH265SessionParametersFeedbackInfoEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH265NaluSliceSegmentInfoEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH265PictureInfoEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH265DpbSlotInfoEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH265ProfileInfoEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH265RateControlInfoEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH265RateControlLayerInfoEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_EXT:
    os << *reinterpret_cast<const VkVideoEncodeH265GopRemainingFrameInfoEXT *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD:
    os << *reinterpret_cast<const VkTextureLODGatherFormatPropertiesAMD *>(pStruct);
    break;
#ifdef VK_USE_PLATFORM_GGP
  case VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP:
    os << *reinterpret_cast<const VkStreamDescriptorSurfaceCreateInfoGGP *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_GGP
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceCornerSampledImageFeaturesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV:
    os << *reinterpret_cast<const VkExternalMemoryImageCreateInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV:
    os << *reinterpret_cast<const VkExportMemoryAllocateInfoNV *>(pStruct);
    break;
#ifdef VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV:
    os << *reinterpret_cast<const VkImportMemoryWin32HandleInfoNV *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_WIN32_KHR
#ifdef VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV:
    os << *reinterpret_cast<const VkExportMemoryWin32HandleInfoNV *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_WIN32_KHR
#ifdef VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV:
    os << *reinterpret_cast<const VkWin32KeyedMutexAcquireReleaseInfoNV *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT:
    os << *reinterpret_cast<const VkValidationFlagsEXT *>(pStruct);
    break;
#ifdef VK_USE_PLATFORM_VI_NN
  case VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN:
    os << *reinterpret_cast<const VkViSurfaceCreateInfoNN *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_VI_NN
  case VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT:
    os << *reinterpret_cast<const VkImageViewASTCDecodeModeEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceASTCDecodeFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDevicePipelineRobustnessFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDevicePipelineRobustnessPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkPipelineRobustnessCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT:
    os << *reinterpret_cast<const VkConditionalRenderingBeginInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceConditionalRenderingFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT:
    os << *reinterpret_cast<const VkCommandBufferInheritanceConditionalRenderingInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV:
    os << *reinterpret_cast<const VkPipelineViewportWScalingStateCreateInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT:
    os << *reinterpret_cast<const VkSurfaceCapabilities2EXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT:
    os << *reinterpret_cast<const VkDisplayPowerInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT:
    os << *reinterpret_cast<const VkDeviceEventInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT:
    os << *reinterpret_cast<const VkDisplayEventInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkSwapchainCounterCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE:
    os << *reinterpret_cast<const VkPresentTimesInfoGOOGLE *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX:
    os << *reinterpret_cast<const VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV:
    os << *reinterpret_cast<const VkPipelineViewportSwizzleStateCreateInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceDiscardRectanglePropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkPipelineDiscardRectangleStateCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceConservativeRasterizationPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkPipelineRasterizationConservativeStateCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceDepthClipEnableFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkPipelineRasterizationDepthClipStateCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_HDR_METADATA_EXT:
    os << *reinterpret_cast<const VkHdrMetadataEXT *>(pStruct);
    break;
#ifdef VK_USE_PLATFORM_IOS_MVK
  case VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK:
    os << *reinterpret_cast<const VkIOSSurfaceCreateInfoMVK *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_IOS_MVK
#ifdef VK_USE_PLATFORM_MACOS_MVK
  case VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK:
    os << *reinterpret_cast<const VkMacOSSurfaceCreateInfoMVK *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_MACOS_MVK
  case VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT:
    os << *reinterpret_cast<const VkDebugUtilsLabelEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT:
    os << *reinterpret_cast<const VkDebugUtilsObjectNameInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT:
    os << *reinterpret_cast<const VkDebugUtilsMessengerCallbackDataEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkDebugUtilsMessengerCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT:
    os << *reinterpret_cast<const VkDebugUtilsObjectTagInfoEXT *>(pStruct);
    break;
#ifdef VK_USE_PLATFORM_ANDROID_KHR
  case VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID:
    os << *reinterpret_cast<const VkAndroidHardwareBufferUsageANDROID *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_ANDROID_KHR
#ifdef VK_USE_PLATFORM_ANDROID_KHR
  case VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID:
    os << *reinterpret_cast<const VkAndroidHardwareBufferPropertiesANDROID *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_ANDROID_KHR
#ifdef VK_USE_PLATFORM_ANDROID_KHR
  case VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID:
    os << *reinterpret_cast<const VkAndroidHardwareBufferFormatPropertiesANDROID *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_ANDROID_KHR
#ifdef VK_USE_PLATFORM_ANDROID_KHR
  case VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID:
    os << *reinterpret_cast<const VkImportAndroidHardwareBufferInfoANDROID *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_ANDROID_KHR
#ifdef VK_USE_PLATFORM_ANDROID_KHR
  case VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID:
    os << *reinterpret_cast<const VkMemoryGetAndroidHardwareBufferInfoANDROID *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_ANDROID_KHR
#ifdef VK_USE_PLATFORM_ANDROID_KHR
  case VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID:
    os << *reinterpret_cast<const VkExternalFormatANDROID *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_ANDROID_KHR
#ifdef VK_USE_PLATFORM_ANDROID_KHR
  case VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID:
    os << *reinterpret_cast<const VkAndroidHardwareBufferFormatProperties2ANDROID *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_ANDROID_KHR
  case VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT:
    os << *reinterpret_cast<const VkSampleLocationsInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT:
    os << *reinterpret_cast<const VkRenderPassSampleLocationsBeginInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkPipelineSampleLocationsStateCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceSampleLocationsPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkMultisamplePropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkPipelineColorBlendAdvancedStateCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV:
    os << *reinterpret_cast<const VkPipelineCoverageToColorStateCreateInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV:
    os << *reinterpret_cast<const VkPipelineCoverageModulationStateCreateInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderSMBuiltinsPropertiesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderSMBuiltinsFeaturesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT:
    os << *reinterpret_cast<const VkDrmFormatModifierPropertiesListEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceImageDrmFormatModifierInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkImageDrmFormatModifierListCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkImageDrmFormatModifierExplicitCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkImageDrmFormatModifierPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT:
    os << *reinterpret_cast<const VkDrmFormatModifierPropertiesList2EXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkValidationCacheCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkShaderModuleValidationCacheCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV:
    os << *reinterpret_cast<const VkPipelineViewportShadingRateImageStateCreateInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceShadingRateImageFeaturesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceShadingRateImagePropertiesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV:
    os << *reinterpret_cast<const VkPipelineViewportCoarseSampleOrderStateCreateInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV:
    os << *reinterpret_cast<const VkRayTracingShaderGroupCreateInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV:
    os << *reinterpret_cast<const VkRayTracingPipelineCreateInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV:
    os << *reinterpret_cast<const VkGeometryTrianglesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV:
    os << *reinterpret_cast<const VkGeometryAABBNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_GEOMETRY_NV:
    os << *reinterpret_cast<const VkGeometryNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV:
    os << *reinterpret_cast<const VkAccelerationStructureInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV:
    os << *reinterpret_cast<const VkAccelerationStructureCreateInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV:
    os << *reinterpret_cast<const VkBindAccelerationStructureMemoryInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV:
    os << *reinterpret_cast<const VkWriteDescriptorSetAccelerationStructureNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV:
    os << *reinterpret_cast<const VkAccelerationStructureMemoryRequirementsInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceRayTracingPropertiesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV:
    os << *reinterpret_cast<const VkPipelineRepresentativeFragmentTestStateCreateInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceImageViewImageFormatInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkFilterCubicImageViewImageFormatPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT:
    os << *reinterpret_cast<const VkImportMemoryHostPointerInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkMemoryHostPointerPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceExternalMemoryHostPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD:
    os << *reinterpret_cast<const VkPipelineCompilerControlCreateInfoAMD *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT:
    os << *reinterpret_cast<const VkCalibratedTimestampInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderCorePropertiesAMD *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD:
    os << *reinterpret_cast<const VkDeviceMemoryOverallocationCreateInfoAMD *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkPipelineVertexInputDivisorStateCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT *>(pStruct);
    break;
#ifdef VK_USE_PLATFORM_GGP
  case VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP:
    os << *reinterpret_cast<const VkPresentFrameTokenGGP *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_GGP
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceComputeShaderDerivativesFeaturesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceMeshShaderFeaturesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceMeshShaderPropertiesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderImageFootprintFeaturesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV:
    os << *reinterpret_cast<const VkPipelineViewportExclusiveScissorStateCreateInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceExclusiveScissorFeaturesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV:
    os << *reinterpret_cast<const VkQueueFamilyCheckpointPropertiesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV:
    os << *reinterpret_cast<const VkCheckpointDataNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL:
    os << *reinterpret_cast<const VkInitializePerformanceApiInfoINTEL *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL:
    os << *reinterpret_cast<const VkQueryPoolPerformanceQueryCreateInfoINTEL *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL:
    os << *reinterpret_cast<const VkPerformanceMarkerInfoINTEL *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL:
    os << *reinterpret_cast<const VkPerformanceStreamMarkerInfoINTEL *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL:
    os << *reinterpret_cast<const VkPerformanceOverrideInfoINTEL *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL:
    os << *reinterpret_cast<const VkPerformanceConfigurationAcquireInfoINTEL *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDevicePCIBusInfoPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD:
    os << *reinterpret_cast<const VkDisplayNativeHdrSurfaceCapabilitiesAMD *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD:
    os << *reinterpret_cast<const VkSwapchainDisplayNativeHdrCreateInfoAMD *>(pStruct);
    break;
#ifdef VK_USE_PLATFORM_FUCHSIA
  case VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA:
    os << *reinterpret_cast<const VkImagePipeSurfaceCreateInfoFUCHSIA *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_FUCHSIA
#ifdef VK_USE_PLATFORM_METAL_EXT
  case VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkMetalSurfaceCreateInfoEXT *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_METAL_EXT
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceFragmentDensityMapFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceFragmentDensityMapPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkRenderPassFragmentDensityMapCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderCoreProperties2AMD *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD:
    os << *reinterpret_cast<const VkPhysicalDeviceCoherentMemoryFeaturesAMD *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceMemoryBudgetPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceMemoryPriorityFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT:
    os << *reinterpret_cast<const VkMemoryPriorityAllocateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceBufferDeviceAddressFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkBufferDeviceAddressCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT:
    os << *reinterpret_cast<const VkValidationFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV:
    os << *reinterpret_cast<const VkCooperativeMatrixPropertiesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceCooperativeMatrixFeaturesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceCooperativeMatrixPropertiesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceCoverageReductionModeFeaturesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV:
    os << *reinterpret_cast<const VkPipelineCoverageReductionStateCreateInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV:
    os << *reinterpret_cast<const VkFramebufferMixedSamplesCombinationNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceYcbcrImageArraysFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceProvokingVertexFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceProvokingVertexPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkPipelineRasterizationProvokingVertexStateCreateInfoEXT *>(pStruct);
    break;
#ifdef VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT:
    os << *reinterpret_cast<const VkSurfaceFullScreenExclusiveInfoEXT *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_WIN32_KHR
#ifdef VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT:
    os << *reinterpret_cast<const VkSurfaceCapabilitiesFullScreenExclusiveEXT *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_WIN32_KHR
#ifdef VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT:
    os << *reinterpret_cast<const VkSurfaceFullScreenExclusiveWin32InfoEXT *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_WIN32_KHR
  case VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkHeadlessSurfaceCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceLineRasterizationFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceLineRasterizationPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkPipelineRasterizationLineStateCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderAtomicFloatFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceIndexTypeUint8FeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceExtendedDynamicStateFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceHostImageCopyFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceHostImageCopyPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT:
    os << *reinterpret_cast<const VkMemoryToImageCopyEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT:
    os << *reinterpret_cast<const VkImageToMemoryCopyEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT:
    os << *reinterpret_cast<const VkCopyMemoryToImageInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT:
    os << *reinterpret_cast<const VkCopyImageToMemoryInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT:
    os << *reinterpret_cast<const VkCopyImageToImageInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT:
    os << *reinterpret_cast<const VkHostImageLayoutTransitionInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT:
    os << *reinterpret_cast<const VkSubresourceHostMemcpySizeEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT:
    os << *reinterpret_cast<const VkHostImageCopyDevicePerformanceQueryEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT:
    os << *reinterpret_cast<const VkSubresourceLayout2EXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT:
    os << *reinterpret_cast<const VkImageSubresource2EXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT:
    os << *reinterpret_cast<const VkSurfacePresentModeEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT:
    os << *reinterpret_cast<const VkSurfacePresentScalingCapabilitiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT:
    os << *reinterpret_cast<const VkSurfacePresentModeCompatibilityEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT:
    os << *reinterpret_cast<const VkSwapchainPresentFenceInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkSwapchainPresentModesCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT:
    os << *reinterpret_cast<const VkSwapchainPresentModeInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkSwapchainPresentScalingCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT:
    os << *reinterpret_cast<const VkReleaseSwapchainImagesInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV:
    os << *reinterpret_cast<const VkGraphicsShaderGroupCreateInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV:
    os << *reinterpret_cast<const VkGraphicsPipelineShaderGroupsCreateInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV:
    os << *reinterpret_cast<const VkIndirectCommandsLayoutTokenNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV:
    os << *reinterpret_cast<const VkIndirectCommandsLayoutCreateInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV:
    os << *reinterpret_cast<const VkGeneratedCommandsInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV:
    os << *reinterpret_cast<const VkGeneratedCommandsMemoryRequirementsInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceInheritedViewportScissorFeaturesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV:
    os << *reinterpret_cast<const VkCommandBufferInheritanceViewportScissorInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM:
    os << *reinterpret_cast<const VkRenderPassTransformBeginInfoQCOM *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM:
    os << *reinterpret_cast<const VkCommandBufferInheritanceRenderPassTransformInfoQCOM *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceDepthBiasControlFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT:
    os << *reinterpret_cast<const VkDepthBiasInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT:
    os << *reinterpret_cast<const VkDepthBiasRepresentationInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceDeviceMemoryReportFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT:
    os << *reinterpret_cast<const VkDeviceMemoryReportCallbackDataEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkDeviceDeviceMemoryReportCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceRobustness2FeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceRobustness2PropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkSamplerCustomBorderColorCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceCustomBorderColorPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceCustomBorderColorFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDevicePresentBarrierFeaturesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV:
    os << *reinterpret_cast<const VkSurfaceCapabilitiesPresentBarrierNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV:
    os << *reinterpret_cast<const VkSwapchainPresentBarrierCreateInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceDiagnosticsConfigFeaturesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV:
    os << *reinterpret_cast<const VkDeviceDiagnosticsConfigCreateInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV:
    os << *reinterpret_cast<const VkQueryLowLatencySupportNV *>(pStruct);
    break;
#ifdef VK_USE_PLATFORM_METAL_EXT
  case VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkExportMetalObjectCreateInfoEXT *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_METAL_EXT
#ifdef VK_USE_PLATFORM_METAL_EXT
  case VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT:
    os << *reinterpret_cast<const VkExportMetalObjectsInfoEXT *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_METAL_EXT
#ifdef VK_USE_PLATFORM_METAL_EXT
  case VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT:
    os << *reinterpret_cast<const VkExportMetalDeviceInfoEXT *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_METAL_EXT
#ifdef VK_USE_PLATFORM_METAL_EXT
  case VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT:
    os << *reinterpret_cast<const VkExportMetalCommandQueueInfoEXT *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_METAL_EXT
#ifdef VK_USE_PLATFORM_METAL_EXT
  case VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT:
    os << *reinterpret_cast<const VkExportMetalBufferInfoEXT *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_METAL_EXT
#ifdef VK_USE_PLATFORM_METAL_EXT
  case VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT:
    os << *reinterpret_cast<const VkImportMetalBufferInfoEXT *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_METAL_EXT
#ifdef VK_USE_PLATFORM_METAL_EXT
  case VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT:
    os << *reinterpret_cast<const VkExportMetalTextureInfoEXT *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_METAL_EXT
#ifdef VK_USE_PLATFORM_METAL_EXT
  case VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT:
    os << *reinterpret_cast<const VkImportMetalTextureInfoEXT *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_METAL_EXT
#ifdef VK_USE_PLATFORM_METAL_EXT
  case VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT:
    os << *reinterpret_cast<const VkExportMetalIOSurfaceInfoEXT *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_METAL_EXT
#ifdef VK_USE_PLATFORM_METAL_EXT
  case VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT:
    os << *reinterpret_cast<const VkImportMetalIOSurfaceInfoEXT *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_METAL_EXT
#ifdef VK_USE_PLATFORM_METAL_EXT
  case VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT:
    os << *reinterpret_cast<const VkExportMetalSharedEventInfoEXT *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_METAL_EXT
#ifdef VK_USE_PLATFORM_METAL_EXT
  case VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT:
    os << *reinterpret_cast<const VkImportMetalSharedEventInfoEXT *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_METAL_EXT
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceDescriptorBufferPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceDescriptorBufferFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT:
    os << *reinterpret_cast<const VkDescriptorAddressInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT:
    os << *reinterpret_cast<const VkDescriptorBufferBindingInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT:
    os << *reinterpret_cast<const VkDescriptorBufferBindingPushDescriptorBufferHandleEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT:
    os << *reinterpret_cast<const VkDescriptorGetInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
    os << *reinterpret_cast<const VkBufferCaptureDescriptorDataInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
    os << *reinterpret_cast<const VkImageCaptureDescriptorDataInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
    os << *reinterpret_cast<const VkImageViewCaptureDescriptorDataInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
    os << *reinterpret_cast<const VkSamplerCaptureDescriptorDataInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkOpaqueCaptureDescriptorDataCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
    os << *reinterpret_cast<const VkAccelerationStructureCaptureDescriptorDataInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkGraphicsPipelineLibraryCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV:
    os << *reinterpret_cast<const VkPipelineFragmentShadingRateEnumStateCreateInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV:
    os << *reinterpret_cast<const VkAccelerationStructureGeometryMotionTrianglesDataNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV:
    os << *reinterpret_cast<const VkAccelerationStructureMotionInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceRayTracingMotionBlurFeaturesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceFragmentDensityMap2FeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceFragmentDensityMap2PropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM:
    os << *reinterpret_cast<const VkCopyCommandTransformInfoQCOM *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceImageCompressionControlFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT:
    os << *reinterpret_cast<const VkImageCompressionControlEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkImageCompressionPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDevice4444FormatsFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceFaultFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT:
    os << *reinterpret_cast<const VkDeviceFaultCountsEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT:
    os << *reinterpret_cast<const VkDeviceFaultInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT *>(pStruct);
    break;
#ifdef VK_USE_PLATFORM_DIRECTFB_EXT
  case VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkDirectFBSurfaceCreateInfoEXT *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_DIRECTFB_EXT
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkMutableDescriptorTypeCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT:
    os << *reinterpret_cast<const VkVertexInputBindingDescription2EXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT:
    os << *reinterpret_cast<const VkVertexInputAttributeDescription2EXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceDrmPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceAddressBindingReportFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT:
    os << *reinterpret_cast<const VkDeviceAddressBindingCallbackDataEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceDepthClipControlFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkPipelineViewportDepthClipControlCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT *>(pStruct);
    break;
#ifdef VK_USE_PLATFORM_FUCHSIA
  case VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA:
    os << *reinterpret_cast<const VkImportMemoryZirconHandleInfoFUCHSIA *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_FUCHSIA
#ifdef VK_USE_PLATFORM_FUCHSIA
  case VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA:
    os << *reinterpret_cast<const VkMemoryZirconHandlePropertiesFUCHSIA *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_FUCHSIA
#ifdef VK_USE_PLATFORM_FUCHSIA
  case VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA:
    os << *reinterpret_cast<const VkMemoryGetZirconHandleInfoFUCHSIA *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_FUCHSIA
#ifdef VK_USE_PLATFORM_FUCHSIA
  case VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA:
    os << *reinterpret_cast<const VkImportSemaphoreZirconHandleInfoFUCHSIA *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_FUCHSIA
#ifdef VK_USE_PLATFORM_FUCHSIA
  case VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA:
    os << *reinterpret_cast<const VkSemaphoreGetZirconHandleInfoFUCHSIA *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_FUCHSIA
#ifdef VK_USE_PLATFORM_FUCHSIA
  case VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA:
    os << *reinterpret_cast<const VkBufferCollectionCreateInfoFUCHSIA *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_FUCHSIA
#ifdef VK_USE_PLATFORM_FUCHSIA
  case VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA:
    os << *reinterpret_cast<const VkImportMemoryBufferCollectionFUCHSIA *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_FUCHSIA
#ifdef VK_USE_PLATFORM_FUCHSIA
  case VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA:
    os << *reinterpret_cast<const VkBufferCollectionImageCreateInfoFUCHSIA *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_FUCHSIA
#ifdef VK_USE_PLATFORM_FUCHSIA
  case VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA:
    os << *reinterpret_cast<const VkBufferCollectionConstraintsInfoFUCHSIA *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_FUCHSIA
#ifdef VK_USE_PLATFORM_FUCHSIA
  case VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA:
    os << *reinterpret_cast<const VkBufferConstraintsInfoFUCHSIA *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_FUCHSIA
#ifdef VK_USE_PLATFORM_FUCHSIA
  case VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA:
    os << *reinterpret_cast<const VkBufferCollectionBufferCreateInfoFUCHSIA *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_FUCHSIA
#ifdef VK_USE_PLATFORM_FUCHSIA
  case VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA:
    os << *reinterpret_cast<const VkSysmemColorSpaceFUCHSIA *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_FUCHSIA
#ifdef VK_USE_PLATFORM_FUCHSIA
  case VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA:
    os << *reinterpret_cast<const VkBufferCollectionPropertiesFUCHSIA *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_FUCHSIA
#ifdef VK_USE_PLATFORM_FUCHSIA
  case VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA:
    os << *reinterpret_cast<const VkImageFormatConstraintsInfoFUCHSIA *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_FUCHSIA
#ifdef VK_USE_PLATFORM_FUCHSIA
  case VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA:
    os << *reinterpret_cast<const VkImageConstraintsInfoFUCHSIA *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_FUCHSIA
  case VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI:
    os << *reinterpret_cast<const VkSubpassShadingPipelineCreateInfoHUAWEI *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI:
    os << *reinterpret_cast<const VkPhysicalDeviceSubpassShadingFeaturesHUAWEI *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI:
    os << *reinterpret_cast<const VkPhysicalDeviceSubpassShadingPropertiesHUAWEI *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI:
    os << *reinterpret_cast<const VkPhysicalDeviceInvocationMaskFeaturesHUAWEI *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV:
    os << *reinterpret_cast<const VkMemoryGetRemoteAddressInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceExternalMemoryRDMAFeaturesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT:
    os << *reinterpret_cast<const VkPipelinePropertiesIdentifierEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDevicePipelinePropertiesFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT:
    os << *reinterpret_cast<const VkSubpassResolvePerformanceQueryEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT:
    os << *reinterpret_cast<const VkMultisampledRenderToSingleSampledInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceExtendedDynamicState2FeaturesEXT *>(pStruct);
    break;
#ifdef VK_USE_PLATFORM_SCREEN_QNX
  case VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX:
    os << *reinterpret_cast<const VkScreenSurfaceCreateInfoQNX *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_SCREEN_QNX
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceColorWriteEnableFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkPipelineColorWriteCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceImageViewMinLodFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkImageViewMinLodCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceMultiDrawFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceMultiDrawPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceImage2DViewOf3DFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderTileImageFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderTileImagePropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT:
    os << *reinterpret_cast<const VkMicromapBuildInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkMicromapCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceOpacityMicromapFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceOpacityMicromapPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT:
    os << *reinterpret_cast<const VkMicromapVersionInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT:
    os << *reinterpret_cast<const VkCopyMicromapToMemoryInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT:
    os << *reinterpret_cast<const VkCopyMemoryToMicromapInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT:
    os << *reinterpret_cast<const VkCopyMicromapInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT:
    os << *reinterpret_cast<const VkMicromapBuildSizesInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT:
    os << *reinterpret_cast<const VkAccelerationStructureTrianglesOpacityMicromapEXT *>(pStruct);
    break;
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceDisplacementMicromapFeaturesNV *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_PROPERTIES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceDisplacementMicromapPropertiesNV *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
#ifdef VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_DISPLACEMENT_MICROMAP_NV:
    os << *reinterpret_cast<const VkAccelerationStructureTrianglesDisplacementMicromapNV *>(pStruct);
    break;
#endif //VK_ENABLE_BETA_EXTENSIONS
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI:
    os << *reinterpret_cast<const VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI:
    os << *reinterpret_cast<const VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceBorderColorSwizzleFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkSamplerBorderColorComponentMappingCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderCorePropertiesARM *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkImageViewSlicedCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE:
    os << *reinterpret_cast<const VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE:
    os << *reinterpret_cast<const VkDescriptorSetBindingReferenceVALVE *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE:
    os << *reinterpret_cast<const VkDescriptorSetLayoutHostMappingInfoVALVE *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceDepthClampZeroOneFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM:
    os << *reinterpret_cast<const VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM:
    os << *reinterpret_cast<const VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM:
    os << *reinterpret_cast<const VkSubpassFragmentDensityMapOffsetEndInfoQCOM *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceCopyMemoryIndirectFeaturesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceCopyMemoryIndirectPropertiesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceMemoryDecompressionFeaturesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceMemoryDecompressionPropertiesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV:
    os << *reinterpret_cast<const VkComputePipelineIndirectBufferInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV:
    os << *reinterpret_cast<const VkPipelineIndirectDeviceAddressInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceLinearColorAttachmentFeaturesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM:
    os << *reinterpret_cast<const VkImageViewSampleWeightCreateInfoQCOM *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM:
    os << *reinterpret_cast<const VkPhysicalDeviceImageProcessingFeaturesQCOM *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM:
    os << *reinterpret_cast<const VkPhysicalDeviceImageProcessingPropertiesQCOM *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT:
    os << *reinterpret_cast<const VkExternalMemoryAcquireUnmodifiedEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceExtendedDynamicState3FeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceExtendedDynamicState3PropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT:
    os << *reinterpret_cast<const VkRenderPassCreationControlEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkRenderPassCreationFeedbackCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkRenderPassSubpassFeedbackCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG:
    os << *reinterpret_cast<const VkDirectDriverLoadingInfoLUNARG *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG:
    os << *reinterpret_cast<const VkDirectDriverLoadingListLUNARG *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkPipelineShaderStageModuleIdentifierCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT:
    os << *reinterpret_cast<const VkShaderModuleIdentifierEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceOpticalFlowFeaturesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceOpticalFlowPropertiesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV:
    os << *reinterpret_cast<const VkOpticalFlowImageFormatInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV:
    os << *reinterpret_cast<const VkOpticalFlowImageFormatPropertiesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV:
    os << *reinterpret_cast<const VkOpticalFlowSessionCreateInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV:
    os << *reinterpret_cast<const VkOpticalFlowSessionCreatePrivateDataInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV:
    os << *reinterpret_cast<const VkOpticalFlowExecuteInfoNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceLegacyDitheringFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDevicePipelineProtectedAccessFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderObjectFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderObjectPropertiesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT:
    os << *reinterpret_cast<const VkShaderCreateInfoEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM:
    os << *reinterpret_cast<const VkPhysicalDeviceTilePropertiesFeaturesQCOM *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM:
    os << *reinterpret_cast<const VkTilePropertiesQCOM *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC:
    os << *reinterpret_cast<const VkPhysicalDeviceAmigoProfilingFeaturesSEC *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC:
    os << *reinterpret_cast<const VkAmigoProfilingSubmitInfoSEC *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM:
    os << *reinterpret_cast<const VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV:
    os << *reinterpret_cast<const VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM:
    os << *reinterpret_cast<const VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM:
    os << *reinterpret_cast<const VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM:
    os << *reinterpret_cast<const VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT *>(pStruct);
    break;
#ifdef VK_USE_PLATFORM_SCREEN_QNX
  case VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX:
    os << *reinterpret_cast<const VkScreenBufferPropertiesQNX *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_SCREEN_QNX
#ifdef VK_USE_PLATFORM_SCREEN_QNX
  case VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX:
    os << *reinterpret_cast<const VkScreenBufferFormatPropertiesQNX *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_SCREEN_QNX
#ifdef VK_USE_PLATFORM_SCREEN_QNX
  case VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX:
    os << *reinterpret_cast<const VkImportScreenBufferInfoQNX *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_SCREEN_QNX
#ifdef VK_USE_PLATFORM_SCREEN_QNX
  case VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX:
    os << *reinterpret_cast<const VkExternalFormatQNX *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_SCREEN_QNX
#ifdef VK_USE_PLATFORM_SCREEN_QNX
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX:
    os << *reinterpret_cast<const VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX *>(pStruct);
    break;
#endif //VK_USE_PLATFORM_SCREEN_QNX
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR:
    os << *reinterpret_cast<const VkAccelerationStructureGeometryTrianglesDataKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR:
    os << *reinterpret_cast<const VkAccelerationStructureGeometryAabbsDataKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR:
    os << *reinterpret_cast<const VkAccelerationStructureGeometryInstancesDataKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR:
    os << *reinterpret_cast<const VkAccelerationStructureGeometryKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR:
    os << *reinterpret_cast<const VkAccelerationStructureBuildGeometryInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR:
    os << *reinterpret_cast<const VkAccelerationStructureCreateInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR:
    os << *reinterpret_cast<const VkWriteDescriptorSetAccelerationStructureKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR:
    os << *reinterpret_cast<const VkPhysicalDeviceAccelerationStructureFeaturesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR:
    os << *reinterpret_cast<const VkPhysicalDeviceAccelerationStructurePropertiesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR:
    os << *reinterpret_cast<const VkAccelerationStructureDeviceAddressInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR:
    os << *reinterpret_cast<const VkAccelerationStructureVersionInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR:
    os << *reinterpret_cast<const VkCopyAccelerationStructureToMemoryInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR:
    os << *reinterpret_cast<const VkCopyMemoryToAccelerationStructureInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR:
    os << *reinterpret_cast<const VkCopyAccelerationStructureInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR:
    os << *reinterpret_cast<const VkAccelerationStructureBuildSizesInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR:
    os << *reinterpret_cast<const VkRayTracingShaderGroupCreateInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR:
    os << *reinterpret_cast<const VkRayTracingPipelineInterfaceCreateInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR:
    os << *reinterpret_cast<const VkRayTracingPipelineCreateInfoKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR:
    os << *reinterpret_cast<const VkPhysicalDeviceRayTracingPipelineFeaturesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR:
    os << *reinterpret_cast<const VkPhysicalDeviceRayTracingPipelinePropertiesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR:
    os << *reinterpret_cast<const VkPhysicalDeviceRayQueryFeaturesKHR *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceMeshShaderFeaturesEXT *>(pStruct);
    break;
  case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT:
    os << *reinterpret_cast<const VkPhysicalDeviceMeshShaderPropertiesEXT *>(pStruct);
    break;
  default: break;
  }
  return os;
}


// Define print functions.

void CommandPrinter::PrintBeginCommandBufferArgs(
  std::ostream & os, const BeginCommandBufferArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBeginInfo" << std::endl;
    // pointer
    if (args.pBeginInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pBeginInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintEndCommandBufferArgs(
  std::ostream & os, const EndCommandBufferArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
}

void CommandPrinter::PrintResetCommandBufferArgs(
  std::ostream & os, const ResetCommandBufferArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkCommandBufferResetFlags
    os << "value: " << args.flags << std::endl;
  }
}

void CommandPrinter::PrintCmdBindPipelineArgs(
  std::ostream & os, const CmdBindPipelineArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineBindPoint" << std::endl;
    // pipelineBindPoint -> Field -> VkPipelineBindPoint
    os << "value: " << args.pipelineBindPoint << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipeline" << std::endl;
    // pipeline -> Field -> VkPipeline
    os << "value: " << args.pipeline << std::endl;
  }
}

void CommandPrinter::PrintCmdSetViewportArgs(
  std::ostream & os, const CmdSetViewportArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstViewport" << std::endl;
    // firstViewport -> Field -> uint32_t
    os << "value: " << args.firstViewport << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewportCount" << std::endl;
    // viewportCount -> Field -> uint32_t
    os << "value: " << args.viewportCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pViewports" << std::endl;
    // pViewports -> Field -> ConstDynamicArray(VkViewport)
    if (args.viewportCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkViewport" << std::endl;
        for (uint64_t i = 0; i < args.viewportCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pViewports << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSetScissorArgs(
  std::ostream & os, const CmdSetScissorArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstScissor" << std::endl;
    // firstScissor -> Field -> uint32_t
    os << "value: " << args.firstScissor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  scissorCount" << std::endl;
    // scissorCount -> Field -> uint32_t
    os << "value: " << args.scissorCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pScissors" << std::endl;
    // pScissors -> Field -> ConstDynamicArray(VkRect2D)
    if (args.scissorCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkRect2D" << std::endl;
        for (uint64_t i = 0; i < args.scissorCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pScissors << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSetLineWidthArgs(
  std::ostream & os, const CmdSetLineWidthArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  lineWidth" << std::endl;
    // lineWidth -> Field -> float
    os << "value: " << args.lineWidth << std::endl;
  }
}

void CommandPrinter::PrintCmdSetDepthBiasArgs(
  std::ostream & os, const CmdSetDepthBiasArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasConstantFactor" << std::endl;
    // depthBiasConstantFactor -> Field -> float
    os << "value: " << args.depthBiasConstantFactor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasClamp" << std::endl;
    // depthBiasClamp -> Field -> float
    os << "value: " << args.depthBiasClamp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasSlopeFactor" << std::endl;
    // depthBiasSlopeFactor -> Field -> float
    os << "value: " << args.depthBiasSlopeFactor << std::endl;
  }
}

void CommandPrinter::PrintCmdSetBlendConstantsArgs(
  std::ostream & os, const CmdSetBlendConstantsArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  blendConstants" << std::endl;
    // blendConstants -> Field -> ConstFixedArray(float)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # float" << std::endl;
        for (uint64_t i = 0; i < 4; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.blendConstants << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSetDepthBoundsArgs(
  std::ostream & os, const CmdSetDepthBoundsArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  minDepthBounds" << std::endl;
    // minDepthBounds -> Field -> float
    os << "value: " << args.minDepthBounds << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDepthBounds" << std::endl;
    // maxDepthBounds -> Field -> float
    os << "value: " << args.maxDepthBounds << std::endl;
  }
}

void CommandPrinter::PrintCmdSetStencilCompareMaskArgs(
  std::ostream & os, const CmdSetStencilCompareMaskArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  faceMask" << std::endl;
    // faceMask -> Field -> VkStencilFaceFlags
    os << "value: " << args.faceMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compareMask" << std::endl;
    // compareMask -> Field -> uint32_t
    os << "value: " << args.compareMask << std::endl;
  }
}

void CommandPrinter::PrintCmdSetStencilWriteMaskArgs(
  std::ostream & os, const CmdSetStencilWriteMaskArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  faceMask" << std::endl;
    // faceMask -> Field -> VkStencilFaceFlags
    os << "value: " << args.faceMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  writeMask" << std::endl;
    // writeMask -> Field -> uint32_t
    os << "value: " << args.writeMask << std::endl;
  }
}

void CommandPrinter::PrintCmdSetStencilReferenceArgs(
  std::ostream & os, const CmdSetStencilReferenceArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  faceMask" << std::endl;
    // faceMask -> Field -> VkStencilFaceFlags
    os << "value: " << args.faceMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  reference" << std::endl;
    // reference -> Field -> uint32_t
    os << "value: " << args.reference << std::endl;
  }
}

void CommandPrinter::PrintCmdBindDescriptorSetsArgs(
  std::ostream & os, const CmdBindDescriptorSetsArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineBindPoint" << std::endl;
    // pipelineBindPoint -> Field -> VkPipelineBindPoint
    os << "value: " << args.pipelineBindPoint << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layout" << std::endl;
    // layout -> Field -> VkPipelineLayout
    os << "value: " << args.layout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstSet" << std::endl;
    // firstSet -> Field -> uint32_t
    os << "value: " << args.firstSet << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorSetCount" << std::endl;
    // descriptorSetCount -> Field -> uint32_t
    os << "value: " << args.descriptorSetCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDescriptorSets" << std::endl;
    // pDescriptorSets -> Field -> ConstDynamicArray(VkDescriptorSet)
    if (args.descriptorSetCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDescriptorSet" << std::endl;
        for (uint64_t i = 0; i < args.descriptorSetCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pDescriptorSets << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dynamicOffsetCount" << std::endl;
    // dynamicOffsetCount -> Field -> uint32_t
    os << "value: " << args.dynamicOffsetCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDynamicOffsets" << std::endl;
    // pDynamicOffsets -> Field -> ConstDynamicArray(uint32_t)
    if (args.dynamicOffsetCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < args.dynamicOffsetCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pDynamicOffsets << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdBindIndexBufferArgs(
  std::ostream & os, const CmdBindIndexBufferArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexType" << std::endl;
    // indexType -> Field -> VkIndexType
    os << "value: " << args.indexType << std::endl;
  }
}

void CommandPrinter::PrintCmdBindVertexBuffersArgs(
  std::ostream & os, const CmdBindVertexBuffersArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstBinding" << std::endl;
    // firstBinding -> Field -> uint32_t
    os << "value: " << args.firstBinding << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bindingCount" << std::endl;
    // bindingCount -> Field -> uint32_t
    os << "value: " << args.bindingCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBuffers" << std::endl;
    // pBuffers -> Field -> ConstDynamicArray(VkBuffer)
    if (args.bindingCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkBuffer" << std::endl;
        for (uint64_t i = 0; i < args.bindingCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pBuffers << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pOffsets" << std::endl;
    // pOffsets -> Field -> ConstDynamicArray(VkDeviceSize)
    if (args.bindingCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDeviceSize" << std::endl;
        for (uint64_t i = 0; i < args.bindingCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pOffsets << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdDrawArgs(
  std::ostream & os, const CmdDrawArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexCount" << std::endl;
    // vertexCount -> Field -> uint32_t
    os << "value: " << args.vertexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instanceCount" << std::endl;
    // instanceCount -> Field -> uint32_t
    os << "value: " << args.instanceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstVertex" << std::endl;
    // firstVertex -> Field -> uint32_t
    os << "value: " << args.firstVertex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstInstance" << std::endl;
    // firstInstance -> Field -> uint32_t
    os << "value: " << args.firstInstance << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawIndexedArgs(
  std::ostream & os, const CmdDrawIndexedArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indexCount" << std::endl;
    // indexCount -> Field -> uint32_t
    os << "value: " << args.indexCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instanceCount" << std::endl;
    // instanceCount -> Field -> uint32_t
    os << "value: " << args.instanceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstIndex" << std::endl;
    // firstIndex -> Field -> uint32_t
    os << "value: " << args.firstIndex << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexOffset" << std::endl;
    // vertexOffset -> Field -> int32_t
    os << "value: " << args.vertexOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstInstance" << std::endl;
    // firstInstance -> Field -> uint32_t
    os << "value: " << args.firstInstance << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawIndirectArgs(
  std::ostream & os, const CmdDrawIndirectArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drawCount" << std::endl;
    // drawCount -> Field -> uint32_t
    os << "value: " << args.drawCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawIndexedIndirectArgs(
  std::ostream & os, const CmdDrawIndexedIndirectArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drawCount" << std::endl;
    // drawCount -> Field -> uint32_t
    os << "value: " << args.drawCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
}

void CommandPrinter::PrintCmdDispatchArgs(
  std::ostream & os, const CmdDispatchArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountX" << std::endl;
    // groupCountX -> Field -> uint32_t
    os << "value: " << args.groupCountX << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountY" << std::endl;
    // groupCountY -> Field -> uint32_t
    os << "value: " << args.groupCountY << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountZ" << std::endl;
    // groupCountZ -> Field -> uint32_t
    os << "value: " << args.groupCountZ << std::endl;
  }
}

void CommandPrinter::PrintCmdDispatchIndirectArgs(
  std::ostream & os, const CmdDispatchIndirectArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }
}

void CommandPrinter::PrintCmdCopyBufferArgs(
  std::ostream & os, const CmdCopyBufferArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcBuffer" << std::endl;
    // srcBuffer -> Field -> VkBuffer
    os << "value: " << args.srcBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBuffer" << std::endl;
    // dstBuffer -> Field -> VkBuffer
    os << "value: " << args.dstBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << args.regionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkBufferCopy)
    if (args.regionCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkBufferCopy" << std::endl;
        for (uint64_t i = 0; i < args.regionCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pRegions << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdCopyImageArgs(
  std::ostream & os, const CmdCopyImageArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImage" << std::endl;
    // srcImage -> Field -> VkImage
    os << "value: " << args.srcImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImageLayout" << std::endl;
    // srcImageLayout -> Field -> VkImageLayout
    os << "value: " << args.srcImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImage" << std::endl;
    // dstImage -> Field -> VkImage
    os << "value: " << args.dstImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImageLayout" << std::endl;
    // dstImageLayout -> Field -> VkImageLayout
    os << "value: " << args.dstImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << args.regionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkImageCopy)
    if (args.regionCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkImageCopy" << std::endl;
        for (uint64_t i = 0; i < args.regionCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pRegions << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdBlitImageArgs(
  std::ostream & os, const CmdBlitImageArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImage" << std::endl;
    // srcImage -> Field -> VkImage
    os << "value: " << args.srcImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImageLayout" << std::endl;
    // srcImageLayout -> Field -> VkImageLayout
    os << "value: " << args.srcImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImage" << std::endl;
    // dstImage -> Field -> VkImage
    os << "value: " << args.dstImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImageLayout" << std::endl;
    // dstImageLayout -> Field -> VkImageLayout
    os << "value: " << args.dstImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << args.regionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkImageBlit)
    if (args.regionCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkImageBlit" << std::endl;
        for (uint64_t i = 0; i < args.regionCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pRegions << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  filter" << std::endl;
    // filter -> Field -> VkFilter
    os << "value: " << args.filter << std::endl;
  }
}

void CommandPrinter::PrintCmdCopyBufferToImageArgs(
  std::ostream & os, const CmdCopyBufferToImageArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcBuffer" << std::endl;
    // srcBuffer -> Field -> VkBuffer
    os << "value: " << args.srcBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImage" << std::endl;
    // dstImage -> Field -> VkImage
    os << "value: " << args.dstImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImageLayout" << std::endl;
    // dstImageLayout -> Field -> VkImageLayout
    os << "value: " << args.dstImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << args.regionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkBufferImageCopy)
    if (args.regionCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkBufferImageCopy" << std::endl;
        for (uint64_t i = 0; i < args.regionCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pRegions << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdCopyImageToBufferArgs(
  std::ostream & os, const CmdCopyImageToBufferArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImage" << std::endl;
    // srcImage -> Field -> VkImage
    os << "value: " << args.srcImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImageLayout" << std::endl;
    // srcImageLayout -> Field -> VkImageLayout
    os << "value: " << args.srcImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBuffer" << std::endl;
    // dstBuffer -> Field -> VkBuffer
    os << "value: " << args.dstBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << args.regionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkBufferImageCopy)
    if (args.regionCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkBufferImageCopy" << std::endl;
        for (uint64_t i = 0; i < args.regionCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pRegions << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdUpdateBufferArgs(
  std::ostream & os, const CmdUpdateBufferArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBuffer" << std::endl;
    // dstBuffer -> Field -> VkBuffer
    os << "value: " << args.dstBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffset" << std::endl;
    // dstOffset -> Field -> VkDeviceSize
    os << "value: " << args.dstOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dataSize" << std::endl;
    // dataSize -> Field -> VkDeviceSize
    os << "value: " << args.dataSize << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pData" << std::endl;
    if (args.dataSize == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << std::hex;
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        const uint8_t *p = (const uint8_t *)args.pData;
        for (uint64_t i = 0; i < args.dataSize; ++i) {
          os << "- 0x" << p[i] << std::endl;
        }
      }
      os << std::dec;
    }
  }
}

void CommandPrinter::PrintCmdFillBufferArgs(
  std::ostream & os, const CmdFillBufferArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBuffer" << std::endl;
    // dstBuffer -> Field -> VkBuffer
    os << "value: " << args.dstBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffset" << std::endl;
    // dstOffset -> Field -> VkDeviceSize
    os << "value: " << args.dstOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> VkDeviceSize
    os << "value: " << args.size << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  data" << std::endl;
    // data -> Field -> uint32_t
    os << "value: " << args.data << std::endl;
  }
}

void CommandPrinter::PrintCmdClearColorImageArgs(
  std::ostream & os, const CmdClearColorImageArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << args.image << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageLayout" << std::endl;
    // imageLayout -> Field -> VkImageLayout
    os << "value: " << args.imageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pColor" << std::endl;
    // pointer
    if (args.pColor != nullptr) {
      os <<  "members:" << std::endl << *args.pColor << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rangeCount" << std::endl;
    // rangeCount -> Field -> uint32_t
    os << "value: " << args.rangeCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRanges" << std::endl;
    // pRanges -> Field -> ConstDynamicArray(VkImageSubresourceRange)
    if (args.rangeCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkImageSubresourceRange" << std::endl;
        for (uint64_t i = 0; i < args.rangeCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pRanges << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdClearDepthStencilImageArgs(
  std::ostream & os, const CmdClearDepthStencilImageArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  image" << std::endl;
    // image -> Field -> VkImage
    os << "value: " << args.image << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageLayout" << std::endl;
    // imageLayout -> Field -> VkImageLayout
    os << "value: " << args.imageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDepthStencil" << std::endl;
    // pointer
    if (args.pDepthStencil != nullptr) {
      os <<  "members:" << std::endl << *args.pDepthStencil << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rangeCount" << std::endl;
    // rangeCount -> Field -> uint32_t
    os << "value: " << args.rangeCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRanges" << std::endl;
    // pRanges -> Field -> ConstDynamicArray(VkImageSubresourceRange)
    if (args.rangeCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkImageSubresourceRange" << std::endl;
        for (uint64_t i = 0; i < args.rangeCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pRanges << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdClearAttachmentsArgs(
  std::ostream & os, const CmdClearAttachmentsArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentCount" << std::endl;
    // attachmentCount -> Field -> uint32_t
    os << "value: " << args.attachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAttachments" << std::endl;
    // pAttachments -> Field -> ConstDynamicArray(VkClearAttachment)
    if (args.attachmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkClearAttachment" << std::endl;
        for (uint64_t i = 0; i < args.attachmentCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pAttachments << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rectCount" << std::endl;
    // rectCount -> Field -> uint32_t
    os << "value: " << args.rectCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRects" << std::endl;
    // pRects -> Field -> ConstDynamicArray(VkClearRect)
    if (args.rectCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkClearRect" << std::endl;
        for (uint64_t i = 0; i < args.rectCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pRects << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdResolveImageArgs(
  std::ostream & os, const CmdResolveImageArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImage" << std::endl;
    // srcImage -> Field -> VkImage
    os << "value: " << args.srcImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcImageLayout" << std::endl;
    // srcImageLayout -> Field -> VkImageLayout
    os << "value: " << args.srcImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImage" << std::endl;
    // dstImage -> Field -> VkImage
    os << "value: " << args.dstImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImageLayout" << std::endl;
    // dstImageLayout -> Field -> VkImageLayout
    os << "value: " << args.dstImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  regionCount" << std::endl;
    // regionCount -> Field -> uint32_t
    os << "value: " << args.regionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRegions" << std::endl;
    // pRegions -> Field -> ConstDynamicArray(VkImageResolve)
    if (args.regionCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkImageResolve" << std::endl;
        for (uint64_t i = 0; i < args.regionCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pRegions << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSetEventArgs(
  std::ostream & os, const CmdSetEventArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  event" << std::endl;
    // event -> Field -> VkEvent
    os << "value: " << args.event << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stageMask" << std::endl;
    // stageMask -> Field -> VkPipelineStageFlags
    os << "value: " << args.stageMask << std::endl;
  }
}

void CommandPrinter::PrintCmdResetEventArgs(
  std::ostream & os, const CmdResetEventArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  event" << std::endl;
    // event -> Field -> VkEvent
    os << "value: " << args.event << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stageMask" << std::endl;
    // stageMask -> Field -> VkPipelineStageFlags
    os << "value: " << args.stageMask << std::endl;
  }
}

void CommandPrinter::PrintCmdWaitEventsArgs(
  std::ostream & os, const CmdWaitEventsArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  eventCount" << std::endl;
    // eventCount -> Field -> uint32_t
    os << "value: " << args.eventCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pEvents" << std::endl;
    // pEvents -> Field -> ConstDynamicArray(VkEvent)
    if (args.eventCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkEvent" << std::endl;
        for (uint64_t i = 0; i < args.eventCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pEvents << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcStageMask" << std::endl;
    // srcStageMask -> Field -> VkPipelineStageFlags
    os << "value: " << args.srcStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstStageMask" << std::endl;
    // dstStageMask -> Field -> VkPipelineStageFlags
    os << "value: " << args.dstStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryBarrierCount" << std::endl;
    // memoryBarrierCount -> Field -> uint32_t
    os << "value: " << args.memoryBarrierCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMemoryBarriers" << std::endl;
    // pMemoryBarriers -> Field -> ConstDynamicArray(VkMemoryBarrier)
    if (args.memoryBarrierCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkMemoryBarrier" << std::endl;
        for (uint64_t i = 0; i < args.memoryBarrierCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pMemoryBarriers << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferMemoryBarrierCount" << std::endl;
    // bufferMemoryBarrierCount -> Field -> uint32_t
    os << "value: " << args.bufferMemoryBarrierCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBufferMemoryBarriers" << std::endl;
    // pBufferMemoryBarriers -> Field -> ConstDynamicArray(VkBufferMemoryBarrier)
    if (args.bufferMemoryBarrierCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkBufferMemoryBarrier" << std::endl;
        for (uint64_t i = 0; i < args.bufferMemoryBarrierCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pBufferMemoryBarriers << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageMemoryBarrierCount" << std::endl;
    // imageMemoryBarrierCount -> Field -> uint32_t
    os << "value: " << args.imageMemoryBarrierCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pImageMemoryBarriers" << std::endl;
    // pImageMemoryBarriers -> Field -> ConstDynamicArray(VkImageMemoryBarrier)
    if (args.imageMemoryBarrierCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkImageMemoryBarrier" << std::endl;
        for (uint64_t i = 0; i < args.imageMemoryBarrierCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pImageMemoryBarriers << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdPipelineBarrierArgs(
  std::ostream & os, const CmdPipelineBarrierArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  srcStageMask" << std::endl;
    // srcStageMask -> Field -> VkPipelineStageFlags
    os << "value: " << args.srcStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstStageMask" << std::endl;
    // dstStageMask -> Field -> VkPipelineStageFlags
    os << "value: " << args.dstStageMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dependencyFlags" << std::endl;
    // dependencyFlags -> Field -> VkDependencyFlags
    os << "value: " << args.dependencyFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  memoryBarrierCount" << std::endl;
    // memoryBarrierCount -> Field -> uint32_t
    os << "value: " << args.memoryBarrierCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMemoryBarriers" << std::endl;
    // pMemoryBarriers -> Field -> ConstDynamicArray(VkMemoryBarrier)
    if (args.memoryBarrierCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkMemoryBarrier" << std::endl;
        for (uint64_t i = 0; i < args.memoryBarrierCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pMemoryBarriers << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferMemoryBarrierCount" << std::endl;
    // bufferMemoryBarrierCount -> Field -> uint32_t
    os << "value: " << args.bufferMemoryBarrierCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBufferMemoryBarriers" << std::endl;
    // pBufferMemoryBarriers -> Field -> ConstDynamicArray(VkBufferMemoryBarrier)
    if (args.bufferMemoryBarrierCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkBufferMemoryBarrier" << std::endl;
        for (uint64_t i = 0; i < args.bufferMemoryBarrierCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pBufferMemoryBarriers << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageMemoryBarrierCount" << std::endl;
    // imageMemoryBarrierCount -> Field -> uint32_t
    os << "value: " << args.imageMemoryBarrierCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pImageMemoryBarriers" << std::endl;
    // pImageMemoryBarriers -> Field -> ConstDynamicArray(VkImageMemoryBarrier)
    if (args.imageMemoryBarrierCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkImageMemoryBarrier" << std::endl;
        for (uint64_t i = 0; i < args.imageMemoryBarrierCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pImageMemoryBarriers << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdBeginQueryArgs(
  std::ostream & os, const CmdBeginQueryArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryPool" << std::endl;
    // queryPool -> Field -> VkQueryPool
    os << "value: " << args.queryPool << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  query" << std::endl;
    // query -> Field -> uint32_t
    os << "value: " << args.query << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkQueryControlFlags
    os << "value: " << args.flags << std::endl;
  }
}

void CommandPrinter::PrintCmdEndQueryArgs(
  std::ostream & os, const CmdEndQueryArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryPool" << std::endl;
    // queryPool -> Field -> VkQueryPool
    os << "value: " << args.queryPool << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  query" << std::endl;
    // query -> Field -> uint32_t
    os << "value: " << args.query << std::endl;
  }
}

void CommandPrinter::PrintCmdResetQueryPoolArgs(
  std::ostream & os, const CmdResetQueryPoolArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryPool" << std::endl;
    // queryPool -> Field -> VkQueryPool
    os << "value: " << args.queryPool << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstQuery" << std::endl;
    // firstQuery -> Field -> uint32_t
    os << "value: " << args.firstQuery << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryCount" << std::endl;
    // queryCount -> Field -> uint32_t
    os << "value: " << args.queryCount << std::endl;
  }
}

void CommandPrinter::PrintCmdWriteTimestampArgs(
  std::ostream & os, const CmdWriteTimestampArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineStage" << std::endl;
    // pipelineStage -> Field -> VkPipelineStageFlagBits
    os << "value: " << args.pipelineStage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryPool" << std::endl;
    // queryPool -> Field -> VkQueryPool
    os << "value: " << args.queryPool << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  query" << std::endl;
    // query -> Field -> uint32_t
    os << "value: " << args.query << std::endl;
  }
}

void CommandPrinter::PrintCmdCopyQueryPoolResultsArgs(
  std::ostream & os, const CmdCopyQueryPoolResultsArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryPool" << std::endl;
    // queryPool -> Field -> VkQueryPool
    os << "value: " << args.queryPool << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstQuery" << std::endl;
    // firstQuery -> Field -> uint32_t
    os << "value: " << args.firstQuery << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryCount" << std::endl;
    // queryCount -> Field -> uint32_t
    os << "value: " << args.queryCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBuffer" << std::endl;
    // dstBuffer -> Field -> VkBuffer
    os << "value: " << args.dstBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffset" << std::endl;
    // dstOffset -> Field -> VkDeviceSize
    os << "value: " << args.dstOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> VkDeviceSize
    os << "value: " << args.stride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkQueryResultFlags
    os << "value: " << args.flags << std::endl;
  }
}

void CommandPrinter::PrintCmdPushConstantsArgs(
  std::ostream & os, const CmdPushConstantsArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layout" << std::endl;
    // layout -> Field -> VkPipelineLayout
    os << "value: " << args.layout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stageFlags" << std::endl;
    // stageFlags -> Field -> VkShaderStageFlags
    os << "value: " << args.stageFlags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> uint32_t
    os << "value: " << args.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  size" << std::endl;
    // size -> Field -> uint32_t
    os << "value: " << args.size << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pValues" << std::endl;
    if (args.size == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << std::hex;
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        const uint8_t *p = (const uint8_t *)args.pValues;
        for (uint64_t i = 0; i < args.size; ++i) {
          os << "- 0x" << p[i] << std::endl;
        }
      }
      os << std::dec;
    }
  }
}

void CommandPrinter::PrintCmdBeginRenderPassArgs(
  std::ostream & os, const CmdBeginRenderPassArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRenderPassBegin" << std::endl;
    // pointer
    if (args.pRenderPassBegin != nullptr) {
      os <<  "members:" << std::endl << *args.pRenderPassBegin << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  contents" << std::endl;
    // contents -> Field -> VkSubpassContents
    os << "value: " << args.contents << std::endl;
  }
}

void CommandPrinter::PrintCmdNextSubpassArgs(
  std::ostream & os, const CmdNextSubpassArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  contents" << std::endl;
    // contents -> Field -> VkSubpassContents
    os << "value: " << args.contents << std::endl;
  }
}

void CommandPrinter::PrintCmdEndRenderPassArgs(
  std::ostream & os, const CmdEndRenderPassArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
}

void CommandPrinter::PrintCmdExecuteCommandsArgs(
  std::ostream & os, const CmdExecuteCommandsArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBufferCount" << std::endl;
    // commandBufferCount -> Field -> uint32_t
    os << "value: " << args.commandBufferCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCommandBuffers" << std::endl;
    // pCommandBuffers -> Field -> ConstDynamicArray(VkCommandBuffer)
    if (args.commandBufferCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkCommandBuffer" << std::endl;
        for (uint64_t i = 0; i < args.commandBufferCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pCommandBuffers << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSetDeviceMaskArgs(
  std::ostream & os, const CmdSetDeviceMaskArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceMask" << std::endl;
    // deviceMask -> Field -> uint32_t
    os << "value: " << args.deviceMask << std::endl;
  }
}

void CommandPrinter::PrintCmdDispatchBaseArgs(
  std::ostream & os, const CmdDispatchBaseArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  baseGroupX" << std::endl;
    // baseGroupX -> Field -> uint32_t
    os << "value: " << args.baseGroupX << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  baseGroupY" << std::endl;
    // baseGroupY -> Field -> uint32_t
    os << "value: " << args.baseGroupY << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  baseGroupZ" << std::endl;
    // baseGroupZ -> Field -> uint32_t
    os << "value: " << args.baseGroupZ << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountX" << std::endl;
    // groupCountX -> Field -> uint32_t
    os << "value: " << args.groupCountX << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountY" << std::endl;
    // groupCountY -> Field -> uint32_t
    os << "value: " << args.groupCountY << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountZ" << std::endl;
    // groupCountZ -> Field -> uint32_t
    os << "value: " << args.groupCountZ << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawIndirectCountArgs(
  std::ostream & os, const CmdDrawIndirectCountArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBuffer" << std::endl;
    // countBuffer -> Field -> VkBuffer
    os << "value: " << args.countBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBufferOffset" << std::endl;
    // countBufferOffset -> Field -> VkDeviceSize
    os << "value: " << args.countBufferOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDrawCount" << std::endl;
    // maxDrawCount -> Field -> uint32_t
    os << "value: " << args.maxDrawCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawIndexedIndirectCountArgs(
  std::ostream & os, const CmdDrawIndexedIndirectCountArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBuffer" << std::endl;
    // countBuffer -> Field -> VkBuffer
    os << "value: " << args.countBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBufferOffset" << std::endl;
    // countBufferOffset -> Field -> VkDeviceSize
    os << "value: " << args.countBufferOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDrawCount" << std::endl;
    // maxDrawCount -> Field -> uint32_t
    os << "value: " << args.maxDrawCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
}

void CommandPrinter::PrintCmdBeginRenderPass2Args(
  std::ostream & os, const CmdBeginRenderPass2Args &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRenderPassBegin" << std::endl;
    // pointer
    if (args.pRenderPassBegin != nullptr) {
      os <<  "members:" << std::endl << *args.pRenderPassBegin << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSubpassBeginInfo" << std::endl;
    // pointer
    if (args.pSubpassBeginInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pSubpassBeginInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdNextSubpass2Args(
  std::ostream & os, const CmdNextSubpass2Args &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSubpassBeginInfo" << std::endl;
    // pointer
    if (args.pSubpassBeginInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pSubpassBeginInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSubpassEndInfo" << std::endl;
    // pointer
    if (args.pSubpassEndInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pSubpassEndInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdEndRenderPass2Args(
  std::ostream & os, const CmdEndRenderPass2Args &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSubpassEndInfo" << std::endl;
    // pointer
    if (args.pSubpassEndInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pSubpassEndInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdSetEvent2Args(
  std::ostream & os, const CmdSetEvent2Args &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  event" << std::endl;
    // event -> Field -> VkEvent
    os << "value: " << args.event << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDependencyInfo" << std::endl;
    // pointer
    if (args.pDependencyInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pDependencyInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdResetEvent2Args(
  std::ostream & os, const CmdResetEvent2Args &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  event" << std::endl;
    // event -> Field -> VkEvent
    os << "value: " << args.event << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stageMask" << std::endl;
    // stageMask -> Field -> VkPipelineStageFlags2
    os << "value: " << args.stageMask << std::endl;
  }
}

void CommandPrinter::PrintCmdWaitEvents2Args(
  std::ostream & os, const CmdWaitEvents2Args &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  eventCount" << std::endl;
    // eventCount -> Field -> uint32_t
    os << "value: " << args.eventCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pEvents" << std::endl;
    // pEvents -> Field -> ConstDynamicArray(VkEvent)
    if (args.eventCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkEvent" << std::endl;
        for (uint64_t i = 0; i < args.eventCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pEvents << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDependencyInfos" << std::endl;
    // pDependencyInfos -> Field -> ConstDynamicArray(VkDependencyInfo)
    if (args.eventCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDependencyInfo" << std::endl;
        for (uint64_t i = 0; i < args.eventCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pDependencyInfos << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdPipelineBarrier2Args(
  std::ostream & os, const CmdPipelineBarrier2Args &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDependencyInfo" << std::endl;
    // pointer
    if (args.pDependencyInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pDependencyInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdWriteTimestamp2Args(
  std::ostream & os, const CmdWriteTimestamp2Args &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stage" << std::endl;
    // stage -> Field -> VkPipelineStageFlags2
    os << "value: " << args.stage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryPool" << std::endl;
    // queryPool -> Field -> VkQueryPool
    os << "value: " << args.queryPool << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  query" << std::endl;
    // query -> Field -> uint32_t
    os << "value: " << args.query << std::endl;
  }
}

void CommandPrinter::PrintCmdCopyBuffer2Args(
  std::ostream & os, const CmdCopyBuffer2Args &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCopyBufferInfo" << std::endl;
    // pointer
    if (args.pCopyBufferInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pCopyBufferInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdCopyImage2Args(
  std::ostream & os, const CmdCopyImage2Args &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCopyImageInfo" << std::endl;
    // pointer
    if (args.pCopyImageInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pCopyImageInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdCopyBufferToImage2Args(
  std::ostream & os, const CmdCopyBufferToImage2Args &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCopyBufferToImageInfo" << std::endl;
    // pointer
    if (args.pCopyBufferToImageInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pCopyBufferToImageInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdCopyImageToBuffer2Args(
  std::ostream & os, const CmdCopyImageToBuffer2Args &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCopyImageToBufferInfo" << std::endl;
    // pointer
    if (args.pCopyImageToBufferInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pCopyImageToBufferInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdBlitImage2Args(
  std::ostream & os, const CmdBlitImage2Args &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBlitImageInfo" << std::endl;
    // pointer
    if (args.pBlitImageInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pBlitImageInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdResolveImage2Args(
  std::ostream & os, const CmdResolveImage2Args &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pResolveImageInfo" << std::endl;
    // pointer
    if (args.pResolveImageInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pResolveImageInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdBeginRenderingArgs(
  std::ostream & os, const CmdBeginRenderingArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRenderingInfo" << std::endl;
    // pointer
    if (args.pRenderingInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pRenderingInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdEndRenderingArgs(
  std::ostream & os, const CmdEndRenderingArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
}

void CommandPrinter::PrintCmdSetCullModeArgs(
  std::ostream & os, const CmdSetCullModeArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  cullMode" << std::endl;
    // cullMode -> Field -> VkCullModeFlags
    os << "value: " << args.cullMode << std::endl;
  }
}

void CommandPrinter::PrintCmdSetFrontFaceArgs(
  std::ostream & os, const CmdSetFrontFaceArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  frontFace" << std::endl;
    // frontFace -> Field -> VkFrontFace
    os << "value: " << args.frontFace << std::endl;
  }
}

void CommandPrinter::PrintCmdSetPrimitiveTopologyArgs(
  std::ostream & os, const CmdSetPrimitiveTopologyArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primitiveTopology" << std::endl;
    // primitiveTopology -> Field -> VkPrimitiveTopology
    os << "value: " << args.primitiveTopology << std::endl;
  }
}

void CommandPrinter::PrintCmdSetViewportWithCountArgs(
  std::ostream & os, const CmdSetViewportWithCountArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewportCount" << std::endl;
    // viewportCount -> Field -> uint32_t
    os << "value: " << args.viewportCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pViewports" << std::endl;
    // pViewports -> Field -> ConstDynamicArray(VkViewport)
    if (args.viewportCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkViewport" << std::endl;
        for (uint64_t i = 0; i < args.viewportCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pViewports << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSetScissorWithCountArgs(
  std::ostream & os, const CmdSetScissorWithCountArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  scissorCount" << std::endl;
    // scissorCount -> Field -> uint32_t
    os << "value: " << args.scissorCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pScissors" << std::endl;
    // pScissors -> Field -> ConstDynamicArray(VkRect2D)
    if (args.scissorCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkRect2D" << std::endl;
        for (uint64_t i = 0; i < args.scissorCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pScissors << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdBindVertexBuffers2Args(
  std::ostream & os, const CmdBindVertexBuffers2Args &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstBinding" << std::endl;
    // firstBinding -> Field -> uint32_t
    os << "value: " << args.firstBinding << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bindingCount" << std::endl;
    // bindingCount -> Field -> uint32_t
    os << "value: " << args.bindingCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBuffers" << std::endl;
    // pBuffers -> Field -> ConstDynamicArray(VkBuffer)
    if (args.bindingCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkBuffer" << std::endl;
        for (uint64_t i = 0; i < args.bindingCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pBuffers << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pOffsets" << std::endl;
    // pOffsets -> Field -> ConstDynamicArray(VkDeviceSize)
    if (args.bindingCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDeviceSize" << std::endl;
        for (uint64_t i = 0; i < args.bindingCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pOffsets << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSizes" << std::endl;
    // pSizes -> Field -> ConstDynamicArray(VkDeviceSize)
    if (args.bindingCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDeviceSize" << std::endl;
        for (uint64_t i = 0; i < args.bindingCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pSizes << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStrides" << std::endl;
    // pStrides -> Field -> ConstDynamicArray(VkDeviceSize)
    if (args.bindingCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDeviceSize" << std::endl;
        for (uint64_t i = 0; i < args.bindingCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pStrides << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSetDepthTestEnableArgs(
  std::ostream & os, const CmdSetDepthTestEnableArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthTestEnable" << std::endl;
    // depthTestEnable -> Field -> VkBool32
    os << "value: " << args.depthTestEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetDepthWriteEnableArgs(
  std::ostream & os, const CmdSetDepthWriteEnableArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthWriteEnable" << std::endl;
    // depthWriteEnable -> Field -> VkBool32
    os << "value: " << args.depthWriteEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetDepthCompareOpArgs(
  std::ostream & os, const CmdSetDepthCompareOpArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthCompareOp" << std::endl;
    // depthCompareOp -> Field -> VkCompareOp
    os << "value: " << args.depthCompareOp << std::endl;
  }
}

void CommandPrinter::PrintCmdSetDepthBoundsTestEnableArgs(
  std::ostream & os, const CmdSetDepthBoundsTestEnableArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBoundsTestEnable" << std::endl;
    // depthBoundsTestEnable -> Field -> VkBool32
    os << "value: " << args.depthBoundsTestEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetStencilTestEnableArgs(
  std::ostream & os, const CmdSetStencilTestEnableArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilTestEnable" << std::endl;
    // stencilTestEnable -> Field -> VkBool32
    os << "value: " << args.stencilTestEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetStencilOpArgs(
  std::ostream & os, const CmdSetStencilOpArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  faceMask" << std::endl;
    // faceMask -> Field -> VkStencilFaceFlags
    os << "value: " << args.faceMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  failOp" << std::endl;
    // failOp -> Field -> VkStencilOp
    os << "value: " << args.failOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  passOp" << std::endl;
    // passOp -> Field -> VkStencilOp
    os << "value: " << args.passOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthFailOp" << std::endl;
    // depthFailOp -> Field -> VkStencilOp
    os << "value: " << args.depthFailOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compareOp" << std::endl;
    // compareOp -> Field -> VkCompareOp
    os << "value: " << args.compareOp << std::endl;
  }
}

void CommandPrinter::PrintCmdSetRasterizerDiscardEnableArgs(
  std::ostream & os, const CmdSetRasterizerDiscardEnableArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rasterizerDiscardEnable" << std::endl;
    // rasterizerDiscardEnable -> Field -> VkBool32
    os << "value: " << args.rasterizerDiscardEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetDepthBiasEnableArgs(
  std::ostream & os, const CmdSetDepthBiasEnableArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasEnable" << std::endl;
    // depthBiasEnable -> Field -> VkBool32
    os << "value: " << args.depthBiasEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetPrimitiveRestartEnableArgs(
  std::ostream & os, const CmdSetPrimitiveRestartEnableArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primitiveRestartEnable" << std::endl;
    // primitiveRestartEnable -> Field -> VkBool32
    os << "value: " << args.primitiveRestartEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdBeginVideoCodingKHRArgs(
  std::ostream & os, const CmdBeginVideoCodingKHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBeginInfo" << std::endl;
    // pointer
    if (args.pBeginInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pBeginInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdEndVideoCodingKHRArgs(
  std::ostream & os, const CmdEndVideoCodingKHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pEndCodingInfo" << std::endl;
    // pointer
    if (args.pEndCodingInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pEndCodingInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdControlVideoCodingKHRArgs(
  std::ostream & os, const CmdControlVideoCodingKHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCodingControlInfo" << std::endl;
    // pointer
    if (args.pCodingControlInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pCodingControlInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdDecodeVideoKHRArgs(
  std::ostream & os, const CmdDecodeVideoKHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDecodeInfo" << std::endl;
    // pointer
    if (args.pDecodeInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pDecodeInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdBeginRenderingKHRArgs(
  std::ostream & os, const CmdBeginRenderingKHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRenderingInfo" << std::endl;
    // pointer
    if (args.pRenderingInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pRenderingInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdEndRenderingKHRArgs(
  std::ostream & os, const CmdEndRenderingKHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
}

void CommandPrinter::PrintCmdSetDeviceMaskKHRArgs(
  std::ostream & os, const CmdSetDeviceMaskKHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  deviceMask" << std::endl;
    // deviceMask -> Field -> uint32_t
    os << "value: " << args.deviceMask << std::endl;
  }
}

void CommandPrinter::PrintCmdDispatchBaseKHRArgs(
  std::ostream & os, const CmdDispatchBaseKHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  baseGroupX" << std::endl;
    // baseGroupX -> Field -> uint32_t
    os << "value: " << args.baseGroupX << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  baseGroupY" << std::endl;
    // baseGroupY -> Field -> uint32_t
    os << "value: " << args.baseGroupY << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  baseGroupZ" << std::endl;
    // baseGroupZ -> Field -> uint32_t
    os << "value: " << args.baseGroupZ << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountX" << std::endl;
    // groupCountX -> Field -> uint32_t
    os << "value: " << args.groupCountX << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountY" << std::endl;
    // groupCountY -> Field -> uint32_t
    os << "value: " << args.groupCountY << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountZ" << std::endl;
    // groupCountZ -> Field -> uint32_t
    os << "value: " << args.groupCountZ << std::endl;
  }
}

void CommandPrinter::PrintCmdPushDescriptorSetKHRArgs(
  std::ostream & os, const CmdPushDescriptorSetKHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineBindPoint" << std::endl;
    // pipelineBindPoint -> Field -> VkPipelineBindPoint
    os << "value: " << args.pipelineBindPoint << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layout" << std::endl;
    // layout -> Field -> VkPipelineLayout
    os << "value: " << args.layout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  set" << std::endl;
    // set -> Field -> uint32_t
    os << "value: " << args.set << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorWriteCount" << std::endl;
    // descriptorWriteCount -> Field -> uint32_t
    os << "value: " << args.descriptorWriteCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDescriptorWrites" << std::endl;
    // pDescriptorWrites -> Field -> ConstDynamicArray(VkWriteDescriptorSet)
    if (args.descriptorWriteCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkWriteDescriptorSet" << std::endl;
        for (uint64_t i = 0; i < args.descriptorWriteCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pDescriptorWrites << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdPushDescriptorSetWithTemplateKHRArgs(
  std::ostream & os, const CmdPushDescriptorSetWithTemplateKHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  descriptorUpdateTemplate" << std::endl;
    // descriptorUpdateTemplate -> Field -> VkDescriptorUpdateTemplate
    os << "value: " << args.descriptorUpdateTemplate << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layout" << std::endl;
    // layout -> Field -> VkPipelineLayout
    os << "value: " << args.layout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  set" << std::endl;
    // set -> Field -> uint32_t
    os << "value: " << args.set << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pData" << std::endl;
    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }
}

void CommandPrinter::PrintCmdBeginRenderPass2KHRArgs(
  std::ostream & os, const CmdBeginRenderPass2KHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRenderPassBegin" << std::endl;
    // pointer
    if (args.pRenderPassBegin != nullptr) {
      os <<  "members:" << std::endl << *args.pRenderPassBegin << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSubpassBeginInfo" << std::endl;
    // pointer
    if (args.pSubpassBeginInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pSubpassBeginInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdNextSubpass2KHRArgs(
  std::ostream & os, const CmdNextSubpass2KHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSubpassBeginInfo" << std::endl;
    // pointer
    if (args.pSubpassBeginInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pSubpassBeginInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSubpassEndInfo" << std::endl;
    // pointer
    if (args.pSubpassEndInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pSubpassEndInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdEndRenderPass2KHRArgs(
  std::ostream & os, const CmdEndRenderPass2KHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSubpassEndInfo" << std::endl;
    // pointer
    if (args.pSubpassEndInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pSubpassEndInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdDrawIndirectCountKHRArgs(
  std::ostream & os, const CmdDrawIndirectCountKHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBuffer" << std::endl;
    // countBuffer -> Field -> VkBuffer
    os << "value: " << args.countBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBufferOffset" << std::endl;
    // countBufferOffset -> Field -> VkDeviceSize
    os << "value: " << args.countBufferOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDrawCount" << std::endl;
    // maxDrawCount -> Field -> uint32_t
    os << "value: " << args.maxDrawCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawIndexedIndirectCountKHRArgs(
  std::ostream & os, const CmdDrawIndexedIndirectCountKHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBuffer" << std::endl;
    // countBuffer -> Field -> VkBuffer
    os << "value: " << args.countBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBufferOffset" << std::endl;
    // countBufferOffset -> Field -> VkDeviceSize
    os << "value: " << args.countBufferOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDrawCount" << std::endl;
    // maxDrawCount -> Field -> uint32_t
    os << "value: " << args.maxDrawCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
}

void CommandPrinter::PrintCmdSetFragmentShadingRateKHRArgs(
  std::ostream & os, const CmdSetFragmentShadingRateKHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pFragmentSize" << std::endl;
    // pointer
    if (args.pFragmentSize != nullptr) {
      os <<  "members:" << std::endl << *args.pFragmentSize << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  combinerOps" << std::endl;
    // combinerOps -> Field -> ConstFixedArray(VkFragmentShadingRateCombinerOpKHR)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkFragmentShadingRateCombinerOpKHR" << std::endl;
        for (uint64_t i = 0; i < 2; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.combinerOps << std::endl;
        } // for i
      }
    }
  }
}

#ifdef VK_ENABLE_BETA_EXTENSIONS
void CommandPrinter::PrintCmdEncodeVideoKHRArgs(
  std::ostream & os, const CmdEncodeVideoKHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pEncodeInfo" << std::endl;
    // pointer
    if (args.pEncodeInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pEncodeInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}
#endif //VK_ENABLE_BETA_EXTENSIONS

void CommandPrinter::PrintCmdSetEvent2KHRArgs(
  std::ostream & os, const CmdSetEvent2KHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  event" << std::endl;
    // event -> Field -> VkEvent
    os << "value: " << args.event << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDependencyInfo" << std::endl;
    // pointer
    if (args.pDependencyInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pDependencyInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdResetEvent2KHRArgs(
  std::ostream & os, const CmdResetEvent2KHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  event" << std::endl;
    // event -> Field -> VkEvent
    os << "value: " << args.event << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stageMask" << std::endl;
    // stageMask -> Field -> VkPipelineStageFlags2
    os << "value: " << args.stageMask << std::endl;
  }
}

void CommandPrinter::PrintCmdWaitEvents2KHRArgs(
  std::ostream & os, const CmdWaitEvents2KHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  eventCount" << std::endl;
    // eventCount -> Field -> uint32_t
    os << "value: " << args.eventCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pEvents" << std::endl;
    // pEvents -> Field -> ConstDynamicArray(VkEvent)
    if (args.eventCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkEvent" << std::endl;
        for (uint64_t i = 0; i < args.eventCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pEvents << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDependencyInfos" << std::endl;
    // pDependencyInfos -> Field -> ConstDynamicArray(VkDependencyInfo)
    if (args.eventCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDependencyInfo" << std::endl;
        for (uint64_t i = 0; i < args.eventCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pDependencyInfos << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdPipelineBarrier2KHRArgs(
  std::ostream & os, const CmdPipelineBarrier2KHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDependencyInfo" << std::endl;
    // pointer
    if (args.pDependencyInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pDependencyInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdWriteTimestamp2KHRArgs(
  std::ostream & os, const CmdWriteTimestamp2KHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stage" << std::endl;
    // stage -> Field -> VkPipelineStageFlags2
    os << "value: " << args.stage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryPool" << std::endl;
    // queryPool -> Field -> VkQueryPool
    os << "value: " << args.queryPool << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  query" << std::endl;
    // query -> Field -> uint32_t
    os << "value: " << args.query << std::endl;
  }
}

void CommandPrinter::PrintCmdWriteBufferMarker2AMDArgs(
  std::ostream & os, const CmdWriteBufferMarker2AMDArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stage" << std::endl;
    // stage -> Field -> VkPipelineStageFlags2
    os << "value: " << args.stage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBuffer" << std::endl;
    // dstBuffer -> Field -> VkBuffer
    os << "value: " << args.dstBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffset" << std::endl;
    // dstOffset -> Field -> VkDeviceSize
    os << "value: " << args.dstOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  marker" << std::endl;
    // marker -> Field -> uint32_t
    os << "value: " << args.marker << std::endl;
  }
}

void CommandPrinter::PrintCmdCopyBuffer2KHRArgs(
  std::ostream & os, const CmdCopyBuffer2KHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCopyBufferInfo" << std::endl;
    // pointer
    if (args.pCopyBufferInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pCopyBufferInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdCopyImage2KHRArgs(
  std::ostream & os, const CmdCopyImage2KHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCopyImageInfo" << std::endl;
    // pointer
    if (args.pCopyImageInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pCopyImageInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdCopyBufferToImage2KHRArgs(
  std::ostream & os, const CmdCopyBufferToImage2KHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCopyBufferToImageInfo" << std::endl;
    // pointer
    if (args.pCopyBufferToImageInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pCopyBufferToImageInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdCopyImageToBuffer2KHRArgs(
  std::ostream & os, const CmdCopyImageToBuffer2KHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCopyImageToBufferInfo" << std::endl;
    // pointer
    if (args.pCopyImageToBufferInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pCopyImageToBufferInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdBlitImage2KHRArgs(
  std::ostream & os, const CmdBlitImage2KHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBlitImageInfo" << std::endl;
    // pointer
    if (args.pBlitImageInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pBlitImageInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdResolveImage2KHRArgs(
  std::ostream & os, const CmdResolveImage2KHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pResolveImageInfo" << std::endl;
    // pointer
    if (args.pResolveImageInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pResolveImageInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdTraceRaysIndirect2KHRArgs(
  std::ostream & os, const CmdTraceRaysIndirect2KHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indirectDeviceAddress" << std::endl;
    // indirectDeviceAddress -> Field -> VkDeviceAddress
    os << "value: " << args.indirectDeviceAddress << std::endl;
  }
}

void CommandPrinter::PrintCmdDebugMarkerBeginEXTArgs(
  std::ostream & os, const CmdDebugMarkerBeginEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMarkerInfo" << std::endl;
    // pointer
    if (args.pMarkerInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pMarkerInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdDebugMarkerEndEXTArgs(
  std::ostream & os, const CmdDebugMarkerEndEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
}

void CommandPrinter::PrintCmdDebugMarkerInsertEXTArgs(
  std::ostream & os, const CmdDebugMarkerInsertEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMarkerInfo" << std::endl;
    // pointer
    if (args.pMarkerInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pMarkerInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdBindTransformFeedbackBuffersEXTArgs(
  std::ostream & os, const CmdBindTransformFeedbackBuffersEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstBinding" << std::endl;
    // firstBinding -> Field -> uint32_t
    os << "value: " << args.firstBinding << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bindingCount" << std::endl;
    // bindingCount -> Field -> uint32_t
    os << "value: " << args.bindingCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBuffers" << std::endl;
    // pBuffers -> Field -> ConstDynamicArray(VkBuffer)
    if (args.bindingCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkBuffer" << std::endl;
        for (uint64_t i = 0; i < args.bindingCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pBuffers << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pOffsets" << std::endl;
    // pOffsets -> Field -> ConstDynamicArray(VkDeviceSize)
    if (args.bindingCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDeviceSize" << std::endl;
        for (uint64_t i = 0; i < args.bindingCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pOffsets << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSizes" << std::endl;
    // pSizes -> Field -> ConstDynamicArray(VkDeviceSize)
    if (args.bindingCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDeviceSize" << std::endl;
        for (uint64_t i = 0; i < args.bindingCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pSizes << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdBeginTransformFeedbackEXTArgs(
  std::ostream & os, const CmdBeginTransformFeedbackEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstCounterBuffer" << std::endl;
    // firstCounterBuffer -> Field -> uint32_t
    os << "value: " << args.firstCounterBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  counterBufferCount" << std::endl;
    // counterBufferCount -> Field -> uint32_t
    os << "value: " << args.counterBufferCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCounterBuffers" << std::endl;
    // pCounterBuffers -> Field -> ConstDynamicArray(VkBuffer)
    if (args.counterBufferCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkBuffer" << std::endl;
        for (uint64_t i = 0; i < args.counterBufferCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pCounterBuffers << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCounterBufferOffsets" << std::endl;
    // pCounterBufferOffsets -> Field -> ConstDynamicArray(VkDeviceSize)
    if (args.counterBufferCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDeviceSize" << std::endl;
        for (uint64_t i = 0; i < args.counterBufferCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pCounterBufferOffsets << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdEndTransformFeedbackEXTArgs(
  std::ostream & os, const CmdEndTransformFeedbackEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstCounterBuffer" << std::endl;
    // firstCounterBuffer -> Field -> uint32_t
    os << "value: " << args.firstCounterBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  counterBufferCount" << std::endl;
    // counterBufferCount -> Field -> uint32_t
    os << "value: " << args.counterBufferCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCounterBuffers" << std::endl;
    // pCounterBuffers -> Field -> ConstDynamicArray(VkBuffer)
    if (args.counterBufferCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkBuffer" << std::endl;
        for (uint64_t i = 0; i < args.counterBufferCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pCounterBuffers << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCounterBufferOffsets" << std::endl;
    // pCounterBufferOffsets -> Field -> ConstDynamicArray(VkDeviceSize)
    if (args.counterBufferCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDeviceSize" << std::endl;
        for (uint64_t i = 0; i < args.counterBufferCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pCounterBufferOffsets << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdBeginQueryIndexedEXTArgs(
  std::ostream & os, const CmdBeginQueryIndexedEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryPool" << std::endl;
    // queryPool -> Field -> VkQueryPool
    os << "value: " << args.queryPool << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  query" << std::endl;
    // query -> Field -> uint32_t
    os << "value: " << args.query << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  flags" << std::endl;
    // flags -> Field -> VkQueryControlFlags
    os << "value: " << args.flags << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  index" << std::endl;
    // index -> Field -> uint32_t
    os << "value: " << args.index << std::endl;
  }
}

void CommandPrinter::PrintCmdEndQueryIndexedEXTArgs(
  std::ostream & os, const CmdEndQueryIndexedEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryPool" << std::endl;
    // queryPool -> Field -> VkQueryPool
    os << "value: " << args.queryPool << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  query" << std::endl;
    // query -> Field -> uint32_t
    os << "value: " << args.query << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  index" << std::endl;
    // index -> Field -> uint32_t
    os << "value: " << args.index << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawIndirectByteCountEXTArgs(
  std::ostream & os, const CmdDrawIndirectByteCountEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instanceCount" << std::endl;
    // instanceCount -> Field -> uint32_t
    os << "value: " << args.instanceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstInstance" << std::endl;
    // firstInstance -> Field -> uint32_t
    os << "value: " << args.firstInstance << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  counterBuffer" << std::endl;
    // counterBuffer -> Field -> VkBuffer
    os << "value: " << args.counterBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  counterBufferOffset" << std::endl;
    // counterBufferOffset -> Field -> VkDeviceSize
    os << "value: " << args.counterBufferOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  counterOffset" << std::endl;
    // counterOffset -> Field -> uint32_t
    os << "value: " << args.counterOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexStride" << std::endl;
    // vertexStride -> Field -> uint32_t
    os << "value: " << args.vertexStride << std::endl;
  }
}

void CommandPrinter::PrintCmdCuLaunchKernelNVXArgs(
  std::ostream & os, const CmdCuLaunchKernelNVXArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pLaunchInfo" << std::endl;
    // pointer
    if (args.pLaunchInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pLaunchInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdDrawIndirectCountAMDArgs(
  std::ostream & os, const CmdDrawIndirectCountAMDArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBuffer" << std::endl;
    // countBuffer -> Field -> VkBuffer
    os << "value: " << args.countBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBufferOffset" << std::endl;
    // countBufferOffset -> Field -> VkDeviceSize
    os << "value: " << args.countBufferOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDrawCount" << std::endl;
    // maxDrawCount -> Field -> uint32_t
    os << "value: " << args.maxDrawCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawIndexedIndirectCountAMDArgs(
  std::ostream & os, const CmdDrawIndexedIndirectCountAMDArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBuffer" << std::endl;
    // countBuffer -> Field -> VkBuffer
    os << "value: " << args.countBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBufferOffset" << std::endl;
    // countBufferOffset -> Field -> VkDeviceSize
    os << "value: " << args.countBufferOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDrawCount" << std::endl;
    // maxDrawCount -> Field -> uint32_t
    os << "value: " << args.maxDrawCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
}

void CommandPrinter::PrintCmdBeginConditionalRenderingEXTArgs(
  std::ostream & os, const CmdBeginConditionalRenderingEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pConditionalRenderingBegin" << std::endl;
    // pointer
    if (args.pConditionalRenderingBegin != nullptr) {
      os <<  "members:" << std::endl << *args.pConditionalRenderingBegin << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdEndConditionalRenderingEXTArgs(
  std::ostream & os, const CmdEndConditionalRenderingEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
}

void CommandPrinter::PrintCmdSetViewportWScalingNVArgs(
  std::ostream & os, const CmdSetViewportWScalingNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstViewport" << std::endl;
    // firstViewport -> Field -> uint32_t
    os << "value: " << args.firstViewport << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewportCount" << std::endl;
    // viewportCount -> Field -> uint32_t
    os << "value: " << args.viewportCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pViewportWScalings" << std::endl;
    // pViewportWScalings -> Field -> ConstDynamicArray(VkViewportWScalingNV)
    if (args.viewportCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkViewportWScalingNV" << std::endl;
        for (uint64_t i = 0; i < args.viewportCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pViewportWScalings << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSetDiscardRectangleEXTArgs(
  std::ostream & os, const CmdSetDiscardRectangleEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstDiscardRectangle" << std::endl;
    // firstDiscardRectangle -> Field -> uint32_t
    os << "value: " << args.firstDiscardRectangle << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  discardRectangleCount" << std::endl;
    // discardRectangleCount -> Field -> uint32_t
    os << "value: " << args.discardRectangleCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDiscardRectangles" << std::endl;
    // pDiscardRectangles -> Field -> ConstDynamicArray(VkRect2D)
    if (args.discardRectangleCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkRect2D" << std::endl;
        for (uint64_t i = 0; i < args.discardRectangleCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pDiscardRectangles << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSetDiscardRectangleEnableEXTArgs(
  std::ostream & os, const CmdSetDiscardRectangleEnableEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  discardRectangleEnable" << std::endl;
    // discardRectangleEnable -> Field -> VkBool32
    os << "value: " << args.discardRectangleEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetDiscardRectangleModeEXTArgs(
  std::ostream & os, const CmdSetDiscardRectangleModeEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  discardRectangleMode" << std::endl;
    // discardRectangleMode -> Field -> VkDiscardRectangleModeEXT
    os << "value: " << args.discardRectangleMode << std::endl;
  }
}

void CommandPrinter::PrintCmdBeginDebugUtilsLabelEXTArgs(
  std::ostream & os, const CmdBeginDebugUtilsLabelEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pLabelInfo" << std::endl;
    // pointer
    if (args.pLabelInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pLabelInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdEndDebugUtilsLabelEXTArgs(
  std::ostream & os, const CmdEndDebugUtilsLabelEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
}

void CommandPrinter::PrintCmdInsertDebugUtilsLabelEXTArgs(
  std::ostream & os, const CmdInsertDebugUtilsLabelEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pLabelInfo" << std::endl;
    // pointer
    if (args.pLabelInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pLabelInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdSetSampleLocationsEXTArgs(
  std::ostream & os, const CmdSetSampleLocationsEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSampleLocationsInfo" << std::endl;
    // pointer
    if (args.pSampleLocationsInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pSampleLocationsInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdBindShadingRateImageNVArgs(
  std::ostream & os, const CmdBindShadingRateImageNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageView" << std::endl;
    // imageView -> Field -> VkImageView
    os << "value: " << args.imageView << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageLayout" << std::endl;
    // imageLayout -> Field -> VkImageLayout
    os << "value: " << args.imageLayout << std::endl;
  }
}

void CommandPrinter::PrintCmdSetViewportShadingRatePaletteNVArgs(
  std::ostream & os, const CmdSetViewportShadingRatePaletteNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstViewport" << std::endl;
    // firstViewport -> Field -> uint32_t
    os << "value: " << args.firstViewport << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewportCount" << std::endl;
    // viewportCount -> Field -> uint32_t
    os << "value: " << args.viewportCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pShadingRatePalettes" << std::endl;
    // pShadingRatePalettes -> Field -> ConstDynamicArray(VkShadingRatePaletteNV)
    if (args.viewportCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkShadingRatePaletteNV" << std::endl;
        for (uint64_t i = 0; i < args.viewportCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pShadingRatePalettes << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSetCoarseSampleOrderNVArgs(
  std::ostream & os, const CmdSetCoarseSampleOrderNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleOrderType" << std::endl;
    // sampleOrderType -> Field -> VkCoarseSampleOrderTypeNV
    os << "value: " << args.sampleOrderType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  customSampleOrderCount" << std::endl;
    // customSampleOrderCount -> Field -> uint32_t
    os << "value: " << args.customSampleOrderCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCustomSampleOrders" << std::endl;
    // pCustomSampleOrders -> Field -> ConstDynamicArray(VkCoarseSampleOrderCustomNV)
    if (args.customSampleOrderCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkCoarseSampleOrderCustomNV" << std::endl;
        for (uint64_t i = 0; i < args.customSampleOrderCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pCustomSampleOrders << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdBuildAccelerationStructureNVArgs(
  std::ostream & os, const CmdBuildAccelerationStructureNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInfo" << std::endl;
    // pointer
    if (args.pInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instanceData" << std::endl;
    // instanceData -> Field -> VkBuffer
    os << "value: " << args.instanceData << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instanceOffset" << std::endl;
    // instanceOffset -> Field -> VkDeviceSize
    os << "value: " << args.instanceOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  update" << std::endl;
    // update -> Field -> VkBool32
    os << "value: " << args.update << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dst" << std::endl;
    // dst -> Field -> VkAccelerationStructureNV
    os << "value: " << args.dst << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  src" << std::endl;
    // src -> Field -> VkAccelerationStructureNV
    os << "value: " << args.src << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  scratch" << std::endl;
    // scratch -> Field -> VkBuffer
    os << "value: " << args.scratch << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  scratchOffset" << std::endl;
    // scratchOffset -> Field -> VkDeviceSize
    os << "value: " << args.scratchOffset << std::endl;
  }
}

void CommandPrinter::PrintCmdCopyAccelerationStructureNVArgs(
  std::ostream & os, const CmdCopyAccelerationStructureNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dst" << std::endl;
    // dst -> Field -> VkAccelerationStructureNV
    os << "value: " << args.dst << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  src" << std::endl;
    // src -> Field -> VkAccelerationStructureNV
    os << "value: " << args.src << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  mode" << std::endl;
    // mode -> Field -> VkCopyAccelerationStructureModeKHR
    os << "value: " << args.mode << std::endl;
  }
}

void CommandPrinter::PrintCmdTraceRaysNVArgs(
  std::ostream & os, const CmdTraceRaysNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  raygenShaderBindingTableBuffer" << std::endl;
    // raygenShaderBindingTableBuffer -> Field -> VkBuffer
    os << "value: " << args.raygenShaderBindingTableBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  raygenShaderBindingOffset" << std::endl;
    // raygenShaderBindingOffset -> Field -> VkDeviceSize
    os << "value: " << args.raygenShaderBindingOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  missShaderBindingTableBuffer" << std::endl;
    // missShaderBindingTableBuffer -> Field -> VkBuffer
    os << "value: " << args.missShaderBindingTableBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  missShaderBindingOffset" << std::endl;
    // missShaderBindingOffset -> Field -> VkDeviceSize
    os << "value: " << args.missShaderBindingOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  missShaderBindingStride" << std::endl;
    // missShaderBindingStride -> Field -> VkDeviceSize
    os << "value: " << args.missShaderBindingStride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hitShaderBindingTableBuffer" << std::endl;
    // hitShaderBindingTableBuffer -> Field -> VkBuffer
    os << "value: " << args.hitShaderBindingTableBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hitShaderBindingOffset" << std::endl;
    // hitShaderBindingOffset -> Field -> VkDeviceSize
    os << "value: " << args.hitShaderBindingOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  hitShaderBindingStride" << std::endl;
    // hitShaderBindingStride -> Field -> VkDeviceSize
    os << "value: " << args.hitShaderBindingStride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  callableShaderBindingTableBuffer" << std::endl;
    // callableShaderBindingTableBuffer -> Field -> VkBuffer
    os << "value: " << args.callableShaderBindingTableBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  callableShaderBindingOffset" << std::endl;
    // callableShaderBindingOffset -> Field -> VkDeviceSize
    os << "value: " << args.callableShaderBindingOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  callableShaderBindingStride" << std::endl;
    // callableShaderBindingStride -> Field -> VkDeviceSize
    os << "value: " << args.callableShaderBindingStride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  width" << std::endl;
    // width -> Field -> uint32_t
    os << "value: " << args.width << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  height" << std::endl;
    // height -> Field -> uint32_t
    os << "value: " << args.height << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depth" << std::endl;
    // depth -> Field -> uint32_t
    os << "value: " << args.depth << std::endl;
  }
}

void CommandPrinter::PrintCmdWriteAccelerationStructuresPropertiesNVArgs(
  std::ostream & os, const CmdWriteAccelerationStructuresPropertiesNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructureCount" << std::endl;
    // accelerationStructureCount -> Field -> uint32_t
    os << "value: " << args.accelerationStructureCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAccelerationStructures" << std::endl;
    // pAccelerationStructures -> Field -> ConstDynamicArray(VkAccelerationStructureNV)
    if (args.accelerationStructureCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkAccelerationStructureNV" << std::endl;
        for (uint64_t i = 0; i < args.accelerationStructureCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pAccelerationStructures << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryType" << std::endl;
    // queryType -> Field -> VkQueryType
    os << "value: " << args.queryType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryPool" << std::endl;
    // queryPool -> Field -> VkQueryPool
    os << "value: " << args.queryPool << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstQuery" << std::endl;
    // firstQuery -> Field -> uint32_t
    os << "value: " << args.firstQuery << std::endl;
  }
}

void CommandPrinter::PrintCmdWriteBufferMarkerAMDArgs(
  std::ostream & os, const CmdWriteBufferMarkerAMDArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineStage" << std::endl;
    // pipelineStage -> Field -> VkPipelineStageFlagBits
    os << "value: " << args.pipelineStage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstBuffer" << std::endl;
    // dstBuffer -> Field -> VkBuffer
    os << "value: " << args.dstBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstOffset" << std::endl;
    // dstOffset -> Field -> VkDeviceSize
    os << "value: " << args.dstOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  marker" << std::endl;
    // marker -> Field -> uint32_t
    os << "value: " << args.marker << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawMeshTasksNVArgs(
  std::ostream & os, const CmdDrawMeshTasksNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  taskCount" << std::endl;
    // taskCount -> Field -> uint32_t
    os << "value: " << args.taskCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstTask" << std::endl;
    // firstTask -> Field -> uint32_t
    os << "value: " << args.firstTask << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawMeshTasksIndirectNVArgs(
  std::ostream & os, const CmdDrawMeshTasksIndirectNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drawCount" << std::endl;
    // drawCount -> Field -> uint32_t
    os << "value: " << args.drawCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawMeshTasksIndirectCountNVArgs(
  std::ostream & os, const CmdDrawMeshTasksIndirectCountNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBuffer" << std::endl;
    // countBuffer -> Field -> VkBuffer
    os << "value: " << args.countBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBufferOffset" << std::endl;
    // countBufferOffset -> Field -> VkDeviceSize
    os << "value: " << args.countBufferOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDrawCount" << std::endl;
    // maxDrawCount -> Field -> uint32_t
    os << "value: " << args.maxDrawCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
}

void CommandPrinter::PrintCmdSetExclusiveScissorEnableNVArgs(
  std::ostream & os, const CmdSetExclusiveScissorEnableNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstExclusiveScissor" << std::endl;
    // firstExclusiveScissor -> Field -> uint32_t
    os << "value: " << args.firstExclusiveScissor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  exclusiveScissorCount" << std::endl;
    // exclusiveScissorCount -> Field -> uint32_t
    os << "value: " << args.exclusiveScissorCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pExclusiveScissorEnables" << std::endl;
    // pExclusiveScissorEnables -> Field -> ConstDynamicArray(VkBool32)
    if (args.exclusiveScissorCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkBool32" << std::endl;
        for (uint64_t i = 0; i < args.exclusiveScissorCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pExclusiveScissorEnables << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSetExclusiveScissorNVArgs(
  std::ostream & os, const CmdSetExclusiveScissorNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstExclusiveScissor" << std::endl;
    // firstExclusiveScissor -> Field -> uint32_t
    os << "value: " << args.firstExclusiveScissor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  exclusiveScissorCount" << std::endl;
    // exclusiveScissorCount -> Field -> uint32_t
    os << "value: " << args.exclusiveScissorCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pExclusiveScissors" << std::endl;
    // pExclusiveScissors -> Field -> ConstDynamicArray(VkRect2D)
    if (args.exclusiveScissorCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkRect2D" << std::endl;
        for (uint64_t i = 0; i < args.exclusiveScissorCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pExclusiveScissors << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSetCheckpointNVArgs(
  std::ostream & os, const CmdSetCheckpointNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCheckpointMarker" << std::endl;
    // void
    os << "value: NOT_AVAILABLE" << std::endl;
  }
}

void CommandPrinter::PrintCmdSetPerformanceMarkerINTELArgs(
  std::ostream & os, const CmdSetPerformanceMarkerINTELArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMarkerInfo" << std::endl;
    // pointer
    if (args.pMarkerInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pMarkerInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdSetPerformanceStreamMarkerINTELArgs(
  std::ostream & os, const CmdSetPerformanceStreamMarkerINTELArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMarkerInfo" << std::endl;
    // pointer
    if (args.pMarkerInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pMarkerInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdSetPerformanceOverrideINTELArgs(
  std::ostream & os, const CmdSetPerformanceOverrideINTELArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pOverrideInfo" << std::endl;
    // pointer
    if (args.pOverrideInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pOverrideInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdSetLineStippleEXTArgs(
  std::ostream & os, const CmdSetLineStippleEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  lineStippleFactor" << std::endl;
    // lineStippleFactor -> Field -> uint32_t
    os << "value: " << args.lineStippleFactor << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  lineStipplePattern" << std::endl;
    // lineStipplePattern -> Field -> uint16_t
    os << "value: " << args.lineStipplePattern << std::endl;
  }
}

void CommandPrinter::PrintCmdSetCullModeEXTArgs(
  std::ostream & os, const CmdSetCullModeEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  cullMode" << std::endl;
    // cullMode -> Field -> VkCullModeFlags
    os << "value: " << args.cullMode << std::endl;
  }
}

void CommandPrinter::PrintCmdSetFrontFaceEXTArgs(
  std::ostream & os, const CmdSetFrontFaceEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  frontFace" << std::endl;
    // frontFace -> Field -> VkFrontFace
    os << "value: " << args.frontFace << std::endl;
  }
}

void CommandPrinter::PrintCmdSetPrimitiveTopologyEXTArgs(
  std::ostream & os, const CmdSetPrimitiveTopologyEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primitiveTopology" << std::endl;
    // primitiveTopology -> Field -> VkPrimitiveTopology
    os << "value: " << args.primitiveTopology << std::endl;
  }
}

void CommandPrinter::PrintCmdSetViewportWithCountEXTArgs(
  std::ostream & os, const CmdSetViewportWithCountEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewportCount" << std::endl;
    // viewportCount -> Field -> uint32_t
    os << "value: " << args.viewportCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pViewports" << std::endl;
    // pViewports -> Field -> ConstDynamicArray(VkViewport)
    if (args.viewportCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkViewport" << std::endl;
        for (uint64_t i = 0; i < args.viewportCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pViewports << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSetScissorWithCountEXTArgs(
  std::ostream & os, const CmdSetScissorWithCountEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  scissorCount" << std::endl;
    // scissorCount -> Field -> uint32_t
    os << "value: " << args.scissorCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pScissors" << std::endl;
    // pScissors -> Field -> ConstDynamicArray(VkRect2D)
    if (args.scissorCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkRect2D" << std::endl;
        for (uint64_t i = 0; i < args.scissorCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pScissors << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdBindVertexBuffers2EXTArgs(
  std::ostream & os, const CmdBindVertexBuffers2EXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstBinding" << std::endl;
    // firstBinding -> Field -> uint32_t
    os << "value: " << args.firstBinding << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bindingCount" << std::endl;
    // bindingCount -> Field -> uint32_t
    os << "value: " << args.bindingCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBuffers" << std::endl;
    // pBuffers -> Field -> ConstDynamicArray(VkBuffer)
    if (args.bindingCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkBuffer" << std::endl;
        for (uint64_t i = 0; i < args.bindingCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pBuffers << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pOffsets" << std::endl;
    // pOffsets -> Field -> ConstDynamicArray(VkDeviceSize)
    if (args.bindingCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDeviceSize" << std::endl;
        for (uint64_t i = 0; i < args.bindingCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pOffsets << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSizes" << std::endl;
    // pSizes -> Field -> ConstDynamicArray(VkDeviceSize)
    if (args.bindingCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDeviceSize" << std::endl;
        for (uint64_t i = 0; i < args.bindingCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pSizes << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStrides" << std::endl;
    // pStrides -> Field -> ConstDynamicArray(VkDeviceSize)
    if (args.bindingCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDeviceSize" << std::endl;
        for (uint64_t i = 0; i < args.bindingCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pStrides << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSetDepthTestEnableEXTArgs(
  std::ostream & os, const CmdSetDepthTestEnableEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthTestEnable" << std::endl;
    // depthTestEnable -> Field -> VkBool32
    os << "value: " << args.depthTestEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetDepthWriteEnableEXTArgs(
  std::ostream & os, const CmdSetDepthWriteEnableEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthWriteEnable" << std::endl;
    // depthWriteEnable -> Field -> VkBool32
    os << "value: " << args.depthWriteEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetDepthCompareOpEXTArgs(
  std::ostream & os, const CmdSetDepthCompareOpEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthCompareOp" << std::endl;
    // depthCompareOp -> Field -> VkCompareOp
    os << "value: " << args.depthCompareOp << std::endl;
  }
}

void CommandPrinter::PrintCmdSetDepthBoundsTestEnableEXTArgs(
  std::ostream & os, const CmdSetDepthBoundsTestEnableEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBoundsTestEnable" << std::endl;
    // depthBoundsTestEnable -> Field -> VkBool32
    os << "value: " << args.depthBoundsTestEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetStencilTestEnableEXTArgs(
  std::ostream & os, const CmdSetStencilTestEnableEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stencilTestEnable" << std::endl;
    // stencilTestEnable -> Field -> VkBool32
    os << "value: " << args.stencilTestEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetStencilOpEXTArgs(
  std::ostream & os, const CmdSetStencilOpEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  faceMask" << std::endl;
    // faceMask -> Field -> VkStencilFaceFlags
    os << "value: " << args.faceMask << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  failOp" << std::endl;
    // failOp -> Field -> VkStencilOp
    os << "value: " << args.failOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  passOp" << std::endl;
    // passOp -> Field -> VkStencilOp
    os << "value: " << args.passOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthFailOp" << std::endl;
    // depthFailOp -> Field -> VkStencilOp
    os << "value: " << args.depthFailOp << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  compareOp" << std::endl;
    // compareOp -> Field -> VkCompareOp
    os << "value: " << args.compareOp << std::endl;
  }
}

void CommandPrinter::PrintCmdPreprocessGeneratedCommandsNVArgs(
  std::ostream & os, const CmdPreprocessGeneratedCommandsNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pGeneratedCommandsInfo" << std::endl;
    // pointer
    if (args.pGeneratedCommandsInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pGeneratedCommandsInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdExecuteGeneratedCommandsNVArgs(
  std::ostream & os, const CmdExecuteGeneratedCommandsNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  isPreprocessed" << std::endl;
    // isPreprocessed -> Field -> VkBool32
    os << "value: " << args.isPreprocessed << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pGeneratedCommandsInfo" << std::endl;
    // pointer
    if (args.pGeneratedCommandsInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pGeneratedCommandsInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdBindPipelineShaderGroupNVArgs(
  std::ostream & os, const CmdBindPipelineShaderGroupNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineBindPoint" << std::endl;
    // pipelineBindPoint -> Field -> VkPipelineBindPoint
    os << "value: " << args.pipelineBindPoint << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipeline" << std::endl;
    // pipeline -> Field -> VkPipeline
    os << "value: " << args.pipeline << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupIndex" << std::endl;
    // groupIndex -> Field -> uint32_t
    os << "value: " << args.groupIndex << std::endl;
  }
}

void CommandPrinter::PrintCmdSetDepthBias2EXTArgs(
  std::ostream & os, const CmdSetDepthBias2EXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDepthBiasInfo" << std::endl;
    // pointer
    if (args.pDepthBiasInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pDepthBiasInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdBindDescriptorBuffersEXTArgs(
  std::ostream & os, const CmdBindDescriptorBuffersEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  bufferCount" << std::endl;
    // bufferCount -> Field -> uint32_t
    os << "value: " << args.bufferCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBindingInfos" << std::endl;
    // pBindingInfos -> Field -> ConstDynamicArray(VkDescriptorBufferBindingInfoEXT)
    if (args.bufferCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDescriptorBufferBindingInfoEXT" << std::endl;
        for (uint64_t i = 0; i < args.bufferCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pBindingInfos << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSetDescriptorBufferOffsetsEXTArgs(
  std::ostream & os, const CmdSetDescriptorBufferOffsetsEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineBindPoint" << std::endl;
    // pipelineBindPoint -> Field -> VkPipelineBindPoint
    os << "value: " << args.pipelineBindPoint << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layout" << std::endl;
    // layout -> Field -> VkPipelineLayout
    os << "value: " << args.layout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstSet" << std::endl;
    // firstSet -> Field -> uint32_t
    os << "value: " << args.firstSet << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  setCount" << std::endl;
    // setCount -> Field -> uint32_t
    os << "value: " << args.setCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pBufferIndices" << std::endl;
    // pBufferIndices -> Field -> ConstDynamicArray(uint32_t)
    if (args.setCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < args.setCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pBufferIndices << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pOffsets" << std::endl;
    // pOffsets -> Field -> ConstDynamicArray(VkDeviceSize)
    if (args.setCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDeviceSize" << std::endl;
        for (uint64_t i = 0; i < args.setCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pOffsets << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdBindDescriptorBufferEmbeddedSamplersEXTArgs(
  std::ostream & os, const CmdBindDescriptorBufferEmbeddedSamplersEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineBindPoint" << std::endl;
    // pipelineBindPoint -> Field -> VkPipelineBindPoint
    os << "value: " << args.pipelineBindPoint << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  layout" << std::endl;
    // layout -> Field -> VkPipelineLayout
    os << "value: " << args.layout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  set" << std::endl;
    // set -> Field -> uint32_t
    os << "value: " << args.set << std::endl;
  }
}

void CommandPrinter::PrintCmdSetFragmentShadingRateEnumNVArgs(
  std::ostream & os, const CmdSetFragmentShadingRateEnumNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shadingRate" << std::endl;
    // shadingRate -> Field -> VkFragmentShadingRateNV
    os << "value: " << args.shadingRate << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  combinerOps" << std::endl;
    // combinerOps -> Field -> ConstFixedArray(VkFragmentShadingRateCombinerOpKHR)
    {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkFragmentShadingRateCombinerOpKHR" << std::endl;
        for (uint64_t i = 0; i < 2; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.combinerOps << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSetVertexInputEXTArgs(
  std::ostream & os, const CmdSetVertexInputEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexBindingDescriptionCount" << std::endl;
    // vertexBindingDescriptionCount -> Field -> uint32_t
    os << "value: " << args.vertexBindingDescriptionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pVertexBindingDescriptions" << std::endl;
    // pVertexBindingDescriptions -> Field -> ConstDynamicArray(VkVertexInputBindingDescription2EXT)
    if (args.vertexBindingDescriptionCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkVertexInputBindingDescription2EXT" << std::endl;
        for (uint64_t i = 0; i < args.vertexBindingDescriptionCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pVertexBindingDescriptions << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  vertexAttributeDescriptionCount" << std::endl;
    // vertexAttributeDescriptionCount -> Field -> uint32_t
    os << "value: " << args.vertexAttributeDescriptionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pVertexAttributeDescriptions" << std::endl;
    // pVertexAttributeDescriptions -> Field -> ConstDynamicArray(VkVertexInputAttributeDescription2EXT)
    if (args.vertexAttributeDescriptionCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkVertexInputAttributeDescription2EXT" << std::endl;
        for (uint64_t i = 0; i < args.vertexAttributeDescriptionCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pVertexAttributeDescriptions << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSubpassShadingHUAWEIArgs(
  std::ostream & os, const CmdSubpassShadingHUAWEIArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
}

void CommandPrinter::PrintCmdBindInvocationMaskHUAWEIArgs(
  std::ostream & os, const CmdBindInvocationMaskHUAWEIArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageView" << std::endl;
    // imageView -> Field -> VkImageView
    os << "value: " << args.imageView << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  imageLayout" << std::endl;
    // imageLayout -> Field -> VkImageLayout
    os << "value: " << args.imageLayout << std::endl;
  }
}

void CommandPrinter::PrintCmdSetPatchControlPointsEXTArgs(
  std::ostream & os, const CmdSetPatchControlPointsEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  patchControlPoints" << std::endl;
    // patchControlPoints -> Field -> uint32_t
    os << "value: " << args.patchControlPoints << std::endl;
  }
}

void CommandPrinter::PrintCmdSetRasterizerDiscardEnableEXTArgs(
  std::ostream & os, const CmdSetRasterizerDiscardEnableEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rasterizerDiscardEnable" << std::endl;
    // rasterizerDiscardEnable -> Field -> VkBool32
    os << "value: " << args.rasterizerDiscardEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetDepthBiasEnableEXTArgs(
  std::ostream & os, const CmdSetDepthBiasEnableEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthBiasEnable" << std::endl;
    // depthBiasEnable -> Field -> VkBool32
    os << "value: " << args.depthBiasEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetLogicOpEXTArgs(
  std::ostream & os, const CmdSetLogicOpEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  logicOp" << std::endl;
    // logicOp -> Field -> VkLogicOp
    os << "value: " << args.logicOp << std::endl;
  }
}

void CommandPrinter::PrintCmdSetPrimitiveRestartEnableEXTArgs(
  std::ostream & os, const CmdSetPrimitiveRestartEnableEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  primitiveRestartEnable" << std::endl;
    // primitiveRestartEnable -> Field -> VkBool32
    os << "value: " << args.primitiveRestartEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetColorWriteEnableEXTArgs(
  std::ostream & os, const CmdSetColorWriteEnableEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentCount" << std::endl;
    // attachmentCount -> Field -> uint32_t
    os << "value: " << args.attachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pColorWriteEnables" << std::endl;
    // pColorWriteEnables -> Field -> ConstDynamicArray(VkBool32)
    if (args.attachmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkBool32" << std::endl;
        for (uint64_t i = 0; i < args.attachmentCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pColorWriteEnables << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdDrawMultiEXTArgs(
  std::ostream & os, const CmdDrawMultiEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drawCount" << std::endl;
    // drawCount -> Field -> uint32_t
    os << "value: " << args.drawCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pVertexInfo" << std::endl;
    // pVertexInfo -> Field -> ConstDynamicArray(VkMultiDrawInfoEXT)
    if (args.drawCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkMultiDrawInfoEXT" << std::endl;
        for (uint64_t i = 0; i < args.drawCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pVertexInfo << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instanceCount" << std::endl;
    // instanceCount -> Field -> uint32_t
    os << "value: " << args.instanceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstInstance" << std::endl;
    // firstInstance -> Field -> uint32_t
    os << "value: " << args.firstInstance << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawMultiIndexedEXTArgs(
  std::ostream & os, const CmdDrawMultiIndexedEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drawCount" << std::endl;
    // drawCount -> Field -> uint32_t
    os << "value: " << args.drawCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pIndexInfo" << std::endl;
    // pIndexInfo -> Field -> ConstDynamicArray(VkMultiDrawIndexedInfoEXT)
    if (args.drawCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkMultiDrawIndexedInfoEXT" << std::endl;
        for (uint64_t i = 0; i < args.drawCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pIndexInfo << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  instanceCount" << std::endl;
    // instanceCount -> Field -> uint32_t
    os << "value: " << args.instanceCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstInstance" << std::endl;
    // firstInstance -> Field -> uint32_t
    os << "value: " << args.firstInstance << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pVertexOffset" << std::endl;
    // pointer
    if (args.pVertexOffset != nullptr) {
      os << "value: *args.pVertexOffset" << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdBuildMicromapsEXTArgs(
  std::ostream & os, const CmdBuildMicromapsEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  infoCount" << std::endl;
    // infoCount -> Field -> uint32_t
    os << "value: " << args.infoCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInfos" << std::endl;
    // pInfos -> Field -> ConstDynamicArray(VkMicromapBuildInfoEXT)
    if (args.infoCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkMicromapBuildInfoEXT" << std::endl;
        for (uint64_t i = 0; i < args.infoCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pInfos << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdCopyMicromapEXTArgs(
  std::ostream & os, const CmdCopyMicromapEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInfo" << std::endl;
    // pointer
    if (args.pInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdCopyMicromapToMemoryEXTArgs(
  std::ostream & os, const CmdCopyMicromapToMemoryEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInfo" << std::endl;
    // pointer
    if (args.pInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdCopyMemoryToMicromapEXTArgs(
  std::ostream & os, const CmdCopyMemoryToMicromapEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInfo" << std::endl;
    // pointer
    if (args.pInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdWriteMicromapsPropertiesEXTArgs(
  std::ostream & os, const CmdWriteMicromapsPropertiesEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  micromapCount" << std::endl;
    // micromapCount -> Field -> uint32_t
    os << "value: " << args.micromapCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMicromaps" << std::endl;
    // pMicromaps -> Field -> ConstDynamicArray(VkMicromapEXT)
    if (args.micromapCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkMicromapEXT" << std::endl;
        for (uint64_t i = 0; i < args.micromapCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pMicromaps << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryType" << std::endl;
    // queryType -> Field -> VkQueryType
    os << "value: " << args.queryType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryPool" << std::endl;
    // queryPool -> Field -> VkQueryPool
    os << "value: " << args.queryPool << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstQuery" << std::endl;
    // firstQuery -> Field -> uint32_t
    os << "value: " << args.firstQuery << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawClusterHUAWEIArgs(
  std::ostream & os, const CmdDrawClusterHUAWEIArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountX" << std::endl;
    // groupCountX -> Field -> uint32_t
    os << "value: " << args.groupCountX << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountY" << std::endl;
    // groupCountY -> Field -> uint32_t
    os << "value: " << args.groupCountY << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountZ" << std::endl;
    // groupCountZ -> Field -> uint32_t
    os << "value: " << args.groupCountZ << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawClusterIndirectHUAWEIArgs(
  std::ostream & os, const CmdDrawClusterIndirectHUAWEIArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }
}

void CommandPrinter::PrintCmdCopyMemoryIndirectNVArgs(
  std::ostream & os, const CmdCopyMemoryIndirectNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  copyBufferAddress" << std::endl;
    // copyBufferAddress -> Field -> VkDeviceAddress
    os << "value: " << args.copyBufferAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  copyCount" << std::endl;
    // copyCount -> Field -> uint32_t
    os << "value: " << args.copyCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
}

void CommandPrinter::PrintCmdCopyMemoryToImageIndirectNVArgs(
  std::ostream & os, const CmdCopyMemoryToImageIndirectNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  copyBufferAddress" << std::endl;
    // copyBufferAddress -> Field -> VkDeviceAddress
    os << "value: " << args.copyBufferAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  copyCount" << std::endl;
    // copyCount -> Field -> uint32_t
    os << "value: " << args.copyCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImage" << std::endl;
    // dstImage -> Field -> VkImage
    os << "value: " << args.dstImage << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  dstImageLayout" << std::endl;
    // dstImageLayout -> Field -> VkImageLayout
    os << "value: " << args.dstImageLayout << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pImageSubresources" << std::endl;
    // pImageSubresources -> Field -> ConstDynamicArray(VkImageSubresourceLayers)
    if (args.copyCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkImageSubresourceLayers" << std::endl;
        for (uint64_t i = 0; i < args.copyCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pImageSubresources << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdDecompressMemoryNVArgs(
  std::ostream & os, const CmdDecompressMemoryNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  decompressRegionCount" << std::endl;
    // decompressRegionCount -> Field -> uint32_t
    os << "value: " << args.decompressRegionCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pDecompressMemoryRegions" << std::endl;
    // pDecompressMemoryRegions -> Field -> ConstDynamicArray(VkDecompressMemoryRegionNV)
    if (args.decompressRegionCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDecompressMemoryRegionNV" << std::endl;
        for (uint64_t i = 0; i < args.decompressRegionCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pDecompressMemoryRegions << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdDecompressMemoryIndirectCountNVArgs(
  std::ostream & os, const CmdDecompressMemoryIndirectCountNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indirectCommandsAddress" << std::endl;
    // indirectCommandsAddress -> Field -> VkDeviceAddress
    os << "value: " << args.indirectCommandsAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indirectCommandsCountAddress" << std::endl;
    // indirectCommandsCountAddress -> Field -> VkDeviceAddress
    os << "value: " << args.indirectCommandsCountAddress << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
}

void CommandPrinter::PrintCmdUpdatePipelineIndirectBufferNVArgs(
  std::ostream & os, const CmdUpdatePipelineIndirectBufferNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineBindPoint" << std::endl;
    // pipelineBindPoint -> Field -> VkPipelineBindPoint
    os << "value: " << args.pipelineBindPoint << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipeline" << std::endl;
    // pipeline -> Field -> VkPipeline
    os << "value: " << args.pipeline << std::endl;
  }
}

void CommandPrinter::PrintCmdSetTessellationDomainOriginEXTArgs(
  std::ostream & os, const CmdSetTessellationDomainOriginEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  domainOrigin" << std::endl;
    // domainOrigin -> Field -> VkTessellationDomainOrigin
    os << "value: " << args.domainOrigin << std::endl;
  }
}

void CommandPrinter::PrintCmdSetDepthClampEnableEXTArgs(
  std::ostream & os, const CmdSetDepthClampEnableEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthClampEnable" << std::endl;
    // depthClampEnable -> Field -> VkBool32
    os << "value: " << args.depthClampEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetPolygonModeEXTArgs(
  std::ostream & os, const CmdSetPolygonModeEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  polygonMode" << std::endl;
    // polygonMode -> Field -> VkPolygonMode
    os << "value: " << args.polygonMode << std::endl;
  }
}

void CommandPrinter::PrintCmdSetRasterizationSamplesEXTArgs(
  std::ostream & os, const CmdSetRasterizationSamplesEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rasterizationSamples" << std::endl;
    // rasterizationSamples -> Field -> VkSampleCountFlagBits
    os << "value: " << args.rasterizationSamples << std::endl;
  }
}

void CommandPrinter::PrintCmdSetSampleMaskEXTArgs(
  std::ostream & os, const CmdSetSampleMaskEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  samples" << std::endl;
    // samples -> Field -> VkSampleCountFlagBits
    os << "value: " << args.samples << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pSampleMask" << std::endl;
    // pSampleMask -> Field -> ConstDynamicArray(VkSampleMask)
    if (((args.samples+31)/32) == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkSampleMask" << std::endl;
        for (uint64_t i = 0; i < ((args.samples+31)/32); ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pSampleMask << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSetAlphaToCoverageEnableEXTArgs(
  std::ostream & os, const CmdSetAlphaToCoverageEnableEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  alphaToCoverageEnable" << std::endl;
    // alphaToCoverageEnable -> Field -> VkBool32
    os << "value: " << args.alphaToCoverageEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetAlphaToOneEnableEXTArgs(
  std::ostream & os, const CmdSetAlphaToOneEnableEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  alphaToOneEnable" << std::endl;
    // alphaToOneEnable -> Field -> VkBool32
    os << "value: " << args.alphaToOneEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetLogicOpEnableEXTArgs(
  std::ostream & os, const CmdSetLogicOpEnableEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  logicOpEnable" << std::endl;
    // logicOpEnable -> Field -> VkBool32
    os << "value: " << args.logicOpEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetColorBlendEnableEXTArgs(
  std::ostream & os, const CmdSetColorBlendEnableEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstAttachment" << std::endl;
    // firstAttachment -> Field -> uint32_t
    os << "value: " << args.firstAttachment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentCount" << std::endl;
    // attachmentCount -> Field -> uint32_t
    os << "value: " << args.attachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pColorBlendEnables" << std::endl;
    // pColorBlendEnables -> Field -> ConstDynamicArray(VkBool32)
    if (args.attachmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkBool32" << std::endl;
        for (uint64_t i = 0; i < args.attachmentCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pColorBlendEnables << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSetColorBlendEquationEXTArgs(
  std::ostream & os, const CmdSetColorBlendEquationEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstAttachment" << std::endl;
    // firstAttachment -> Field -> uint32_t
    os << "value: " << args.firstAttachment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentCount" << std::endl;
    // attachmentCount -> Field -> uint32_t
    os << "value: " << args.attachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pColorBlendEquations" << std::endl;
    // pColorBlendEquations -> Field -> ConstDynamicArray(VkColorBlendEquationEXT)
    if (args.attachmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkColorBlendEquationEXT" << std::endl;
        for (uint64_t i = 0; i < args.attachmentCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pColorBlendEquations << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSetColorWriteMaskEXTArgs(
  std::ostream & os, const CmdSetColorWriteMaskEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstAttachment" << std::endl;
    // firstAttachment -> Field -> uint32_t
    os << "value: " << args.firstAttachment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentCount" << std::endl;
    // attachmentCount -> Field -> uint32_t
    os << "value: " << args.attachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pColorWriteMasks" << std::endl;
    // pColorWriteMasks -> Field -> ConstDynamicArray(VkColorComponentFlags)
    if (args.attachmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkColorComponentFlags" << std::endl;
        for (uint64_t i = 0; i < args.attachmentCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pColorWriteMasks << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSetRasterizationStreamEXTArgs(
  std::ostream & os, const CmdSetRasterizationStreamEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  rasterizationStream" << std::endl;
    // rasterizationStream -> Field -> uint32_t
    os << "value: " << args.rasterizationStream << std::endl;
  }
}

void CommandPrinter::PrintCmdSetConservativeRasterizationModeEXTArgs(
  std::ostream & os, const CmdSetConservativeRasterizationModeEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  conservativeRasterizationMode" << std::endl;
    // conservativeRasterizationMode -> Field -> VkConservativeRasterizationModeEXT
    os << "value: " << args.conservativeRasterizationMode << std::endl;
  }
}

void CommandPrinter::PrintCmdSetExtraPrimitiveOverestimationSizeEXTArgs(
  std::ostream & os, const CmdSetExtraPrimitiveOverestimationSizeEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  extraPrimitiveOverestimationSize" << std::endl;
    // extraPrimitiveOverestimationSize -> Field -> float
    os << "value: " << args.extraPrimitiveOverestimationSize << std::endl;
  }
}

void CommandPrinter::PrintCmdSetDepthClipEnableEXTArgs(
  std::ostream & os, const CmdSetDepthClipEnableEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depthClipEnable" << std::endl;
    // depthClipEnable -> Field -> VkBool32
    os << "value: " << args.depthClipEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetSampleLocationsEnableEXTArgs(
  std::ostream & os, const CmdSetSampleLocationsEnableEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  sampleLocationsEnable" << std::endl;
    // sampleLocationsEnable -> Field -> VkBool32
    os << "value: " << args.sampleLocationsEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetColorBlendAdvancedEXTArgs(
  std::ostream & os, const CmdSetColorBlendAdvancedEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstAttachment" << std::endl;
    // firstAttachment -> Field -> uint32_t
    os << "value: " << args.firstAttachment << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  attachmentCount" << std::endl;
    // attachmentCount -> Field -> uint32_t
    os << "value: " << args.attachmentCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pColorBlendAdvanced" << std::endl;
    // pColorBlendAdvanced -> Field -> ConstDynamicArray(VkColorBlendAdvancedEXT)
    if (args.attachmentCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkColorBlendAdvancedEXT" << std::endl;
        for (uint64_t i = 0; i < args.attachmentCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pColorBlendAdvanced << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSetProvokingVertexModeEXTArgs(
  std::ostream & os, const CmdSetProvokingVertexModeEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  provokingVertexMode" << std::endl;
    // provokingVertexMode -> Field -> VkProvokingVertexModeEXT
    os << "value: " << args.provokingVertexMode << std::endl;
  }
}

void CommandPrinter::PrintCmdSetLineRasterizationModeEXTArgs(
  std::ostream & os, const CmdSetLineRasterizationModeEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  lineRasterizationMode" << std::endl;
    // lineRasterizationMode -> Field -> VkLineRasterizationModeEXT
    os << "value: " << args.lineRasterizationMode << std::endl;
  }
}

void CommandPrinter::PrintCmdSetLineStippleEnableEXTArgs(
  std::ostream & os, const CmdSetLineStippleEnableEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stippledLineEnable" << std::endl;
    // stippledLineEnable -> Field -> VkBool32
    os << "value: " << args.stippledLineEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetDepthClipNegativeOneToOneEXTArgs(
  std::ostream & os, const CmdSetDepthClipNegativeOneToOneEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  negativeOneToOne" << std::endl;
    // negativeOneToOne -> Field -> VkBool32
    os << "value: " << args.negativeOneToOne << std::endl;
  }
}

void CommandPrinter::PrintCmdSetViewportWScalingEnableNVArgs(
  std::ostream & os, const CmdSetViewportWScalingEnableNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewportWScalingEnable" << std::endl;
    // viewportWScalingEnable -> Field -> VkBool32
    os << "value: " << args.viewportWScalingEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetViewportSwizzleNVArgs(
  std::ostream & os, const CmdSetViewportSwizzleNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstViewport" << std::endl;
    // firstViewport -> Field -> uint32_t
    os << "value: " << args.firstViewport << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  viewportCount" << std::endl;
    // viewportCount -> Field -> uint32_t
    os << "value: " << args.viewportCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pViewportSwizzles" << std::endl;
    // pViewportSwizzles -> Field -> ConstDynamicArray(VkViewportSwizzleNV)
    if (args.viewportCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkViewportSwizzleNV" << std::endl;
        for (uint64_t i = 0; i < args.viewportCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pViewportSwizzles << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSetCoverageToColorEnableNVArgs(
  std::ostream & os, const CmdSetCoverageToColorEnableNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  coverageToColorEnable" << std::endl;
    // coverageToColorEnable -> Field -> VkBool32
    os << "value: " << args.coverageToColorEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetCoverageToColorLocationNVArgs(
  std::ostream & os, const CmdSetCoverageToColorLocationNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  coverageToColorLocation" << std::endl;
    // coverageToColorLocation -> Field -> uint32_t
    os << "value: " << args.coverageToColorLocation << std::endl;
  }
}

void CommandPrinter::PrintCmdSetCoverageModulationModeNVArgs(
  std::ostream & os, const CmdSetCoverageModulationModeNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  coverageModulationMode" << std::endl;
    // coverageModulationMode -> Field -> VkCoverageModulationModeNV
    os << "value: " << args.coverageModulationMode << std::endl;
  }
}

void CommandPrinter::PrintCmdSetCoverageModulationTableEnableNVArgs(
  std::ostream & os, const CmdSetCoverageModulationTableEnableNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  coverageModulationTableEnable" << std::endl;
    // coverageModulationTableEnable -> Field -> VkBool32
    os << "value: " << args.coverageModulationTableEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetCoverageModulationTableNVArgs(
  std::ostream & os, const CmdSetCoverageModulationTableNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  coverageModulationTableCount" << std::endl;
    // coverageModulationTableCount -> Field -> uint32_t
    os << "value: " << args.coverageModulationTableCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCoverageModulationTable" << std::endl;
    // pCoverageModulationTable -> Field -> ConstDynamicArray(float)
    if (args.coverageModulationTableCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # float" << std::endl;
        for (uint64_t i = 0; i < args.coverageModulationTableCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pCoverageModulationTable << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSetShadingRateImageEnableNVArgs(
  std::ostream & os, const CmdSetShadingRateImageEnableNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  shadingRateImageEnable" << std::endl;
    // shadingRateImageEnable -> Field -> VkBool32
    os << "value: " << args.shadingRateImageEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetRepresentativeFragmentTestEnableNVArgs(
  std::ostream & os, const CmdSetRepresentativeFragmentTestEnableNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  representativeFragmentTestEnable" << std::endl;
    // representativeFragmentTestEnable -> Field -> VkBool32
    os << "value: " << args.representativeFragmentTestEnable << std::endl;
  }
}

void CommandPrinter::PrintCmdSetCoverageReductionModeNVArgs(
  std::ostream & os, const CmdSetCoverageReductionModeNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  coverageReductionMode" << std::endl;
    // coverageReductionMode -> Field -> VkCoverageReductionModeNV
    os << "value: " << args.coverageReductionMode << std::endl;
  }
}

void CommandPrinter::PrintCmdOpticalFlowExecuteNVArgs(
  std::ostream & os, const CmdOpticalFlowExecuteNVArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  session" << std::endl;
    // session -> Field -> VkOpticalFlowSessionNV
    os << "value: " << args.session << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pExecuteInfo" << std::endl;
    // pointer
    if (args.pExecuteInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pExecuteInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdBindShadersEXTArgs(
  std::ostream & os, const CmdBindShadersEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stageCount" << std::endl;
    // stageCount -> Field -> uint32_t
    os << "value: " << args.stageCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pStages" << std::endl;
    // pStages -> Field -> ConstDynamicArray(VkShaderStageFlagBits)
    if (args.stageCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkShaderStageFlagBits" << std::endl;
        for (uint64_t i = 0; i < args.stageCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pStages << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pShaders" << std::endl;
    // pShaders -> Field -> ConstDynamicArray(VkShaderEXT)
    if (args.stageCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkShaderEXT" << std::endl;
        for (uint64_t i = 0; i < args.stageCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pShaders << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdSetAttachmentFeedbackLoopEnableEXTArgs(
  std::ostream & os, const CmdSetAttachmentFeedbackLoopEnableEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  aspectMask" << std::endl;
    // aspectMask -> Field -> VkImageAspectFlags
    os << "value: " << args.aspectMask << std::endl;
  }
}

void CommandPrinter::PrintCmdBuildAccelerationStructuresKHRArgs(
  std::ostream & os, const CmdBuildAccelerationStructuresKHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  infoCount" << std::endl;
    // infoCount -> Field -> uint32_t
    os << "value: " << args.infoCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInfos" << std::endl;
    // pInfos -> Field -> ConstDynamicArray(VkAccelerationStructureBuildGeometryInfoKHR)
    if (args.infoCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkAccelerationStructureBuildGeometryInfoKHR" << std::endl;
        for (uint64_t i = 0; i < args.infoCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pInfos << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ppBuildRangeInfos" << std::endl;
    // ppBuildRangeInfos -> Field -> ConstDynamicArray(VkAccelerationStructureBuildRangeInfoKHR)
    if (args.infoCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkAccelerationStructureBuildRangeInfoKHR" << std::endl;
        for (uint64_t i = 0; i < args.infoCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << *(args.ppBuildRangeInfos) << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdBuildAccelerationStructuresIndirectKHRArgs(
  std::ostream & os, const CmdBuildAccelerationStructuresIndirectKHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  infoCount" << std::endl;
    // infoCount -> Field -> uint32_t
    os << "value: " << args.infoCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInfos" << std::endl;
    // pInfos -> Field -> ConstDynamicArray(VkAccelerationStructureBuildGeometryInfoKHR)
    if (args.infoCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkAccelerationStructureBuildGeometryInfoKHR" << std::endl;
        for (uint64_t i = 0; i < args.infoCount; ++i) {
          ScopedOstream somember(os);
          os << "members::" << std::endl << args.pInfos << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pIndirectDeviceAddresses" << std::endl;
    // pIndirectDeviceAddresses -> Field -> ConstDynamicArray(VkDeviceAddress)
    if (args.infoCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkDeviceAddress" << std::endl;
        for (uint64_t i = 0; i < args.infoCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pIndirectDeviceAddresses << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pIndirectStrides" << std::endl;
    // pIndirectStrides -> Field -> ConstDynamicArray(uint32_t)
    if (args.infoCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < args.infoCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pIndirectStrides << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  ppMaxPrimitiveCounts" << std::endl;
    // ppMaxPrimitiveCounts -> Field -> ConstDynamicArray(uint32_t)
    if (args.infoCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # uint32_t" << std::endl;
        for (uint64_t i = 0; i < args.infoCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << *(args.ppMaxPrimitiveCounts) << std::endl;
        } // for i
      }
    }
  }
}

void CommandPrinter::PrintCmdCopyAccelerationStructureKHRArgs(
  std::ostream & os, const CmdCopyAccelerationStructureKHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInfo" << std::endl;
    // pointer
    if (args.pInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdCopyAccelerationStructureToMemoryKHRArgs(
  std::ostream & os, const CmdCopyAccelerationStructureToMemoryKHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInfo" << std::endl;
    // pointer
    if (args.pInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdCopyMemoryToAccelerationStructureKHRArgs(
  std::ostream & os, const CmdCopyMemoryToAccelerationStructureKHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pInfo" << std::endl;
    // pointer
    if (args.pInfo != nullptr) {
      os <<  "members:" << std::endl << *args.pInfo << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
}

void CommandPrinter::PrintCmdWriteAccelerationStructuresPropertiesKHRArgs(
  std::ostream & os, const CmdWriteAccelerationStructuresPropertiesKHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  accelerationStructureCount" << std::endl;
    // accelerationStructureCount -> Field -> uint32_t
    os << "value: " << args.accelerationStructureCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pAccelerationStructures" << std::endl;
    // pAccelerationStructures -> Field -> ConstDynamicArray(VkAccelerationStructureKHR)
    if (args.accelerationStructureCount == 0) {
      os << "value: nullptr" << std::endl;
    } else {
      os << "members:" << std::endl;
      {
        ScopedOstream soarray(os);
        os << "- # VkAccelerationStructureKHR" << std::endl;
        for (uint64_t i = 0; i < args.accelerationStructureCount; ++i) {
          ScopedOstream somember(os);
          os << "value: :" << std::endl << args.pAccelerationStructures << std::endl;
        } // for i
      }
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryType" << std::endl;
    // queryType -> Field -> VkQueryType
    os << "value: " << args.queryType << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  queryPool" << std::endl;
    // queryPool -> Field -> VkQueryPool
    os << "value: " << args.queryPool << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  firstQuery" << std::endl;
    // firstQuery -> Field -> uint32_t
    os << "value: " << args.firstQuery << std::endl;
  }
}

void CommandPrinter::PrintCmdTraceRaysKHRArgs(
  std::ostream & os, const CmdTraceRaysKHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRaygenShaderBindingTable" << std::endl;
    // pointer
    if (args.pRaygenShaderBindingTable != nullptr) {
      os <<  "members:" << std::endl << *args.pRaygenShaderBindingTable << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMissShaderBindingTable" << std::endl;
    // pointer
    if (args.pMissShaderBindingTable != nullptr) {
      os <<  "members:" << std::endl << *args.pMissShaderBindingTable << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pHitShaderBindingTable" << std::endl;
    // pointer
    if (args.pHitShaderBindingTable != nullptr) {
      os <<  "members:" << std::endl << *args.pHitShaderBindingTable << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCallableShaderBindingTable" << std::endl;
    // pointer
    if (args.pCallableShaderBindingTable != nullptr) {
      os <<  "members:" << std::endl << *args.pCallableShaderBindingTable << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  width" << std::endl;
    // width -> Field -> uint32_t
    os << "value: " << args.width << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  height" << std::endl;
    // height -> Field -> uint32_t
    os << "value: " << args.height << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  depth" << std::endl;
    // depth -> Field -> uint32_t
    os << "value: " << args.depth << std::endl;
  }
}

void CommandPrinter::PrintCmdTraceRaysIndirectKHRArgs(
  std::ostream & os, const CmdTraceRaysIndirectKHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pRaygenShaderBindingTable" << std::endl;
    // pointer
    if (args.pRaygenShaderBindingTable != nullptr) {
      os <<  "members:" << std::endl << *args.pRaygenShaderBindingTable << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pMissShaderBindingTable" << std::endl;
    // pointer
    if (args.pMissShaderBindingTable != nullptr) {
      os <<  "members:" << std::endl << *args.pMissShaderBindingTable << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pHitShaderBindingTable" << std::endl;
    // pointer
    if (args.pHitShaderBindingTable != nullptr) {
      os <<  "members:" << std::endl << *args.pHitShaderBindingTable << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pCallableShaderBindingTable" << std::endl;
    // pointer
    if (args.pCallableShaderBindingTable != nullptr) {
      os <<  "members:" << std::endl << *args.pCallableShaderBindingTable << std::endl;
    } else {
      os << "value: nullptr" << std::endl;
    }
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  indirectDeviceAddress" << std::endl;
    // indirectDeviceAddress -> Field -> VkDeviceAddress
    os << "value: " << args.indirectDeviceAddress << std::endl;
  }
}

void CommandPrinter::PrintCmdSetRayTracingPipelineStackSizeKHRArgs(
  std::ostream & os, const CmdSetRayTracingPipelineStackSizeKHRArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  pipelineStackSize" << std::endl;
    // pipelineStackSize -> Field -> uint32_t
    os << "value: " << args.pipelineStackSize << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawMeshTasksEXTArgs(
  std::ostream & os, const CmdDrawMeshTasksEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountX" << std::endl;
    // groupCountX -> Field -> uint32_t
    os << "value: " << args.groupCountX << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountY" << std::endl;
    // groupCountY -> Field -> uint32_t
    os << "value: " << args.groupCountY << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  groupCountZ" << std::endl;
    // groupCountZ -> Field -> uint32_t
    os << "value: " << args.groupCountZ << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawMeshTasksIndirectEXTArgs(
  std::ostream & os, const CmdDrawMeshTasksIndirectEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  drawCount" << std::endl;
    // drawCount -> Field -> uint32_t
    os << "value: " << args.drawCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
}

void CommandPrinter::PrintCmdDrawMeshTasksIndirectCountEXTArgs(
  std::ostream & os, const CmdDrawMeshTasksIndirectCountEXTArgs &args) {
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  commandBuffer" << std::endl;
    // commandBuffer -> Field -> VkCommandBuffer
    os << "value: " << args.commandBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  buffer" << std::endl;
    // buffer -> Field -> VkBuffer
    os << "value: " << args.buffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  offset" << std::endl;
    // offset -> Field -> VkDeviceSize
    os << "value: " << args.offset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBuffer" << std::endl;
    // countBuffer -> Field -> VkBuffer
    os << "value: " << args.countBuffer << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  countBufferOffset" << std::endl;
    // countBufferOffset -> Field -> VkDeviceSize
    os << "value: " << args.countBufferOffset << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  maxDrawCount" << std::endl;
    // maxDrawCount -> Field -> uint32_t
    os << "value: " << args.maxDrawCount << std::endl;
  }
  {
    os << "- # parameter:" << std::endl;
    ScopedOstream sop(os);
    os << "name:  stride" << std::endl;
    // stride -> Field -> uint32_t
    os << "value: " << args.stride << std::endl;
  }
}



// NOLINTEND

